{"version":3,"sources":["components/app.styles.ts","components/Questions.tsx","components/Answers-1-39.tsx","components/Answers-40-80.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["createGlobalStyle","fade_in","keyframes","AppWrapper","styled","div","AnswersWrappe","QuestionsWrappe","UpButton","a","Questions","string","split","filter","q","trim","map","question","i","href","toString","key","Answers_1_39","id","Answers_40_80","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8yFAE4BA,YAAH,KAAlB,IAmCDC,EAAUC,YAAH,KASAC,EAAaC,IAAOC,IAAV,IAOHJ,GAMPK,EAAgBF,IAAOC,IAAV,KAqBbE,EAAkBH,IAAOC,IAAV,KAsBfG,EAAWJ,IAAOK,EAAV,KCwDNC,EA1Ja,WAC1B,IAAwBC,EA4IxB,OACE,kBAACJ,EAAD,MA7IsBI,EAMN,o52CAHTA,EAAOC,MAFC,aA8IVC,OAAO,SAAAC,GAAC,MAAiB,KAAbA,EAAEC,SACdC,IAAI,SAACC,EAAUC,GAAX,OACH,uBAAGC,KAAM,WAAID,EAAI,GAAIE,WAAYC,IAAKH,GACpC,8BAAOA,EAAI,EAAX,KADF,IACyBD,OCgnGpBK,EArwGgB,WAC7B,OACE,oCACE,yBAAKC,GAAG,KACN,+tCAMA,8tCAMA,0oIAeA,+4KAmBA,+7EAUA,87EASA,2sCAOF,yBAAKA,GAAG,KACN,g8BAKA,myHAaA,0dAIA,giIAcA,sxBAKA,+QAIA,qoFAYF,yBAAKA,GAAG,KACN,klBAIA,+gDAOA,+lDAOA,4lCAMA,qHACA,gpBAIA,0ZAIA,kvCAMA,4lCAMA,kyCAMA,wuDAOA,4wCAMA,ioDAOA,29DASF,yBAAKA,GAAG,KACN,wPACA,0iDAOA,ifAIA,48DAQA,u0BAKA,8uCAMA,6MACA,+7BAKA,4zBAKA,i3DAQA,orDAOA,87WAqCF,yBAAKA,GAAG,KACN,kuCAMA,63BAKA,g7DAQA,osBAIA,4BACE,uNACA,0JACA,iMACA,mPAEF,yzGAaA,u6BAKA,82MAuBF,yBAAKA,GAAG,KACN,ucAIA,+vRA6BA,+nFAWA,2iBAIA,w2EAWF,yBAAKA,GAAG,KACN,ggCAKA,8sGAYA,urEASA,qbAIA,grFAUA,0xCAOA,+nDAOA,o9FAYA,0zCAMA,6iBAIA,syCAMA,qdAIA,y6BAKA,u1BAKA,uZAIA,i/CAOA,ihEAQA,sWACA,koBAIA,6RACA,u3IAeA,swDASF,yBAAKA,GAAG,KACN,sgBAIA,yhBAKF,yBAAKA,GAAG,KACN,ueAIA,0lBAIA,irDAOA,6SACA,4BACE,mQACA,mNACA,yQACA,mTACA,iZAKF,krBA3BF,8FAgCE,unBAIA,4BACE,gFACA,oKACA,yOACA,0MACA,2GAzCJ,gJA4CE,spCA5CF,iEAmDE,4BACE,uIACA,6JACA,mOAtDJ,uEAyDE,4BACE,gLACA,wLAEF,2+CAMA,69BAMF,yBAAKA,GAAG,MACN,4OACA,qgDAOA,+nBAIA,qHACA,46CAOA,oFACA,00CAMA,8vBAKA,gHACA,srBAIA,mOACA,4BACE,8IACA,qLACA,2GAEF,mrCAMA,u4BAMF,yBAAKA,GAAG,MACN,mfAIA,owEASA,8YAGA,m/FAWA,0mFAUA,+4CAMA,yVACA,8hCAKA,4BACE,4FACA,yIAEF,2jHAaA,09LAoBA,s5BAMF,yBAAKA,GAAG,MACN,ofAIA,2kBAIA,0uBAIA,yWACA,ilEAQA,yaAIA,4BACE,4BACE,yvBAMF,4BACE,6dAKF,4BACE,kFAGJ,qMACA,4BACE,4BACE,gHAEF,4BACE,klCAOF,4BACE,krCAOF,4BACE,yuBAMF,4BACE,o9CAQF,4BACE,guDAUJ,oLACA,4BACE,4BACE,wKAEF,4BACE,6XAKF,4BACE,ujBAMJ,82BAKA,qlBAIA,4BACE,8GACA,kQAEF,olBAIA,0GACA,4BACE,4BACE,uVAEF,4BACE,mPAEF,4BACE,wMAMJ,8IACA,4BACE,4BACE,6cAKF,4BACE,4MAEF,4BACE,01BAOJ,wtDAQA,uUACA,4BACE,4BACE,2bAKF,4BACE,4cAKF,4BACE,4xBAQN,yBAAKA,GAAG,MACN,ihBAIA,whGAWA,o2CAMA,skDAOA,60GAYA,0wCAMA,ivDAOA,8pDAOA,8+DAQA,4PACA,4BACE,4BACE,mVAEF,4BACE,+3BAOJ,4BACE,udAIA,+xBAKA,2MACA,gJAEF,4BACE,4BACE,w0BAMF,4BACE,6fAKF,4BACE,+nBAKF,4BACE,+YAKF,4BACE,wxDASF,4BACE,ieAKF,4BACE,iWAEF,4BACE,qYAKF,4BACE,ydAON,yBAAKA,GAAG,MACN,mXACA,iIACA,4BACE,4FACA,gEACA,oEACA,+GACA,iFAEF,2FACA,w/CAOA,+GACA,4BACE,0jBAIA,weAKF,yDACA,g0CAMA,mEACA,0wBAKA,4BACE,8DACA,wFAEF,wLACA,otDAOA,+EACA,kjBAKF,yBAAKA,GAAG,MACN,8qCAMA,6tCAMA,+TACA,4BACE,4HACA,kIACA,8IACA,oLAEF,yyDAOA,gNACA,y4DAQA,ouBAIA,k2CAMA,6+BAKA,2RACA,4BACE,mQACA,+LACA,gMACA,8IACA,+LACA,gTAEF,yWACA,4BACE,wIACA,sJACA,gMACA,8NACA,wKACA,uHACA,6FACA,0GAEF,2TACA,4BACE,wSACA,+IAEF,0bAIA,4BACE,iKACA,0OACA,+6CAQF,03CAOA,spDAOA,2WACA,4BACE,8IACA,8IACA,6HACA,0XAIF,mqBAIA,4BACE,gdAIA,2LACA,0ZAIA,mbAIA,sRACA,oLAEF,2hCAKA,4qCAMA,s3BAMF,yBAAKA,GAAG,MACN,kNACA,uwCAMA,qlFAUA,sUACA,4BACE,oQACA,kRACA,6UACA,8YAIA,kbAIA,snBAIA,qnCAMA,mkCAQJ,yBAAKA,GAAG,MACN,ylCAMA,0lBAIA,4BACE,gxBAKA,m3BAKA,ylCAOF,wxBAKA,0yEASA,g7BAKA,4gDAOA,kkDAOA,ixBAKA,mzBAKA,0fAIA,4MACA,4BACE,4BACE,obAKF,4BACE,oSAEF,4BACE,uXAIF,4BACE,itBAOJ,kuBAIA,sgDAOA,6jCAKA,06DAQA,qnBAIA,65CAMA,wxBAKA,8rCAMA,01BAMF,yBAAKA,GAAG,MACN,4ZAGA,opKAkBA,isIAeA,gkFAUA,6zEASA,snGAYA,47FAYF,yBAAKA,GAAG,MACN,yxBAKA,kkCAMA,0bAIA,m5BAKA,6qBAKA,s0CAMA,ooEAQA,kqCAMA,s+EAUA,whCAMA,ulDAOA,q1DAQA,y7CAOA,4yDAQA,wkDAQF,yBAAKA,GAAG,MACN,oYACA,+8OA0BF,yBAAKA,GAAG,MACN,g5BAKA,y0BAKA,0JACA,4BACE,qdAIA,+aAKF,2JACA,4BACE,4yBAKA,q0BAKA,0OAEF,ysEASA,msBAIA,mGACA,4BACE,sgBAIA,uPACA,kIACA,qMACA,mLACA,8cAIA,quBAOJ,yBAAKA,GAAG,MACN,0YAEF,yBAAKA,GAAG,MACN,o4CAMA,qtBAKA,qWAIA,4gDAOA,gpBAIA,iRACA,4BACE,qHACA,uFACA,2EACA,qJACA,6FACA,oGAEF,srCAMA,4XACA,o3EAUA,8/CAOA,4BACE,iLACA,0IACA,qJACA,uIAEF,snBAIA,4BACE,mRACA,qNACA,gJACA,22FAYF,kkBAIA,u2BAKA,mbAKF,yBAAKA,GAAG,MACN,orBAIA,+RAIA,+kEAQA,0OACA,4BACE,kGACA,uFACA,4EAEF,00BAKA,gxCAMA,mQACA,4BACE,gXAGA,uLACA,kfAIA,+aAIA,6VAIF,2KACA,06FAYF,yBAAKA,GAAG,MACN,y3BAKA,+jFAWA,00DAQA,gKACA,yoBAIA,4BACE,qOACA,0SACA,2aAIA,0VACA,wNACA,8NACA,sTACA,wPAEF,uxFAUA,4BACE,sRACA,+RACA,gyEASA,qsHAgBJ,yBAAKA,GAAG,MACN,y6BAKA,q1BAKA,+QACA,4BACE,wrBAKA,ogBAIA,sVACA,mSAGJ,yBAAKA,GAAG,MACN,igBAIA,maAIA,khBAIA,m4DAQA,4iBAIA,mxCAMA,iXACA,4BACE,gnEASA,0oGAYA,4lDAQF,qYAGA,w0EAUA,kkCAMA,mbAIA,wXAGA,s2BAKA,+hCAMA,iFACA,4BACE,gOACA,4HACA,8KACA,iZAKJ,yBAAKA,GAAG,MACN,qVACA,2yDAQA,4BACE,qjEASA,wzDASF,qKACA,i8DAQA,48CAOA,07CAOA,i4DASF,yBAAKA,GAAG,MACN,6kBAIA,8iCAKA,oWACA,ykCAMA,+QACA,4BACE,6FACA,mGACA,gKAEF,ikEASA,slDAOA,6mEAUF,yBAAKA,GAAG,MACN,2VAGA,k6CAMA,irEASA,+nFAUA,+qCAMA,+KACA,m9EAUA,+KACA,qqDAQA,g5EAWF,yBAAKA,GAAG,MACN,6wBAKA,sUACA,4BACE,2MACA,wKACA,sHACA,grCAOF,sdAIA,4BACE,8yBAMF,4BACE,mYAIA,wZAKF,4BACE,opEAUF,okDAOA,4BACE,q8CAQF,4BACE,sTAEF,4BACE,41DASF,giBAIA,62CAMA,kkBAIA,koDAOA,mPACA,4BACE,uSACA,kTACA,mIACA,6HACA,+IACA,mIACA,4MACA,0JACA,+FAEF,42CAMA,4BACE,02BAKA,mSACA,wRACA,uRACA,wnBAKF,suBAKF,yBAAKA,GAAG,MACN,gTACA,qqFAUA,w9BAKA,07EAUA,4BACE,gbAIA,0hCAMA,8UAGA,i2BAMF,4xEASA,49EAUA,ihDAOA,mqCAMA,q5BAKA,o8DAQA,6sDAOA,2DACA,6qDAOA,29CAOA,62CAMA,isBAIA,uqBAKF,yBAAKA,GAAG,MACN,6+BAKA,88DAQA,o4DAQA,6gEASA,kkBAIA,q5DASA,opBAIA,miDAOA,m6DAQA,q2BAKA,gfAIA,yrCAMA,q/CAOA,4oCAMA,kVACA,4BACE,mqBAIA,oJACA,sgBAMJ,yBAAKA,GAAG,MACN,+SADF,4FAIA,yBAAKA,GAAG,MACN,spCAMA,q+CAOA,wdAIA,i8BAKA,4/BAKA,oTACA,4BACE,iWACA,yaAIA,2eAKF,syBAKA,0pBAIA,2uCAMA,ugBAIA,+8BAKA,2YAGA,4BACE,+DACA,iFACA,qEACA,iFACA,yGACA,+IACA,+DACA,iFACA,sEAEF,iuCAMA,owDAQA,iqCAMA,6wBAKA,4BACE,4HACA,4HACA,oJACA,oGACA,4OACA,iKACA,gMACA,uHACA,yLACA,qLACA,yPACA,kJAEF,6vDAQA,21BAKA,4PACA,4BACE,wIACA,sHACA,2EACA,0GACA,8IACA,mGACA,+IAEF,ylCAMA,ijBAIA,qpCAOF,yBAAKA,GAAG,MACN,2QACA,grIAeA,iwKAqBF,yBAAKA,GAAG,MACN,6wBAKA,u4BAKA,mIACA,4BACE,uHAEF,4BACE,wGACA,8GACA,wLAEF,4BACE,gJAEF,4BACE,gMACA,+KAEF,4BACE,kNAEF,4BACE,gFACA,wGACA,kGACA,sIACA,uFAEF,4BACE,2GAEF,4BACE,sFACA,mGAEF,kYACA,4BACE,4BACE,+iDAQF,4BACE,omEAUF,4BACE,s1DAUJ,szDAOA,87DAQA,onCAMA,qtBAIA,suFAWF,yBAAKA,GAAG,MACN,2OACA,+2CAMA,6QACA,yEACA,8lFAUA,ixBAKA,onFAUA,+EACA,k5BAKA,yEACA,0cAIA,m7BAKA,q+DAQA,6yFAWA,yHACA,yoEASA,8QACA,gIACA,0mGAYA,qFACA,4hFAUA,sIACA,qrHAcA,sSACA,0HACA,uuDAQF,yBAAKA,GAAG,MACN,s5BAKA,gjCAMA,6pDAOA,gnBAIA,22DASA,ghDAOA,+5DAQA,ooDAOA,waAIA,4BACE,iOACA,srBAIA,6SAEF,gFACA,4BACE,8EACA,2GACA,iGACA,yHAEF,yxCAMA,m2BAKA,80CAMA,8ZAIA,q4CC74BOC,EA52EiB,WAC9B,OACE,oCACE,yBAAKD,GAAG,MACN,gYAGA,wiEASA,izEASA,y+KAmBF,yBAAKA,GAAG,MACN,w8BAKA,2wHAcA,ypBAKA,yaAIA,icAIA,u9EAUA,o0EASA,4/FAYA,u6EAUA,ogFAUA,+wOAyBF,yBAAKA,GAAG,MACN,qWACA,0lBAIA,8mDAOA,u8BAKA,y+CAOA,w3CAMA,6nEAQA,irCAOF,yBAAKA,GAAG,MACN,4VACA,soIAeA,w7EAUF,yBAAKA,GAAG,MACN,wXAGA,k4EASA,6lBAIA,0gFAUA,y/GAaA,uvLAoBF,yBAAKA,GAAG,MACN,m4BAKA,+9CAOA,wzMAqBA,qgQA4BA,01FAaF,yBAAKA,GAAG,MACN,wVAIA,qiBAIA,mIACA,slHAaA,42CAOA,k3DASF,yBAAKA,GAAG,MACN,unBAIA,y2NAuBA,y0CAMA,g7EAUA,ogDAOA,mrDAOA,60BAKA,g2GAaF,yBAAKA,GAAG,MACN,kNACA,mhPAwBA,m8IAeA,ssGAaF,yBAAKA,GAAG,MACN,s5BAKA,8xsBA2EA,24CAOA,4vEASA,swBAIA,uuCAMA,4sHAeF,yBAAKA,GAAG,MACN,sSACA,k5KAmBF,yBAAKA,GAAG,MACN,85BAKA,gkLAoBF,yBAAKA,GAAG,MACN,wPACA,ykFAUA,2xGAYA,gpBAKF,yBAAKA,GAAG,MACN,wvBAKA,wkFAUA,geAIA,6sIAeA,yqDAOA,qtCAOF,yBAAKA,GAAG,MACN,oXAGA,m7EAUA,qrEASA,w+GAaF,yBAAKA,GAAG,MACN,0jBAIA,srBAIA,ixEASA,88FAWA,+xJAiBA,89UAkCF,yBAAKA,GAAG,MACN,qMACA,s8IAeA,2sGAYA,suSA+BF,yBAAKA,GAAG,MACN,igBAIA,y8EAUA,qWACA,0KACA,wOACA,2zCAMA,kxCAMA,mxGAYA,wgDAQF,yBAAKA,GAAG,MACN,iNACA,8xCAQA,4xPA2BF,yBAAKA,GAAG,MACN,+yBAKA,w+IAgBA,iwFAYF,yBAAKA,GAAG,MACN,6oBAIA,6jBAKF,yBAAKA,GAAG,MACN,yaAIA,igJAgBA,srHAaA,40GAYA,qnHAaA,0wEASA,g6CAQF,yBAAKA,GAAG,MACN,ikBAIA,uzCAMA,u+JAkBF,yBAAKA,GAAG,MACN,6oBAIA,irCAMA,8lEASA,qlBAIA,o3FAWA,whCAKA,gwEASA,k7BAMF,yBAAKA,GAAG,MACN,mfAIA,woBAIA,2sBAIA,qWACA,qtFAUA,+7DAQA,84HAcA,iyBAKA,8vDASF,yBAAKA,GAAG,MACN,8jBAIA,w5HAcA,mtDAQA,uYAGA,otDAOA,89FAYA,2xBAKA,u4CAMA,6uHAeF,yBAAKA,GAAG,MACN,2VACA,2gCAMA,ovGAYA,01JAiBF,yBAAKA,GAAG,MACN,0bAIA,y1CAMA,yTACA,q/EAUA,80CAMA,i6DAQA,++FAWA,4yGAYA,0yDAOA,0sBAKF,yBAAKA,GAAG,MACN,yWAGA,gwEASA,01CAMA,6rEASA,g9BAKA,kuFAUA,ssCAMA,6wBAMF,yBAAKA,GAAG,MACN,ilBAIA,yjDAOA,0kFAUA,u/DAQA,kmDAOA,8hEAQA,61CAMA,87dAgDA,yrEAUF,yBAAKA,GAAG,MACN,iNACA,8xCAQA,4xPA2BF,yBAAKA,GAAG,MACN,upCAMA,0uDAQA,otDAOA,s/BAKA,8sCAMA,ulFAUA,02HAgBF,yBAAKA,GAAG,MACN,kHACA,+jFAWA,00DAQA,okBAIA,goGAYA,0QACA,61BAKA,kOACA,g/CAOA,68BAMF,yBAAKA,GAAG,MACN,0mBAIA,myCAMA,g6CAMA,sNACA,m2JAmBA,ioDAQA,+oIAeA,m5CAOA,62MAuBF,yBAAKA,GAAG,MACN,sSACA,s/CAOA,gvCAMA,8qCAMA,ylEASA,svGAYA,82PA0BF,yBAAKA,GAAG,MACN,0yBAKA,u3CAMA,q4CAOA,0zBAKA,gkCAMA,6sCAMA,2+CAOA,+zDAQA,4kEAQA,umEASA,mrCAMA,qoIAeA,sgDAOA,0uCAMA,oyDAQA,2qDAQA,whCAMA,osCAOF,yBAAKA,GAAG,MACN,oXAGA,m7EAUA,qrEASA,w+GAaF,yBAAKA,GAAG,MACN,qiBAIA,6oDAOA,8rCAMA,y1BAKA,6iCAKA,ozCAMA,24BAKA,w+BAKA,odAIA,66BAKA,0kFAUA,unEASA,gqGAYA,kmEASF,yBAAKA,GAAG,MACN,wXAGA,k4EASA,6lBAIA,0gFAUA,y/GAaA,uvLAoBF,yBAAKA,GAAG,MACN,gwBAKA,miCAMA,kpCAOA,u/BAMA,s4CAOA,wwDAQA,whEAQA,yoBAKA,8MACA,6LACA,iPACA,uLACA,4DACA,8PACA,mVAMA,0UAOF,yBAAKA,GAAG,MACN,kNACA,mhPAwBA,m8IAeA,wsGCz0EOE,EAbO,WACpB,OACE,kBAACtB,EAAD,KACE,kBAAC,EAAD,MACA,kBAACG,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAACE,EAAD,CAAUW,KAAK,KAAf,YCHAO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KClGjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACnBC,kBACD7B,OAAOC,SAASV,MAEJuC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,kBAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MC/C/BE,K","file":"static/js/main.7c313281.chunk.js","sourcesContent":["import styled, { createGlobalStyle, keyframes } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap');\n@import url('https://fonts.googleapis.com/css?family=Poppins:300,400,700&display=swap');\n\n  body,\n  html {\n    font-family: 'Lato', sans-serif; \n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    margin: 0px;\n    overflow-x: hidden;\n  }\n\n  button,\n  input[type=\"submit\"],\n  input[type=\"reset\"] {\n    background: none;\n    color: inherit;\n    border: none;\n    padding: 0;\n    font: inherit;\n    cursor: pointer;\n    outline: inherit;\n  }\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button  {\n  -webkit-appearance: none;\n  margin: 0; \n}\n\n`;\n\nconst fade_in = keyframes`\n   from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  animation-name: ${fade_in};\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in;\n`;\n\nexport const AnswersWrappe = styled.div`\n  font-size: 16px;\n  div {\n    border: none;\n    padding: 10px 5px;\n    margin: 10px 0;\n\n    padding: 20px 20px;\n    border-bottom: 2px solid #00000028;\n    border-radius: 3px;\n    color: #000000d9;\n    text-decoration: none;\n    background-color: #f6fdff;\n    margin: 10px 10px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n  h3 {\n    letter-spacing: 0.5px;\n  }\n`;\n\nexport const QuestionsWrappe = styled.div`\n  font-family: 'Poppins', sans-serif;\n  display: grid;\n  a {\n    padding: 20px 20px;\n    border-bottom: 2px solid #00000028;\n    border-radius: 3px;\n    color: #000000d9;\n    text-decoration: none;\n    background-color: #f1f1f1;\n    margin: 10px 10px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n  a:active {\n    box-shadow: none;\n  }\n  span {\n    font-weight: 700;\n    letter-spacing: 0.5px;\n  }\n`;\n\nexport const UpButton = styled.a`\n  position: fixed;\n  bottom: 0;\n  /* right: 0; */\n  width: 100%;\n  padding: 5px 0px;\n  color: #000000;\n  margin-left: -7px;\n  font-size: 20px;\n  text-align: right;\n  border: none;\n  text-decoration: none;\n  opacity: 0.3;\n  border-radius: 5px;\n  background-color: #839396;\n  box-shadow: 2px;\n  box-shadow: 0px -1px 20px -4px rgba(24, 47, 51, 1);\n`;\n","import React from 'react';\n\nimport { QuestionsWrappe } from './app.styles';\n\nconst Questions: React.FC = (): JSX.Element => {\n  const questionsArray = (string: string) => {\n    const regExp = /\\d+\\.\\s/g;\n\n    return string.split(regExp);\n  };\n\n  const rawQuestions = `\n  1. Покоління обчислювальних машин за елементною базою. Їх основні характеристики.\n  2. Електронні таблиці та їх призначення. Середовище табличного процесора та основні його\n  елементи. Подання даних в електронних таблицях. Введення тексту, чисел і формул.\n  Приклади.\n  3. Інформація і повідомлення. Види інформації та її властивості. Інформація та шум, їх\n  взаємоперетворення.\n  4. Програмне забезпечення. Визначення. Види.\n  5. Системи опрацювання графічних зображень. Створення і редагування графічних зображень за\n  допомогою графічного редактора. Зміна параметрів графічних об'єктів у середовищі графічного\n  редактора. Графічні формати Інтернету. Приклади.\n  6. Структурна схема обчислювальної машини першого покоління. Призначення вузлів.\n  7. Поняття про сучасні засоби зберігання й опрацювання повідомлень. Носії повідомлень.\n  Форми і способи подання повідомлень. Кодування повідомлень, за допомогою яких\n  передається інформація.\n  8. Багаторівнева пам’ять обчислювальної системи. Її види. Упорядкувати по наступним\n  умовам:\n  • Збільшує ємність\n  • Збільшує час доступу\n  • Зменшує вартість зберігання одного біту інформації\n  9. Структура інформаційної системи: апаратна та інформаційна складові, їх взаємодія.\n  10. Дисплей. Основні характеристики. Види.\n  11. Упорядкування даних в середовищі табличного процесора. Використання фільтрів. Приклади.\n  12. Носії інформації для обчислювальних систем. Види. Особливості. Основні характеристики.\n  13. Основні складові апаратної частини інформаційної системи, їх функціональне призначення..\n  14. Пристрої для вводу інформації в обчислювальній системі. Види.\n  15. Системи опрацювання текстів, їх функції. Середовище текстового процесора, його призначення\n  та система вказівок. Відкриття та збереження документу. Введення тексту, його редагування і\n  форматування. Перевірка правопису.\n  16. Операційна система. Призначення.\n  17. Операційна система, її функції. Інтерфейс операційної системи та правила роботи з ним. Основні\n  об'єкти, з якими працює операційна система. Типи вікон і правила роботи з ними. Піктограми, їх\n  призначення.\n  18. Поняття генерації, інсталяції, ініціалізації операційної системи.\n  19. Робота з графічними об'єктами в середовищі текстового процесора. Вкорінення об'єктів\n  з інших додатків. Приклади. Операційна система. Призначення.\n  20. Завантаження операційної системи. Етапи. Поняття ініціалізації.\n  21. Поняття про бази даних та їх види: фактографічні та документальні. Інформаційно-пошукові\n  системи та системи управління базами даних (СУБД), їх призначення та функції.22. Принцип розташування операційної системи в оперативній пам’яті.\n  23. Основні об'єкти, з якими працює операційна система, та вказівки для роботи з ними.\n  Стандартні імена зовнішніх запам'ятовуючих пристроїв комп'ютера. Поняття файла, його\n  імені та розширення, каталогу (папки), шляху до файла. Особливості виконуваних файлів.\n  Приклади.\n  24. Системи числення, що використовуються в обчислювальних системах. Види. Приклади.\n  Арифметичні операції в двійковій системі.\n  • Скласти два числа (10110011101) + (00011101011)\n  • Відняти два числа (1011011001)- (0101101110)\n  25. Основні поняття бази даних. Типи даних, що зберігаються в базі даних. Проектування бази\n  даних і створення структури бази даних. Основні команди для роботи з таблицями.\n  26. Призначення віртуальної пам'яті в обчислювальних системах. Максимальний розмір\n  програми при віртуальній організації пам'яті. Її розподілення між користувачем та ОС.\n  27. Поняття про стиснення даних. Призначення та основні функції програм-архіваторів. Приклади.\n  28. Файл. Файлові системи з погляду користувача. Призначення.\n  29. Структура програмної складової інформаційної системи. Системне і прикладне програмне\n  забезпечення.\n  30. Файлова система (FAT). Особливості роботи. Переваги та недоліки.\n  31. Опрацювання даних за допомогою табличного процесора: редагування, копіювання,\n  форматування, переміщення, захист від змін, зв'язування. Приклади.\n  32. Способи пошуку файлів в різних файлових системах .\n  33. Поняття про мову програмування. Класифікація мов програмування. Основні поняття мови:\n  алфавіт, синтаксис і семантика. Основні елементи мови програмування: символи, слова,\n  вирази і команди.\n  34. Способи пошуку файлів в різних файлових системах .\n  35. Об'єкти в середовищі текстового процесора (символ, абзац, * документ) і правила роботи з\n  ними. Робота з фрагментами тексту:, виділення, перенесення, копіювання, форматування, Пошук,\n  заміна. Використання буфера обміну. Приклади.\n  36. Дескриптор файлу. Призначення. Основні поля.\n  37. Комп'ютерні мережі. Види, основні характеристики і принципи використання комп'ютерних\n  мереж. Сервер та робоча станція. Технологія клієнт-сервер.\n  38. Пристрої виведення інформації. Типи.\n  39. Виконання обчислень у середовищі табличного процесора. Використання математичних\n  функцій і операцій для опрацювання даних, поданих в електронній таблиці. Приклади.\n  40. Форматування диска. Призначення. Збереження інформації про формат .\n  41. Електронна пошта та пришити її функціонування. Поштові стандарти. Електронна адреса.\n  Основні можливості використання поштових програм. Правила й етикет електронного\n  листування.\n  42. Покоління обчислювальних машин по методу обробки інформації.\n  43. Правила впорядкування та пошуку даних у базі даних. Приклади.\n  44. Розподілені системи обробки інформації. Визначення. Призначення.45. Апаратні, програмні та інформаційні ресурси сучасних мереж. Програмне забезпечення роботи\n  в глобальній мережі Інтернет. Основні послуги глобальної мережі Інтернет.\n  46. IP адреса. Призначення. Дати двійкове представлення IP адреси 10.18.52.1\n  47. Ділова графіка. Побудова діаграм і графіків на основі табличних даних у середовищі табличного\n  процесора. Приклади.\n  48. Мета обчислення (Суперобчислення)\n  49. Інформаційний зв'язок у мережі Інтернет. Ідентифікація комп'ютерів у мережі. Адресація в\n  мережі Інтернет. Провайдери. Способи під'єднання комп'ютерів до глобальної мережі.\n  50. Математичне забезпечення обчислювальних систем.\n  51. Робота з таблицями в середовищі текстового процесора.Автоматичне форматування\n  таблиці. Створення нового стилютаблиці. Таблиця і текст, їх взаємне перетворення.\n  Приклади.\n  52. Локальна мережа. Визначення. Призначення.\n  53. Поняття про комп'ютерні віруси та їх класифікація. Антивірусні програми та їх застосування.\n  Профілактика зараження комп'ютерними вірусами.\n  54. Клієнт-серверна система. Призначення. Поняття клієнту та серверу.\n  55. Вкорінені та зв'язані об'єкти слайдів комп'ютерної презентації. Способи демонстрації слайдів.\n  Приклади.\n  56. Застосування GRID систем. Недоліки.\n  57. Етапи розв'язування задачі з використанням комп'ютера. Поняття інформаційної моделі\n  задачі.\n  58. Текстовий редактор WORD. Призначення.\n  59. Виконання обчислень у середовищі табличного процесора. Використання логічних\n  функцій та операцій для опрацювання даних, поданих у таблиці. Приклади.\n  60. Використання різних форматів зберігання даних. Вказати який формат для зберігання яких\n  даних використовується. DOC, JPG, PDF, HTML, AVI, PAS.\n  61. Етапи розвитку обчислювальної техніки та галузі застосування комп'ютерів.\n  62. Багаторівневі системи програмування в сучасних обчислювальних системах. Вказати рівні\n  програмування.\n  63. Використання різних типів об'єктів (текстових, графічних, числових, звукових, відео) для\n  створення презентації. Приклади.\n  64. Транслятор. Призначення. Відмінність компілятора від інтерпретатора. Переваги, недоліки\n  65. Поняття програми. Поняття про системи програмування. Поняття про інтерпретацію та\n  компіляцію програми.\n  66. Редактор зв’язків. Призначення. Вхідна і вихідна інформація.\n  67. Створення запитів, форм і формування звітів при роботі з базами даних. Приклади.\n  68. Види модулів. Програми, що беруть участь в перетворенні модулів\n  69. Поняття про растрову та векторну графіку. Системи опрацювання графічної інформації.\n  Типи графічних файлів.\n  70. Текстовий редактор WORD. Призначення.71. Поняття гіпертексту. Засоби створення та перегляду гіпертекстових документів.\n  Особливості мови розмітки НТМL. Тегова модель. Класифікація тегів. Основні теги мови\n  НТМL для створення гіпертекстового документа. Приклади.\n  72. База даних. Види.\n  73. Системи опрацьовування текстів, їх класифікація та функції. Основні формати текстових\n  файлів і їх перетворення.\n  74. Математичне забезпечення обчислювальних систем.\n  75. Організація пошуку інформації в глобальній мережі. Способи збереження веб-сторінок та їх\n  частин. Особливості збереження зображень і звуку. Приклади.\n  76. Клієнт-серверна система. Призначення. Поняття клієнту та серверу.\n  77. Поняття алгоритму. Властивості алгоритмів. Базові структури алгоритмів та їх основні\n  властивості.\n  78. Розподілені системи обробки інформації. Визначення. Призначення.\n  79. Основні команди для роботи з таблицями в реляційних базах даних: створення структури\n  записів, заповнення даними, редагування даних. Приклади.\n  80. Мета обчислення (Суперобчислення`;\n\n  return (\n    <QuestionsWrappe>\n      {questionsArray(rawQuestions)\n        .filter(q => q.trim() !== '')\n        .map((question, i) => (\n          <a href={`#${i + 1}`.toString()} key={i}>\n            <span>{i + 1}.</span> {question}\n          </a>\n        ))}\n    </QuestionsWrappe>\n  );\n};\n\nexport default Questions;\n","import React from 'react';\n\nconst Answers_1_39: React.FC = (): JSX.Element => {\n  return (\n    <>\n      <div id=\"1\">\n        <h3>\n          Computer(Комп'ютер обчислювач) - пристрій, призначений для обробки,\n          зберігання та передвання інформації. Може обробляти тільки інформацію\n          представлену в цифровій формі. Термін комп'ютер є синонімом ЕОМ. Після\n          появи PC термін ЕОМ був витісненний.\n        </h3>\n        <p>\n          Computer(Комп'ютер обчислювач) - пристрій, призначений для обробки,\n          зберігання та передвання інформації. Може обробляти тільки інформацію\n          представлену в цифровій формі. Термін комп'ютер є синонімом ЕОМ. Після\n          появи PC термін ЕОМ був витісненний.\n        </p>\n        <p>\n          Перше (1940-ві – середина 1950-х років) ЕОМ цього покоління базувались\n          на дискретних елементах і вакуумних лампах, мали великі габарити,\n          масу, потужність, володіючи при цьому малою надійністю. Основна\n          технологія збірки — навісний монтаж. Вони використовувались переважно\n          для вирішення науково-технічних завдань атомної промисловості,\n          реактивної авіації та ракетобудування. Збільшенню кількості\n          вирішуваних завдань перешкоджали низька надійність і продуктивність, а\n          також надзвичайно трудомісткий процес підготовки, введення та\n          налагодження програми, написаної мовою машинних команд, тобто у формі\n          двійкових кодів. Машини цього покоління мали швидкодію близько 10-20\n          тисяч операцій в секунду і оперативну пам’ять приблизно 1 кілобайт. У\n          цей же період з'явились перші прості мови для автоматизованого\n          програмування.\n        </p>\n        <p>\n          Друге кінець 1950-х друге Це було зумовлено насамперед появою\n          напівпровідників і створенням на їх основі транзисторів, які замінили\n          електронні лампи. ЕОМ на транзисторній елементній базі докорінно\n          змінили більшість уявлень про можливості та роботу ЕОМ. Значно зросла\n          їх надійність, вони могли вже працювати упродовж кількох діб без\n          перерви. Скоротилися витрати електроенергії, зменшилися розміри\n          окремих пристроїв і всієї машини в цілому. Швидкодія ЕОМ другого\n          покоління досягла 100 тисяч операцій за секунду, ємність внутрішньої\n          пам’яті зросла до 300 Кбайт.Складнішою стала архітектура ЕОМ,\n          з’явилися дисплеї та накопичувачі на магнітних дисках. У написанні\n          програм стався перехід від мов машинних кодів до мов програмування\n          низького рівня, які були універсальнішими. Це робило програмування\n          простішим і доступнішим. З’явилися перші операційні системи, які дали\n          змогу автоматизувати процеси обміну даними між пристроями ЕОМ,\n          спростили обмін даними між самою ЕОМ і користувачем. Стрімко\n          розширилося коло задач (математичних, статистичних, логічних та\n          інших).\n        </p>\n        <p>\n          Трете період 1960-х характеризується появою промислової технології\n          створення інтегральних схем (ІС) та їх широким застосуванням в\n          електронній техніці. Інтегральні схеми були покладені в основу ЕОМ\n          третього покоління, які почали з’являтися в середині 1960-х років.\n          Швидкодія цих машин підвищилася до 10 мільйонів операцій за секунду, а\n          ємність внутрішньої пам’яті розширилася до декількох мегабайтів. Поява\n          мов програмування високого рівня. Опрацювання графічних і звукових\n          даних.\n        </p>\n        <p>\n          Четверте кінець 1970-х – на початку 1980-х років - Елементною базою\n          машин цього покоління стали великі інтегральні схеми (ВІС) і надвеликі\n          інтегральні схеми (НВІС), тобто мікросхеми з високою щільністю малих\n          елементів. Різко зменшилися розміри ЕОМ, швидкодія зросла до сотень\n          мільйонів операцій за секунду, а ємність внутрішньої пам’яті – до\n          десятків і сотень мегабайтів. Удосконалюються також зовнішні пристрої,\n          значно розширюється їх коло. З’являються перші персональні комп’ютери.\n        </p>\n        <p>\n          90-ті(з 2000-х) рр ЕОМ п'ятого покоління, надвеликі інтегральні схеми,\n          які містять до сотні тисяч елементів на квадратний сантиметр. 5\n          покоління - це не тільки нова елементна база, а це прогрес та\n          досягнення нових якісних зрушень у всіх галузях.\n        </p>\n      </div>\n      <div id=\"2\">\n        <h3>\n          Електронні таблиці та їх призначення. Середовище табличного процесора\n          та основні його елементи. Подання даних в електронних таблицях.\n          Введення тексту, чисел і формул. Приклади.\n        </h3>\n        <p>\n          Одним з найважливіших засобів опрацювання і зберігання інформації є\n          таблиці. Вони можуть утворювати деякий документ або бути частиною\n          іншого документа. Програми, які забезпечують автоматизацію процесу\n          створення, опрацювання, корегування, зберігання і виведення на друк\n          документів у формі таблиць або їх частин, називають електронними\n          таблицями(табличними редакторами). Електронні таблиці призначені для\n          формування табличних документів з використанням чисел, текстів і\n          формул, які використовують для автоматизації обчислювального процесу,\n          а також для подання табличних даних в графічній формі. Електронні\n          таблиці є засобом організації інформації, надання їй певної структури.\n          Це значно спрощує аналіз інформації та її опрацювання.\n        </p>\n        <p>\n          Електронні таблиці виконують такі функції(табличні редактори, табличні\n          процессори):\n        </p>\n        <p>\n          створення таблиці одноразового та багаторазового використання;\n          формування таблиць із текстових та чисельних даних; редагування та\n          форматування таблиць даних; задавання формул для автоматичного\n          виконання обчислень; графічне подання табличних даних; фільтрування та\n          впорядкування даних; створення форм і звітів; проведення дослідження;\n          статистичний аналіз; створення та опрацювання баз даних (введення,\n          пошук, сортування, фільтрація (відбір) і аналіз даних); розв’язання\n          математичних задач (виконання різноманітних табличних обчислень за\n          допомогою вбудованих функцій); збереження табличних даних на зовнішніх\n          носіях. наочне подання даних у вигляді графіків і діаграм; здійснення\n          обміну даними з іншими програмами (вставлення тексту, рисунків,\n          таблиць, підготовлених в інших додатках);\n        </p>\n        <p>\n          Сучасні електронні таблиці володіють власними засобами програмування,\n          дозволяють здійснювати публікацію в Web, володіють засобами захисту\n          даних.\n        </p>\n        <p>\n          Популярними електронними таблицями є Microsoft Excel, Open Office,\n          Numbers.\n        </p>\n        <p>\n          Допускаються такі основні форми подання чисел: цілі, дійсні, в\n          експоненціальній формі, раціональні дроби. Для цілих чисел допустимо\n          використання цифр 0 ... 9, а також знаки «+» і «-». Дійсні числа\n          включають кому, яка розділяє цілу і дробову частини. Числа в\n          експоненціальній формі складаються з мантиси і порядку, розділених\n          латинською літерою є. Для введення раціональних дробів слід ввести\n          нуль (щоб відрізнити дріб від дати), потім символ пробіл, далі\n          чисельник, символ «/» і знаменник. Можна помістити в одну клітинку\n          дату і час.\n        </p>\n      </div>\n      <div id=\"3\">\n        <h3>\n          Інформація і повідомлення. Види інформації та її властивості.\n          Інформація та шум, їх взаємоперетворення.\n        </h3>\n        <p>\n          Термін «інформація» (з лат.іпformatio, яке означає роз'яснення,\n          виклад). Поняття інформація є неозначуваним. Під інформацією розуміють\n          відомості про об'єкти навколишнього світу, які сприймаються людиною,\n          твариною, рослинним світом або спеціальними пристроями і підвищують їх\n          рівень поінформованості.\n        </p>\n        <p>\n          Інформація передається за допомогою повідомлень. Повідомлення бувають\n          усними, письмовими, у вигляді малюнків, жестами, спеціальними знаками\n          чи організованими якимось іншим чином. Прикладами повідомлень є:\n          покази вимірювального пристрою, дорожні знаки, текст телеграми, усна\n          розповідь, відповідь учня тощо.\n        </p>\n        <p>\n          За допомогою повідомлень відбувається обмін інформацією між людьми,\n          між людьми і машинами, між машинами; обмін сигналами у рослинному і\n          тваринному світі, від клітини до клітини, від організму до організму\n          тощо.\n        </p>\n        <p>Види інформації:</p>\n        <p>\n          За суспільним значенням: наукова; виробнича; управлінська; технічна;\n          масового подання: повсякденна; суспільно-політична;\n        </p>\n        <p>\n          За способами сприйняття: візуальна; аудіальна; тактильна; нюхова;\n          смакова.\n        </p>\n        <p>\n          За формами подання: текстова; числова; графічна; комбінована естетична\n          Інформація, яку несуть повідомлення повинна характеризуватися такими\n          властивостями, як корисність, актуальність, вірогідність,\n          об'єктивність, повнота, зрозумілість.\n        </p>\n        <p>\n          Корисність. Корисність інформації оцінюється за тими задачами, які\n          можна розв'язати з її використанням. Відомості, корисні для однієї\n          людини, виявляються марними для іншої, якщо вона не може їх\n          використовувати.\n        </p>\n        <p>\n          Актуальність. Інформація актуальна(своєчасна), якщо вона важлива в\n          даний момент часу. Якщо ви маєте їхати потягом, то для вас важливою є\n          інформація про те, коли цей потяг вирушає. Однак ця інформація втрачає\n          свою актуальність після того, як потяг рушив.\n        </p>\n        <p>\n          Вірогідність. Інформація вважається вірогідною, якщо вона не\n          суперечить реальній дійсності, правильно її пояснює і підтверджується\n          нею. Якщо ви довідалися про повінь з інформаційної телепрограми, то ця\n          інформація, цілком ймовірно, є достовірною. Водночас чутки про\n          пришестя інопланетян, що очікується наступного тижня, недостовірні.\n        </p>\n        <p>\n          Об'єктивність. Інформація може бути об'єктивною або суб'єктивною\n          (залежати чи не залежати від чийогось судження). Наприклад,\n          повідомлення «вода в морі холодна» є суб'єктивним, водночас\n          повідомлення «температура води +17С0» дає об'єктивну інформацію.\n        </p>\n        <p>\n          Повнота. Інформація повна, якщо її достатньо для правильних висновків\n          і прийняття правильних рішень. Якщо людині на основі якої-небудь\n          інформації доводиться щось вирішувати, то вона спочатку оцінює, чи\n          досить цієї інформації для-ухвалення правильного рішення. Інакше\n          кажучи, повною чи неповною є наявна інформація.\n        </p>\n        <p>\n          Зрозумілість. Інформація зрозуміла, якщо при її сприйманні немає\n          потреби у додаткових повідомленнях (не виникає запитань). Якщо людині\n          розповідають щось, до сприймання чого вона ще не підготовлена,\n          наприклад звертаються англійською раніше, ніж людина вивчила цю мову,\n          то вона з почутої інформації винесе зовсім іншу інформацію, ніж це\n          було б тоді, коли людина вивчила англійську мову.\n        </p>\n      </div>\n      <div id=\"4\">\n        <h3>Програмне забезпечення. Визначення. Види.</h3>\n        <p>\n          Програмне забезпечення (ПЗ) являє собою сукупність програм,\n          призначених для розв’язання завдань на комп’ютері. Програма – це\n          впорядкований набір команд. Програмне та апаратне забезпечення\n          працюють взаємопов’язано і в неперервній взаємодії. Будь-який\n          апаратний пристрій управляється програмно.\n        </p>\n        <p>\n          Програмне забезпечення можна поділити на три класи: системне прикладне\n          інструментальне\n        </p>\n        <p>\n          Наведена класифікація є досить умовною. Інтеграція програмного\n          забезпечення призвела до того, що практично будь-яка програма має риси\n          кожного класу. Системне ПЗ призначено для управління роботою\n          комп'ютера, розподілу його ресурсів, підтримки діалогу з\n          користувачами, надання їм допомоги в обслуговуванні комп'ютера, а\n          також для часткової автоматизації розробки нових програм.\n        </p>\n        <p>\n          Системне ПЗ – це комплекс програм, багато з яких постачаються разом з\n          комп'ютером та документацією до неї. Системне ПЗ можна розділити на\n          три основні частини:\n        </p>\n        <p>\n          операційні системи (ОС) системи програмування сервісні програми\n          Основними компонентами загальносистемного програмного забезпечення є\n          операційні системи, які вирішують задачі взаємозв’язаного\n          функціонування окремих компонентів.\n        </p>\n        <p>Існують 4 типи операційних систем:</p>\n        <p>\n          операційні системи пакетної обробки: порівняно велика швидкість\n          логічних і автоматичних операцій, але в свою чергу мала швидкість\n          вводу і виводу, завантаженість процесора на 20 – 30%.\n        </p>\n        <p>\n          операційна система з розподілом задач в часі (організовується черга\n          вводу і виходу задач, і обслуговується до 15 користувачів, процесор\n          завантажений на 80 – 90%).\n        </p>\n        <p>\n          операційна система реального часу, використовується для керування\n          різними процесами. Системне програмне забезпечення здійснює управління\n          роботою обчислювальної системи. Як правило, системні програми\n          забезпечують взаємодію інших програм з апаратними складовими,\n          організацію інтерфейсу користувача. Сюди відносять операційні системи,\n          сервісні системи.\n        </p>\n        <p>\n          Прикладне програмне забезпечення призначене для розв’язання прикладних\n          завдань фахової діяльності людини (тобто, прикладене до практики).\n          Спектр таких програм надзвичайно широкий: від виробничих та наукових\n          до навчальних та розважальних. Сюди відносять розрахункові, навчаючі,\n          моделюючі програми, комп’ютерні ігри, тощо.\n        </p>\n        <p>\n          Інструментальне програмне забезпечення призначене для розробки всіх\n          видів інформаційно-програмного забезпечення. При цьому під\n          інформаційним забезпеченням розуміють сукупність попередньо\n          підготовлених даних, необхідних для роботи програмного забезпечення.\n          Наприклад, будь-яка сучасна програма має вбудовану довідку для роботи\n          з цією програмою. Файл довідки являє собою інформаційне забезпечення.\n          До інструментального програмного забезпечення відносять: редактори\n          (текстові, графічні, музичні), системи табличної обробки даних\n          (табличні процесори), системи управління базами даних, транслятори мов\n          програмування, інтегровані системи діловиробництва, тощо. Системи\n          програмування призначені для полегшення та для часткової автоматизації\n          процесу розробки та відлагодження програм. Основними компо¬нентами цих\n          систем є транслятори з мов високого рівня, наприклад, Паскаль, Сі,\n          Бейсик та ін. Особлива роль належить Ассамблеру. Програму мовою\n          Ассамблер називають машинно-орієнтованою. Мовою Ассамблер\n          користую¬ться, як правило, системні програмісти. Транслятори\n          здійснюють перетворення програм з мов високого рівня на машинну мову.\n          Крім того, транслятори здійснюють синтаксичний аналіз програми, яка\n          транслюється. Вони можуть також відлагоджувати та оптимізувати\n          програми, які одержують, видавати документацію на програму та\n          виконувати ряд інших сервісних функцій. Ассемблер перетворює програми,\n          які представлені у машиноорієнтованих мовах, на машинну мову.\n          Прикладне ПЗ загального призначення – це комплекс програм, який широко\n          використовується серед різних категорій користувачів. Найбільш\n          відомими серед них є: текстові редактори, графічні системи, електронні\n          таблиці, системи управління базами даних та ін. Прикладні програми\n          спеціального призначення використовують у специфічній діяльності\n          користувачів. Функції специфічних систем залежать від їх призначення.\n          Наприклад, для систем навчального призначення це можуть бути\n          інструментальні засоби для розробки комп'ютерних уроків (гіпермедійні\n          та гіпертекстові системи, авторсь¬кі та інші системи), імітаційне\n          моделюючі програми навчального призначення, програми для розробки та\n          підтримки шкільного розкладу, педагогічні програмні засоби різного\n          призначення та ін.\n        </p>\n      </div>\n      <div id=\"5\">\n        <h3>\n          Системи опрацювання графічних зображень. Створення і редагування\n          графічних зображень за допомогою графічного редактора. Зміна\n          параметрів графічних об'єктів у середовищі графічного редактора.\n          Графічні формати Інтернету. Приклади.\n        </h3>\n        <p>\n          Комп'ютерна графіка використовується при конструюванні, в архітектурі,\n          створенні рекламних роликів, у видавничій діяльності. Основні функції\n          графічного редактора:\n        </p>\n        <p>\n          Зображення поділяються на растрові й векторні. Растрове зображення\n          являє собою набір пікселів, тобто кольорових точок, розташованих на\n          правильній сітці — растрі. Векторне представлення полягає в описі\n          елементів зображення за допомогою математичних формул. Для цього\n          зображення розкладається на прості об'єкти — примітиви (лінії, еліпси,\n          кола, багатокутники, зірочки тощо).\n        </p>\n        <p>\n          Прикладна програма, призначена для створення й опрацювання графічних\n          зображень на комп'ютері, називається графічним редактором.\n        </p>\n        <ul>\n          <li>Забезпечення створення зображень;</li>\n          <li>Редагування зображень;</li>\n          <li>Збереження у зовнішній пам'яті;</li>\n          <li>Отримання записів на папері, кіноплівці.</li>\n        </ul>\n        <p>\n          Графічні програми зазвичай використовуються разом зі сканерами,\n          кольоровими принтерами, цифровими фотоапаратами та іншою апаратурою\n          одержання й опрацювання зображень. Для роботи з растровими (точковими)\n          зображеннями призначені растрові редактори (Adobe Photoshop, Согel\n          Photo Раіnt, Раіnt та ін.). Для створення векторних зображень існують\n          векторні редактори (СогеlDRAW, Аdobe Illustrator, Хага та ін.). Відомо\n          багато форматів для запису графічних зображень у файл. Існують\n          растрові формати, які використовуються для збереження растрових\n          зображень (розширення файлів ВМР, РСХ, ТІFF, GIF, JPG та ін.);\n          векторні формати (розширення СGМ, СDR, WMF, ЕМF); метафайлові формати,\n          які підтримують обидва види графіки (WPG, СGМ).\n        </p>\n        <p>\n          Графічні редактори, як правило, мають змогу працювати з графічними\n          файлами кількох форматів, конвертувати файли з одного формату в інший.\n          Середовище графічного редактора (ГР)\n        </p>\n        <p>\n          Інтерфейс більшості графічних редакторів організується таким чином. З\n          лівого боку екрана розташовується набір піктограм (умовних малюнків)\n          із зображенням інструментів, якими можна користуватися в процесі\n          редагування зображень. У нижній частині екрана палітра, з якої\n          користувач вибирає фарби необхідного кольору. Частина екрана, що\n          лишилася, являє собою порожнє «полотно» (робоче поле). Над робочим\n          полем знаходиться меню, що дає змогу змінювати режими роботи. На\n          лівому краю палітри виводиться квадрат, забарвлений в фоновий колір. У\n          ньому вміщуються ще два квадрати, з яких верхній забарвлено в перший\n          робочий колір, а нижній — у другий робочий колір. Як приклад\n          розглянемо призначення графічних примітивів та правила роботи у\n          графічному редакторі Раіnt для Windows. Рисунки на Web-сторінках\n          бувають різні: маленькі кнопки, великі рекламні\n          кнопки-«вивіски»(банери), елементи фону тощо. На відміну від тексту\n          малюнки — досить об'ємні, «важкі» елементи, які впливають на швидкість\n          завантаження сторінок. Мережа визнає малюнки тільки трьох форматів:\n          GIF, PNG, JPG. Перші два формати ідеальні для створення невеликих\n          оформлювальних елементів — кнопок, заголовків, «шапок», третій — для\n          більших зображень (наприклад, фото). Формат GIF дає змогу «втиснути» в\n          одну картинку одразу кілька.\n        </p>\n      </div>\n      <div id=\"6\">\n        <h3>\n          Структурна схема обчислювальної машини першого покоління. Призначення\n          вузлів.\n        </h3>\n        <p>\n          Розвиток ЕОМ поділяється на кілька періодів. Покоління ЕОМ кожного\n          періоду відрізняються один від одного елементною базою і математичним\n          забезпеченням. Перше покоління (1945-1954) - ЕОМ на електронних лампах\n          (на кшталт тих, що були в старих телевізорах). Це доісторичні часи,\n          епоха становлення обчислювальної техніки. Більшість машин першого\n          покоління були експериментальними пристроями і будувалися з метою\n          перевірки тих чи інших теоретичних положень. Вага та розміри цих\n          комп'ютерів, які нерідко вимагали для себе окремих будівель, давно\n          стали легендою. Введення чисел вперше машини проводився за допомогою\n          перфокарт, а програмне управління послідовністю виконання операцій\n          здійснювалося, наприклад в ENIAC, як у лічильно-аналітичних машинах,\n          за допомогою штекерів і набірних полів. Хоча такий спосіб\n          програмування і вимагав багато часу для підготовки машини, тобто для\n          з'єднання на набірному полі (комутаційної дошці) окремих блоків\n          машини, він дозволяв реалізовувати лічильні \"здібності\" ENIAC'а і тим\n          вигідно відрізнявся від способу програмної перфострічки, характерного\n          для релейних машин . Солдати, приписані до цієї величезної машині,\n          постійно носилися вогруг неї, скриплячи візками, доверху набитими\n          електронними лампами. Варто було перегоріти хоча б одній лампі, як\n          ENIAC тут же вставав, і починалося сум'яття: всі спішно шукали згорілу\n          лампу. Однією з причин - можливо, і не дуже достовірною - настільки\n          частої заміни ламп вважалася така: їх тепло і світіння залучали\n          метеликів, які залітали всередину машини і викликали коротке\n          замикання. Коли всі лампи працювали, інженерний персонал міг\n          налаштувати ENIAC на яку-небудь завдання, вручну змінивши підключення\n          6000 проводів. Всі ці дроти доводилося знову перемикати, коли вставала\n          інше завдання.\n        </p>\n        <p>\n          Першою серійно випускалася ЕОМ 1-го покоління став комп'ютер UNIVAC\n          (Універсальний автоматичний комп'ютер). Розробники: Джон Мочлі і Дж.\n          Преспер Еккерт. Він був першим електронним цифровим комп'ютером\n          загального призначення. UNIVAC, робота зі створення, якого почалася в\n          1946 році і завершилася в 1951-му, мав час складання 120 мкс, множення\n          -1800 мкс і ділення - 3600 мкс. UNIVAC міг зберігати 1000 слів, 12000\n          цифр з часом доступу до 400 мкс максимально. Магнітна стрічка несла\n          120000 слів і 1440000 цифр. Введення / висновок здійснювався з\n          магнітної стрічки, перфокарт і перфоратора.\n        </p>\n        <p>\n          Програмне забезпечення комп'ютерів 1-го покоління складалося в\n          основному із стандартних підпрограм.\n        </p>\n        <p>\n          Машини цього покоління: \"ENIAC\", \"МЕСМ\", \"БЕСМ\", \"IBM -701\", \"Стріла\",\n          \"М-2\", \"М-3\", \"Урал\", \"Урал-2\", \"Мінськ -1 \",\" Мінськ-12 \",\" М-20 \"та\n          ін Ці машини займали велику площу, використали багато електроенергії і\n          складалися з дуже великого числа електронних ламп. Наприклад, машина\n          \"Стріла\" складалася з 6400 електронних ламп і 60 тис. штук\n          напівпровідникових діодів. Їх швидкодія не перевищувало 2-3 тис.\n          операцій у секунду, оперативна пам'ять не перевищувала 2 Кб. Тільки у\n          машини \"М-2\" (1958) оперативна пам'ять була 4 Кб, а швидкодія 20 кВт.\n        </p>\n      </div>\n      <div id=\"7\">\n        <h3>\n          Поняття про сучасні засоби зберігання й опрацювання повідомлень. Носії\n          повідомлень. Форми і способи подання повідомлень. Кодування\n          повідомлень, за допомогою яких передається інформація.\n        </h3>\n        <p>\n          Люди в своїй діяльності постійно зустрічаються з необхідністю\n          опрацьовувати повідомлення. Читаючи книгу, розглядаючи предмети,\n          людина обробляє, запам'ятовує, накопичує інформацію. Для того щоб\n          інформація стала надбанням багатьох людей, необхідно мати змогу\n          зберігати її. Однак мало навчитися зберігати інформацію, ще необхідно\n          її опрацьовувати, одержувати нову інформацію та передавати її. На всіх\n          етапах роботи з інформацією людина використовує різні пристрої:\n          наприклад, датчики, компас, ваги, термометр, барометр тощо. Зібравши\n          інформацію за допомогою різних датчиків, людина приступає до її\n          опрацювання і перетворення.\n        </p>\n        <p>\n          Одним із найефективніших сучасних засобів опрацювання інформації є\n          комп'ютер. За допомогою комп'ютера вхідна інформація опрацьовується за\n          певними алгоритмами, які складаються користувачем. Застосування\n          комп'ютера як інструмента для роботи з інформацією багатогранні та\n          різноманітні. Він дає змогу не лише працювати з відомими моделями\n          об'єктів, але й допомагає їх вдосконалювати, а також створювати нові\n          моделі об'єктів.\n        </p>\n        <p>\n          Середовище, в якому зафіксовано повідомлення, називають носієм\n          повідомлення.\n        </p>\n        <p>\n          У «до комп'ютерні» часи повідомлення зберігали на різноманітних\n          носіях: папері, картоні, фотокартках, кіноплівці, магнітній стрічці\n          тощо. З появою перших комп'ютерів знайшли широке використання такі\n          носії, як перфокарти та перфострічки. Нині ми користуємося різними\n          носіями повідомлень: папір, фото- і кіноплівка, магнітна аудіо- та\n          відео стрічка, магнітні і оптичні компакт-диски тощо. Носії інформації\n          для комп'ютера поділяються на електронні, магнітні та оптичні. Серед\n          магнітних дисків використовуються гнучкі і жорсткі.\n        </p>\n        <p>\n          Гнучкі магнітні диски, або ГМД (FDD), дають змогу переносити\n          інформацію з одного комп'ютера на ін­ший, а також зберігати\n          інформацію, що не використовується на комп'ютері постійно.\n          Випускаються дискети, як правило, з диском 3,5 дюйма та мають ємність\n          1,44 Мбайта.\n        </p>\n        <p>\n          Жорсткі магнітні диски, або вінчестери (HDD), є основним типом носіїв\n          для тривалого зберігання інформації. Накопичувач включає власне\n          магнітний диск, систему позиціонування і комплект магнітних головок;\n          усе це розміщено в герметично закритому корпусі. Максимальна ємність\n          жорстких дисків нині вже перевищила 200Гбайт.\n        </p>\n        <p>\n          Оптичні диски (компакт-диски) вирізняються великою ємністю і\n          надійністю. Інформація заноситься на диск за допомогою високоточного\n          лазера. Компакт-диски застосовуються для збереження на них великих\n          програм, енциклопедій, ігор, високоякісних аудіо- та відеозаписів.\n          Існують СD-R, DVD-R — оптичні диски, на які можна здійснювати\n          одноразовий запис, а також СD-RW, DVD-RW — оптичні диски, на які можна\n          здійснювати багаторазовий запис. СD містять до 700 Мбайт, DVD до 4,5\n          Гбайт інформації. Існують різні форми подання інформації — у\n          символьному, текстовому, графічному вигляді. Є інші форми, наприклад,\n          звукова, відео.\n        </p>\n        <p>\n          Символьна форма подання повідомлень є найбільш простою, в ній кожний\n          символ має якесь значення. Наприклад: червоне світло світлофора,\n          показники повороту на транспортних засобах, ранковий крик півня, різні\n          жести, скорочення і позначення у формулах тощо.\n        </p>\n        <p>\n          У символьній формі використовуються букви, цифри, знаки, сигнали\n          прапорцями, покажчики приладів тощо.\n        </p>\n        <p>\n          Текстова форма подання є більш складною. Ця форма передбачає, що зміст\n          повідомлення передається не окремими символами, а їх сполученням,\n          порядком розміщення. Послідовно розміщені символи утворюють слова, які\n          у свою чергу можуть утворювати речення.\n        </p>\n        <p>\n          Текстові повідомлення використовуються у книжках, брошурах, газетах,\n          журналах тощо.\n        </p>\n        <p>\n          Графічна форма подання повідомлень, як правило, має найбільший об'єм.\n          До цієї форми належать фотографії, картини, креслення, графіки тощо.\n          Графічна форма найбільш інформативна.\n        </p>\n        <p>\n          Повідомлення можна подавати одним із способів: літерами і знаками,\n          жестами, нотами музики, малюнками, картинами, скульптурами,\n          звукозаписом, кінофільмами тощо.\n        </p>\n        <p>\n          Існує змога переходити від одного способу подання інформації до\n          іншого.\n        </p>\n        <p>\n          Як правило, подання повідомлення добирається так, щоб його передавання\n          було якомога швидшим і надійнішим, а його опрацювання було якомога\n          зручнішим для адресата. Тому часто до текстів додають уточнюючі\n          рисунки, схеми, фотографії, і навпаки, до рисунків, схем, фотографій —\n          пояснюючі тексти.\n        </p>\n        <p>\n          Важливо також, щоб повідомлення по можливості було коротшим, тобто\n          його можна було якомога швидше прийняти і опрацювати, і разом з тим,\n          за його допомогою можна було передати якомога більше інформації. До\n          такого типу повідомлень відносять, як правило, графічні образи з\n          відповідними короткими текстовими поясненнями — географічні карти,\n          схеми, креслення, таблиці, діаграми, спеціальні коди тощо.\n        </p>\n        <p>Щоб передати інформацію, її необхідно певним чином закодувати.</p>\n        <p>\n          Кодування повідомлень — це перетворення повідомлень без зміни його\n          змісту на інший вигляд за допомогою певного коду.\n        </p>\n        <p>Код — це набір правил перетворення для кодування.</p>\n        <p>\n          Одне і те саме повідомлення можна кодувати по-різному. Однією із\n          систем кодування є азбука. Можна кодувати і звуки. Однією з таких\n          систем кодування є ноти. Зберігати можна не тільки текстову та звукову\n          інформацію. У вигляді кодів зберігаються і зображення. Якщо розглянути\n          малюнок через збільшувальне скло, то видно, що він складається із\n          точок. Координати кожної точки можна запам'ятати у вигляді чисел.\n          Колір кожної точки також можна запам'ятати у вигляді чисел. Такі числа\n          можуть зберігатися у пам'яті комп'ютера і передаватися на відстані.\n          Таким чином, коли на комп'ютері опрацьовується зображення, то\n          насправді комп'ютерні програми змінюють числа, якими окремі точки\n          зображення подані в пам'яті комп'ютера. Для подання та опрацювання\n          інформації в комп'ютері використовують двійкові коди, що вміщують лише\n          два символи — 0 і 1. Біт — найменша одиниця двійкового коду.\n        </p>\n        <p>\n          Байт — це послідовність з 8 бітів. Загальна кількість різних\n          комбінацій двійкових значень у байті дорівнює 28=256. для кодування\n          різних символів та для їх зберігання в запам'ятовуючих пристроях\n          комп'ютера найчастіше використовують американський стандартний код для\n          обміну інформацією — АSCII, який являє собою стандартну таблицю\n          кодування знаків.\n        </p>\n      </div>\n      <div id=\"8\">\n        <h3>\n          Багаторівнева пам’ять обчислювальної системи. Її види. Упорядкувати по\n          наступним умовам:\n        </h3>\n        <p>\n          • Збільшує ємність • Збільшує час доступу • Зменшує вартість\n          зберігання одного біту інформації\n        </p>\n      </div>\n      <div id=\"9\">\n        <h3>\n          Структура інформаційної системи: апаратна та інформаційна складові, їх\n          взаємодія.\n        </h3>\n        <p>\n          Інформаційна система — це взаємопов'язана сукупність при­строїв,\n          методів і персоналу для обробки інформації.\n        </p>\n        <p>\n          Інформаційна система забезпечує приймання інформації, її перетворення\n          (кодування), обробку, збереження і передачу ре­зультатів обробки\n          споживачу: людині, тварині, рослині, машині, іншій інформаційній\n          системі. Прикладом сучасної інформаційної системи може бути ре­дакція\n          газети або журналу, оснащена комп'ютерною технікою.\n        </p>\n        <p>В інформаційній системі відбуваються такі процеси:</p>\n        <ul>\n          <li>Введення інформації від джерел інформації;</li>\n          <li>Обробка (перетворення) інформації;</li>\n          <li>Зберігання вхідної і обробленої інформації;</li>\n          <li>Виведення інформації для підправлення користувачу;</li>\n          <li>\n            Можливе введення інформації від користувача через зво­ ротний\n            зв'язок.\n          </li>\n        </ul>\n        <p>\n          У сучасній інформаційній системі комп 'ютер відіграє роль\n          апаратно-програмної частини. Складові частини комп'ютерної системи\n        </p>\n        Апаратна частина\n        <p>\n          (Нагdwаге, «тверда частина» — «залізо») Складається із з'єднаних між\n          собою різноманітних при­строїв, які можна побачити.\n        </p>\n        <ul>\n          <li>Процесор</li>\n          <li>Запам'ятовуючі при­строї</li>\n          <li>Зовнішні пристрої введення-виведення</li>\n          <li>Контролери зовнішніх пристроїв</li>\n          <li>Засоби зв'язку</li>\n        </ul>\n        Програмне забезпечення(ПЗ)\n        <p>\n          (Software, «м'яка частина») Складається із набору різ­номанітних\n          програм, які керують роботою комп 'ютера, підтримують діалог з\n          кори­стувачем, обробляють різно­манітну інформацію, допома­гають\n          створювати різнома­нітні програми.\n        </p>\n        Системне ПЗ:\n        <ul>\n          <li>операційна система</li>\n          <li>системи програму­вання</li>\n          <li>програми технічного обслуговування</li>\n        </ul>\n        Прикладне ПЗ:\n        <ul>\n          <li>ПЗ загального приз­начення</li>\n          <li>ПЗ спеціальногопризначення</li>\n        </ul>\n        <p>\n          Апаратна частина не може виконувати операції з обробки ін­формації без\n          різноманітних програм, завдяки яким пристрої ви­конують свої функції.\n          Для забезпечення працездатності комп'ютера і виконання певної роботи\n          потрібна сукупність про­грам, яка створює його програмне забезпечення.\n        </p>\n        <p>\n          Програмне забезпечення здійснює керування пристроями комп'ютера під\n          час введення, обробки, виведення і зберігання інформації, створює\n          умови для роботи користувача на комп'ютері тощо.\n        </p>\n      </div>\n      <div id=\"10\">\n        <h3>Дисплей. Основні характеристики. Види.</h3>\n        <p>\n          Дисплей призначено для відображення інформації на екрані\n          електронно-променевої трубки. Дисплей керується відеоконтролером, який\n          знаходиться в системному блоці. Відеоконтролер має власну пам'ять, яку\n          ще називають відеопам'яттю. Відеоконтролер задає текстовий або\n          графічний режим роботи.\n        </p>\n        <p>\n          Дисплеї бувають монохромними та кольоровими. Вони можуть працювати в\n          одному з двух режимiв: текстовому або графiчному.\n        </p>\n        <p>Текстовий режим.</p>\n        <p>\n          В текстовому режимi екран дисплея умовно подiяють на окремi дiлянки -\n          знакомiсця, частiше всього на 25 рядкiв по 80 символiв (знакомiсць). В\n          кожне знакомiсце може бути виведений один iз 256 заздалегiть заданих\n          символiв. В число цих символiв входять великi та маленькi латинськi\n          букви, цифри та сиволи:\n        </p>\n        <p>~ ! @ # $ % ^ &amp; * ( ) _ + | {} [ ] : ; \" &lt; &gt; , . ? /</p>\n        <p>\n          а також псевдографiчнi символи, якi використовують для виведення на\n          екран таблиць та дiаграм, побудови рамок навколо дiлянок екрана та\n          iнші. В число символiв, якi зображуються на екранi в текстовому\n          режимi, можуть входити i символи кирилицi (букви української абетки).\n        </p>\n        <p>\n          На кольорових дисплеях кожному знакомiсцю може вiдповiдати свiй колiр\n          символа i свiй колiр фону, що дозволяє виводити гарнi кольоровi написи\n          на екран.\n        </p>\n        <p>Графiчний режим.</p>\n        <p>\n          Графiчний режим дисплея призначений для виведення на екран будь-якого\n          зображення, елементами цього зображення є точки (пікселі).\n        </p>\n        <p>Основні характеристики дисплея такі:</p>\n        <ul>\n          <li>роздільна здатність;</li>\n          <li>кількість кольорів (палітра);</li>\n          <li>розмір екрана.</li>\n        </ul>\n        <p>\n          Кiлькiсть крапок по горизонталi та вертикалi називається роздільною\n          здатнiстю дисплея в даному режимi. Наприклад, вираз \"роздільна\n          здатнiсть 640х200\" означає, що дисплей в даному режимi виводить 640\n          крапок по горизонталi i 200 крапок по вертикалi.\n        </p>\n        <p>\n          Слiд зауважити, що дозволена здатнiсть не залежить вiд розмiру екрана\n          дисплея, подiбно тому як i великий, так i маленький телевiзори мають\n          на екранi 625 рядкiв розгортки зображення.\n        </p>\n      </div>\n      <div id=\"11\">\n        <h3>\n          Упорядкування даних в середовищі табличного процесора. Використання\n          фільтрів. Приклади.\n        </h3>\n        <p>\n          Операції упорядкування і фільтрації даних в електронних таблицях (ЕТ)\n          аналогічні упорядкуванню і фільтрації в базах даних. Щоб ці операції\n          були можливі в ЕТ, таблиця повинна мати вигляд списку. Список\n          складається із записів (рядків), що мають ті самі поля (стовпці).\n          Прикладом списку може бути телефонний довідник, у якому кожен окремий\n          запис-рядок відповідає конкретному абоненту, а полями-стовпцями є\n          Прізвище, ім'я по батькові, Адреса, Телефон.\n        </p>\n        <p>\n          Упорядкування даних в електронних таблицях виконується сортуванням.\n        </p>\n        <p>\n          Сортування — це зміна відносного положення даних у списку відповідно\n          до значення чи типу даних. Дані звичайно сортуються за алфавітом,\n          чисельним значенням або датою. Опишемо порядок сортування, прийнятий у\n          Ехсеl за замовчуванням. Якщо вмістом комірок є числа, то вони\n          сортуються в порядку зростання: від найменшого від'ємного до\n          найбільшого додатного числа. Якщо в комірки записано текст, то при\n          сортуванні порівнюється вміст комірок за символами зліва направо.\n          Наприклад, слово \"якір\" буде поміщено після слова \"кір\", а слово\n          \"Судан\" - після слова \"судак\" (на регістр при сортуванні не зважають).\n        </p>\n        <p>\n          Для сортування таблиці клацніть по будь-якій її непорожній комірці і\n          натисніть на одну з кнопок на панелі інструментів : Сортировка по\n          возрастанию або Сортировка по убыванию. При натисканні на зазначені\n          кнопки сортування здійснюється по крайньому лівому полю (наприклад, по\n          стовпцю А).При цьому виконуватиметься сортування суцільної частини\n          таблиці, що не має порожніх рядків чи стовпців. Рядки\n          переставлятимуться повністю. Заголовки (підписи) стовпців у процес\n          сортування за замовчуванням не потрапляють.\n        </p>\n        <p>\n          Якщо треба виконати сортування по довільному стовпцю чи по кількох\n          стовпцях, то потрібно клацнути мишею по довільній комірці таблиці і\n          вибрати команду меню Данные — Сортировка. У діалозі, що відкрився,\n          визначаємо черговість полів, по яких виконуватиметься сортування.\n        </p>\n        <p>Однією з найпоширеніших операцій над списками є фільтрація.</p>\n        <p>\n          Фільтрація являє собою виділення певних записів, що задовольняють\n          задані критерії Результатом фільтрації є створоння списку з\n          відфільтрованих записів. У Ехсеl передбачено два режими фільтрації:\n        </p>\n        <ul>\n          <li>Автофильтр</li>\n          <li>Расширенный фильтр.</li>\n        </ul>\n        <p>\n          Розглянемо режим автофільтру. Клацніть по довільній комірці списку,\n          який підлягає фільтрації, і виконайте команду меню Дані — Фільтр —\n          Автофільтр. Праворуч від назви кожного стовпця з'явиться кнопка зі\n          списком, що розкривається. Список кнопки відкривають позиції Всі,\n          Перші 10..., Умова..., потім йдуть елементи стовпця, розміщені за\n          абеткою. Прокрутивши список, ви можете дібрати необхідний критерій.\n          Зазначимо, що позиція Умова дає змогу задати точні критерії для\n          фільтрації. Відразу після вибору критерію на екрані залишаться лише\n          записи, що пройшли фільтрацію, а інші записи будуть приховані. Для\n          скасування процедури фільтрації треба ввійти в меню. Дані — Фільтр і\n          забрати галочку з команди Автофільтр.\n        </p>\n        <p>\n          Розширений фільтр дає змогу оформити критерій для фільтрації у вигляді\n          таблиці і вивести відфільтровані записи в будь-який діапазон робочого\n          аркуша. Порядок створення фільтра такий. Спочатку треба створити\n          таблицю-критерій. Для цього під початковою таблицею вводяться точні\n          назви стовпців, за якими мають виконати фільтрацію. Наступним рядком\n          під назвами введіть із клавіатури критерії добору. Як критерії можуть\n          виступати текстові записи, що збігаються зі значеннями комірок (для\n          стовпців з текстом), числа або умови, що містять оператори порівняння\n          (для стовпців з числами). Активізуйте будь-яку комірку початкової\n          таблиці і виконайте команду Дані — Фільтр — Розширений фільтр. У\n          результаті з'явиться діалог Розширений фільтр, у якому треба задати\n          параметри розширеного фільтра. Результат фільтрації за замовчуванням\n          буде розміщений на місці початкової таблиці. Якщо ви хочете, щоб\n          результат був поміщений в іншому місці аркуша чи Робочої книги, то\n          клацніть по перемикачу Скопіювати результат в інше місце. Потім у\n          нижнє текстове поле введіть діапазон вставки відфільтрованої таблиці.\n          Для цього дійте аналогічно тому, як вводився діапазон таблиці-критерію\n          (див. вище).\n        </p>\n        <p>\n          Скасувати дію розширеного фільтра можна командою Дані — Фільтр -\n          Показати все. При цьому повертається стан таблиці до фільтрації, але\n          таблиця-критерій також буде присутня.\n        </p>\n      </div>\n      <div id=\"12\">\n        <h3>\n          Носії інформації для обчислювальних систем. Види. Особливості. Основні\n          характеристики.\n        </h3>\n        <p>\n          Носії інформації - Матеріал, який призначений для запису, зберігання\n          та подальшого відтворення інформації.\n        </p>\n        <p>\n          Носій інформації - Строго певна частина конкретної інформаційної\n          системи, що служить для проміжного зберігання або передачі інформації.\n        </p>\n        <p>Носій інформації - Це фізичне середовище, в якій вона фіксується.</p>\n        <p>\n          У ролі носія можуть виступати папір, фотоплівка, клітини мозку,\n          перфокарти, перфострічки, магнітні стрічки і диски або комірки пам'яті\n          комп'ютера. Сучасна техніка пропонує все нові і нові різновиди носіїв\n          інформації. Для кодування інформації в них використовуються\n          електричні, магнітні та оптичні властивості матеріалів. Розробляються\n          носії, в яких інформація фіксується навіть на рівні окремих молекул.\n        </p>\n        <p>\n          У сучасному суспільстві можна виділити три основні види носіїв\n          інформації:\n        </p>\n        <ul>\n          <li>\n            <p>\n              Перфораційні - мають паперову основу, інформація заноситься у\n              вигляді пробивок у відповідному рядку і стовпці. Обсяг інформації\n              - 800 біт або 100 КБ;\n            </p>\n          </li>\n          <li>\n            <p>\n              Магнітні - для них використовуються гнучкі магнітні диски і\n              касетні магнітні стрічки;\n            </p>\n          </li>\n          <li>\n            <p>Оптичний.</p>\n          </li>\n        </ul>\n        <p>До носіїв інформації відносять:</p>\n        <ul>\n          <li>\n            <p>магнітні диски;</p>\n          </li>\n          <li>\n            <p>\n              магнітні барабани - Ранній різновид комп'ютерної пам'яті, що\n              широко використовувалася в 1950-1960. Винайдено Густавом Таушеком\n              в 1932 в Австрії. Надалі магнітний барабан був витіснений пам'яттю\n              на магнітних сердечниках.\n            </p>\n          </li>\n          <li>\n            <p>\n              дискети - Портативний магнітний носій інформації, використовуваний\n              для багатократного запису і зберігання даних порівняно невеликого\n              обсягу. Запис і зчитування здійснюється за допомогою спеціального\n              пристрою - дисковода;\n            </p>\n          </li>\n          <li>\n            <p>\n              магнітні стрічки - Носій магнітного запису, що представляє собою\n              тонку гнучку стрічку, що складається з основи і магнітного\n              робочого шару;\n            </p>\n          </li>\n          <li>\n            <p>\n              оптичні диски - Носій інформації в вигляді диска з отвором в\n              центрі, інформація з якого зчитується за допомогою лазера.\n              Спочатку компакт-диск був створений для цифрового зберігання\n              аудіо, проте в даний час широко використовується як пристрій\n              зберігання даних широкого призначення;\n            </p>\n          </li>\n          <li>\n            <p>\n              flash пам'ять - Різновид твердотільної напівпровідникової\n              незалежної перезаписуваної пам'яті. Флеш-пам'ять може бути\n              прочитана скільки завгодно раз, але писати в таку пам'ять можна\n              лише обмежене число раз (зазвичай близько 10 тисяч разів).\n              Стирання відбувається ділянками, тому не можна змінити один біт\n              або байт без перезапису всієї ділянки.\n            </p>\n          </li>\n        </ul>\n        <p>Всі носії можна розділити на:</p>\n        <ul>\n          <li>\n            <p>Людиночитаємі (документи).</p>\n          </li>\n          <li>\n            <p>\n              Машиночитні (машинні) - для проміжного зберігання інформації\n              (диски).\n            </p>\n          </li>\n          <li>\n            <p>\n              Людиномашиночитні- комбіновані носії вузькоспеціального\n              призначення (бланки з магнітними смужками).\n            </p>\n          </li>\n        </ul>\n        <p>\n          Однак швидкий розвиток засобів обчислювальної техніки стерло грань між\n          1ої і 3ей групою - з'явився сканер, який дозволяє вводити інформацію з\n          документів в пам'ять ЕОМ.\n        </p>\n        <p>\n          Всі наявні в даний час носії інформації можуть поділятися за різними\n          ознаками. В першу чергу, слід розрізняти :\n        </p>\n        <ul>\n          <li>енергозалежні</li>\n          <li>енергонезалежні накопичувачі інформації.</li>\n        </ul>\n        <p>\n          Енергонезалежні накопичувачі, які використовуються для архівування і\n          збереження масивів даних, поділяють:\n        </p>\n        <p>по виду запису:</p>\n        <ul>\n          <li>\n            <p>Магнітні накопичувачі (жорсткий диск, дискета, змінний диск);</p>\n          </li>\n          <li>\n            <p>Магнітно-оптичні системи, звані також МО;</p>\n          </li>\n          <li>\n            <p>\n              Оптичні, такі, як CD (Compact Disk, Read Only Memory) або DVD\n              (Digital Versatile Disk);\n            </p>\n          </li>\n        </ul>\n        <p>по способам побудови:</p>\n        <ul>\n          <li>\n            <p>\n              Обертається пластина або диск (як у жорсткого диска, дискети,\n              змінного диска, CD, DVD або Mо);\n            </p>\n          </li>\n          <li>\n            <p>Стрічкові носії різних форматів;</p>\n          </li>\n          <li>\n            <p>\n              Накопичувачі без рухомих частин (наприклад, Flash Card, RAM\n              (Random Access Memory), що мають обмежену сферу застосування через\n              відносно невеликі обсяги пам'яті в порівнянні з вищеназваними).\n            </p>\n          </li>\n        </ul>\n        <p>\n          Якщо потрібно швидкий доступ до інформації, як, наприклад, при\n          виведенні або передачі даних, то використовуються носії з обертовим\n          диском. Для архівування, виконуваного періодично (Backup), навпаки,\n          більш переважними є стрічкові носії. Вони мають великі обсяги пам'яті\n          в поєднанні з невисокою ціною, правда, при відносно невисокій\n          швидкодії.\n        </p>\n        <p>За призначенням носії інформації різняться на три групи:</p>\n        <ul>\n          <li>\n            <p>\n              поширення інформації: Носії з попередньо записаною інформацією,\n              такі як CD ROM або DVD-ROM;\n            </p>\n          </li>\n          <li>\n            <p>\n              архівування: Носії для одноразової запису інформації, такі як CD-R\n              або DVD-R (R (record able) - для запису);\n            </p>\n          </li>\n          <li>\n            <p>\n              резервування (Backup) або передача даних: Носії з можливістю\n              багаторазового запису інформації, такі як дискети, жорсткий диск,\n              MO, CD-RW (RW (rewritable) - перезапису і стрічки.\n            </p>\n          </li>\n        </ul>\n      </div>\n      <div id=\"13\">\n        <h3>\n          Основні складові апаратної частини інформаційної системи, їх\n          функціональне призначення..\n        </h3>\n        <p>\n          Аналіз апаратної складової інформаційної системи зручно робити,\n          використовуючи структурну схему комп'ютера. Під структурною\n          організацією комп'ютерів розуміють їх деяку фізичну модель, яка\n          відображає склад, порядок і принципи взаємодії основних функціональних\n          модулів без деталей їх технічної реалізації. Проаналізуємо будову\n          персонального комп'ютера (ПК) на логічному рівні. У структурі ПК\n          виділяють центральні та зовнішні пристрої. До центральних пристроїв\n          відносять мікропроцесор та основну пам'ять, яку ще називають\n          внутрішньою. Зовнішні пристрої часто називають периферійними.\n        </p>\n        <p>\n          Ядром обчислювального процесу в комп'ютері є його мікропроцесор.\n          Мікропроцесор (МП) — це мікросхема (надвелика інтегральна схема,\n          chip), яка керує роботою всіх апаратних компонентів комп'ютера,\n          забезпечує виконання програм, виконує арифметичні та логічні операції.\n        </p>\n        <p>\n          Оперативна пам'ять (ОП) призначена для зберігання даних та програм\n          протягом одного сеансу роботи з комп'ютером (від моменту включення\n          комп'ютера до моменту його виключення). В ОП інформацію можна заносити\n          та читати з неї. У ній зберігаються дані, з якими ведеться оперативна\n          робота, та програми для їх обробки.\n        </p>\n        <p>\n          У постійній пам'яті (ПП) містяться програми, які забезпечують\n          функціонування обчислювальної системи (зокрема, програми початкового\n          завантаження комп'ютера та тестування його складових) та деякі\n          програми з базового програмного забезпечення комп'ютера. Цю пам'ять\n          називають постійною тому, що інформація в ній зберігається після\n          виключення комп'ютера. Вона є енергонезалежною, але команди, які в ній\n          зберігаються, починають виконуватися при поступленні першого імпульсу\n          струму після вмикання комп'ютера. ПП «прошивається» інформацією на\n          етапі її виготовлення. З постійної пам'яті інформацію можна лише\n          читати, записати туди користувач нічого не може.\n        </p>\n        <p>\n          ОП і ПП утворюють основну пам'ять. Основна пам'ять комп'ютерів\n          складається з окремих комірок, в кожну з яких вміщається інформація\n          величиною в 1 байт. Усі комірки пам'яті нумеруються, починаючи з нуля;\n          номери комірок пам'яті називаються їх адресами.\n        </p>\n        <p>\n          Технічною реалізацією запам'ятовую'чих пристроїв для організації\n          основної пам'яті є мікросхеми пам'яті. Кеш-пам'ять — це невелика за\n          розміром буферна пам'ять, яка дозволяє пришвидшувати процеси обміну\n          даними між МП і ОП за рахунок значно меншого, ніж до ОП, часу доступу\n          до даних та розташування в ній даних, які найчастіше використовуються.\n        </p>\n        <p>\n          Системна магістраль — це сукупність шин для обміну даними, адресами та\n          керуючими сигналами між центральними та зовнішніми пристроями. Кожна\n          шина — це деяка кількість паралельних ліній (ця кількість визначає\n          розрядність шини), по яких у вигляді електричних сигналів передається\n          інформація від одного пристрою до іншого.\n        </p>\n        <p>\n          Інтерфейси блоки використовуються для узгодження роботи центральних та\n          зовнішніх пристроїв. Вони здійснюють перетворення сигналів, які\n          передаються через системну магістраль в сигнали, які забезпечують\n          роботу відповідного зовнішнього пристрою, здійснюють буферизацію\n          даних. Технічною реалізацією інтерфейсних блоків є контролери,\n          адаптери, відеоплати, синтезатори звуку тощо.\n        </p>\n        <p>До основних зовнішніх пристроїв належать:</p>\n        <ol>\n          <li>\n            <p>клавіатура — пристрій для введення символьної інформації;</p>\n          </li>\n          <li>\n            <p>\n              монітор — пристрій для відображення на екрані текстової та\n              графічної інформації. Монітори бувають монохромні та кольорові.\n              Основними характеристиками моніторів є:\n            </p>\n          </li>\n        </ol>\n        <ul>\n          <li>\n            параметри текстових режимів роботи (кількість символів в рядку та\n            кількість рядків);\n          </li>\n          <li>\n            параметри графічних режимів (роздільна здатність, глибина кольору —\n            кількість бітів, яка необхідна для запам'ятовування коду кольору\n            однієї точки);\n          </li>\n          <li>частота вертикальної розгортай;</li>\n          <li>розміри по діагоналі;</li>\n        </ul>\n        <ol>\n          <li>\n            <p>\n              ручний маніпулятор «мишка» — для вибору тих чи інших параметрів,\n              режимів роботи, команд програм та для керування роботою рухомих\n              об'єктів на екрані монітора;\n            </p>\n          </li>\n          <li>\n            <p>\n              накопичувані на гнучких магнітних дисках (дисководи) для читання\n              та запису даних на дискети;\n            </p>\n          </li>\n          <li>\n            <p>\n              накопичувачі на жорстких магнітних дисках для читання та запису\n              інформації на жорсткі магнітні диски («вінчестери»);\n            </p>\n          </li>\n          <li>\n            <p>\n              CD-ROM — пристрій для читання інформації із компакт-дисків\n              (оптичних дисків);\n            </p>\n          </li>\n          <li>\n            <p>\n              принтер — пристрій для роздрукування інформації на папері (часом\n              на інших носіях). За принципом роботи розрізняють матричні,\n              струменеві та лазерні принтери. До основних характеристик\n              принтерів відносять швидкість друку (кількість надрукованих\n              аркушів за 1 хвилину) та роздільну здатність (кількість відбитих\n              точок на відрізку завдовжки 1 дюйм);\n            </p>\n          </li>\n          <li>\n            <p>\n              сканер — пристрій для отримання електронних копій текстових та\n              графічних документів;\n            </p>\n          </li>\n          <li>\n            <p>плотер — пристрій для побудови графічних зображень на папері;</p>\n          </li>\n          <li>\n            <p>\n              стример — пристрій для збереження інформації на магнітних\n              стрічках;\n            </p>\n          </li>\n          <li>\n            <p>\n              модем — пристрій для підключення комп'ютерів до мереж за допомогою\n              телефонних ліній.\n            </p>\n          </li>\n        </ol>\n      </div>\n      <div id=\"14\">\n        <h3>Пристрої для вводу інформації в обчислювальній системі. Види.</h3>\n        <p>Пристрої введення:</p>\n        <ul>\n          <li>Клавіатура</li>\n          <li>«Миша»</li>\n          <li>Сканер</li>\n          <li>Цифрові камери</li>\n          <li>Мікрофон</li>\n        </ul>\n        <p>Клавіатура</p>\n        <p>\n          Клавіатура - це стандартний пристрій введення числової і текстової\n          інформації, а також команд управління. Клавіатура відноситься до\n          стандартних засобів ПК і не потребує підтримки спеціальними системними\n          програмами. Інформація вводиться у вигляді алфавітно-цифрових\n          символьних даних.\n        </p>\n        <p>Види клавіатур:</p>\n        <ul>\n          <li>\n            Мембранні У них натискання клавіш призводить до дотику двох мембран,\n            через які проходить слабкий струм.\n          </li>\n          <li>\n            Механічні Механічні клавіатури засновані на механічних перемикачах\n            (найбільш якісні).\n          </li>\n        </ul>\n        <p>\"Миша\"</p>\n        <p>\n          \"Миша\" - пристрій «графічного» управління. При переміщенні миші по\n          килимку на екрані переміщається покажчик миші, за допомогою якого\n          можна указувати на об'єкти і / або вибирати їх. Використовуючи клавіші\n          миші, можна задати той чи інший тип операції з об'єктом.\n        </p>\n        <p>Сканер</p>\n        <p>\n          Сканер - пристрій введення, яке переводить документи (текст, графіка)\n          в цифрову інформацію, що розуміється комп'ютером. Сканери бувають двох\n          типів:\n        </p>\n        <ul>\n          <li>Ручні</li>\n          <li>Планшетні.</li>\n        </ul>\n        <p>Цифрові камери і фотоапарати</p>\n        <p>\n          Цифрові відеокамери і фотоапарати, пристрої дозволяють отримувати\n          відеозображення і фотознімки безпосередньо в цифровому форматі і мають\n          пам'ять аналогічну комп'ютерної. Завдяки цьому зображення відразу\n          можна вводити в комп'ютер для зберігання на жорсткому диску, або для\n          перетворення, або для передачі по комп'ютерних мережах.\n        </p>\n        <p>Мікрофон</p>\n        <p>\n          Мікрофон - використовується для введення звукової інформації,\n          підключається до входу звукової карти.\n        </p>\n      </div>\n      <div id=\"15\">\n        <h3>\n          Системи опрацювання текстів, їх функції. Середовище текстового\n          процесора, його призначення та система вказівок. Відкриття та\n          збереження документу. Введення тексту, його редагування і\n          форматування. Перевірка правопису.\n        </h3>\n        <p>\n          Текстовими редакторами (ТР) або текстовими процесорами називають\n          програми для роботи з різними видами текстів (службовими паперами,\n          конспектами лекцій, газетами, журналами, книгами). Серед професійних\n          ТР найпоширеніші Microsoft Word, Лексикон, Multiedit.\n        </p>\n        <p>Текстові процесори реалізують чотири основні функції:</p>\n        <ul>\n          <li>Функцію введення.</li>\n          <li>Функцію перегляду.</li>\n          <li>Функцію опрацювання.</li>\n          <li>Функцію відтворення тексту.</li>\n        </ul>\n        <p>\n          Для різних операцій з текстовими документами призначено спеціалізовані\n          додатки: настільні видавничі системи (створення оригіналів-макетів для\n          друку на виробництві); програми-коректори (для опрацювання різного\n          роду помилок); програми-розпізнавання (переклад від сканованих текстів\n          у символьну форму); програми-перекладачі; електронні словники.\n        </p>\n        <p>Середовище текстового процесора.</p>\n        <p>\n          Робоче поле ТП — це екран дисплея, на якому відображаються результати\n          всіх дій, що виконуються за допомогою ТП. Важливим елементом\n          середовища ТП є інтерфейс — це ті засоби, за допомогою яких користувач\n          може управляти текстовим редактором. Нині найпопулярнішим є інтерфейс\n          у формі меню, з якого спеціальним маркером (виділеним кольором) можна\n          вибирати різні команди ТП.\n        </p>\n        <p>\n          Одночасно з меню на екрані висвічується рядок стану, в якому дається\n          інформація про поточний стан ТП (режими роботи, позиція курсору тощо).\n        </p>\n        <p>\n          Текст, що опрацьовується за допомогою ТП, зберігається в оперативній\n          пам'яті і візуально може бути поданий у вигляді рулону паперу\n          (поділеного на сторінки у деяких ТП), довжина і ширина якого в\n          більшості випадків не дозволяють цілком спостерігати його на екрані.\n        </p>\n        <p>\n          Переміщуючи курсор, можна переміщувати вікно відносно тексту.\n          Координати курсору в тексті (або на сторінці) — номери рядка і\n          стовпчика, де знаходиться курсор — відображаються в рядку стану.\n        </p>\n        <p>Текстовий процесор (ТП) — це програма, що дає змогу:</p>\n        <ul>\n          <li>виконувати введення та редагування тексту;</li>\n          <li>операції форматування тексту;</li>\n          <li>вставлення малюнків і таблиць,</li>\n          <li>перевірку правопису;</li>\n          <li>автоматичне перенесення слів;</li>\n          <li>складання змістів і безліч інших складних операцій.</li>\n        </ul>\n        <p>Систему команд (вказівок) ТП можна умовно поділити на такі групи:</p>\n        <ul>\n          <li>команди інтерфейсу;</li>\n          <li>команди зміну стану ТП;</li>\n          <li>команди переміщення по тексту;</li>\n          <li>команди до символьного редагування;</li>\n          <li>команди роботи з абзацами;</li>\n          <li>пошук за зразком;</li>\n          <li>копіювання;</li>\n          <li>форматування.</li>\n        </ul>\n        <p>У більшості ТП команди можна виконати двома способами:</p>\n        <ol>\n          <li>за допомогою функціональних і управляючих клавіш;</li>\n          <li>вибором пунктів меню</li>\n        </ol>\n        <p>\n          Завантажити або відкрити раніше створений документ можна кількома\n          способами:\n        </p>\n        <ul>\n          <li>вказівкою Файл/Відкрити;</li>\n          <li>кнопкою Відкрити панелі інструментів;</li>\n          <li>\n            комбінацією клавіш Ctrl+О. Потім у діалоговому вікні Відкриття\n            документа вибрати у списку Папка потрібну папку та ім'я документа.\n            Крім того, документ, з яким працювати недавно, можна відкрити,\n            вибравши його ім'я у списку документів, що відображається у нижній\n            частині вказівки Файл.\n          </li>\n        </ul>\n        <p>\n          Для збереження документа необхідно клацнути на значку Зберегти, або у\n          меню Файл виконати команду Зберегти, потім ввести ім'я файлу і\n          натиснути кнопку Зберегти або клавішу Еnter. Команда Зберегти як\n          використовується, коли треба записати файл з новим ім'ям і у новій\n          папці.\n        </p>\n        <p>\n          Введення тексту в Microsoft Word виконується за допомогою клавіатури\n          по місцерозташування текстового курсору. При натисканні клавіші Еnter\n          у документ вставляється символ кінця абзацу. Для вилучення символів\n          ліворуч від курсору використовується клавіша Васкsрасе, а праворуч —\n          Delete. При наборі тексту слід дотримуватися певних правил.\n        </p>\n        <p>До засобів редагування текстових документів належать такі дії:</p>\n        <ul>\n          <li>перевірка правопису;</li>\n          <li>перевірка граматики;</li>\n          <li>знайти і замінити;</li>\n          <li>\n            російсько-український переклад окремих слів, речень і документів.\n          </li>\n        </ul>\n        <p>\n          Форматування документа дає змогу виконувати в текстовому процесорі\n          Word операції верстки. Можуть виконуватися такі операції:\n        </p>\n        <ul>\n          <li>\n            встановлення параметрів сторінки: полів сторінки, розміру паперу,\n            орієнтації тощо;\n          </li>\n          <li>розбивка на сторінки, розділи;</li>\n          <li>\n            вставка номерів сторінок, колонтитулів, виносок, закладок, приміток\n            тощо;\n          </li>\n          <li>\n            вставка або створення формул, малюнків, таблиць, відео чи звукових\n            фрагментів;\n          </li>\n          <li>вставка назв ілюстрацій, перехресних посилань;</li>\n          <li>формування сторінки змісту.</li>\n        </ul>\n        <p>\n          При введенні тексту може автоматично перевірятися орфографія. Щоб,\n          наприклад, перевірити український текст, необхідно виконати команду\n          Сервіс/Мова/ Вибрати мову. У вікні Мова вибрати Український.\n        </p>\n        <p>\n          При наборі слова після натискання на пропуск чи розділовий знак\n          автоматично виконується процедура його порівняння із внутрішнім\n          словником. Якщо слово не знайдено у словнику, воно підкреслюється\n          червоною хвилястою лінією.\n        </p>\n        <p>\n          Для перевірки орфографії всього документа треба виконати команду\n          Сервіс/Правопис, або натиснути на кнопку Правопис на панелі\n          інструментів, або натиснути клавішу F7.\n        </p>\n      </div>\n      <div id=\"16\">\n        <h3>Операційна система. Призначення.</h3>\n        <p>\n          Операці́йна систе́ма, скорочено ОС (англ. operating system, OS) — це\n          базовий комплекс програм, що виконує управління апаратною складовою\n          комп'ютера або віртуальної машини; забезпечує керування обчислювальним\n          процесом і організовує взаємодію з користувачем.\n        </p>\n        <p>\n          Операційна система (ОС) - це програма, яка завантажується при\n          включенні комп'ютера. Вона робить діалог із користувачем, здійснює\n          управління комп'ютером, його ресурсами (оперативною пам'яттю, місцем\n          на дисках і т.д.), запускає інші (прикладні) програми на виконання.\n          Операційна система забезпечує користувачу і прикладним програмам\n          зручний спосіб спілкування (інтерфейс) із пристроями комп'ютера.\n          Загалом, вона грає роль сполучної ланки між апаратурою комп'ютера і\n          виконуваними програмами, а також користувачем\n        </p>\n        <p>Відносно свого призначення, операційні системи бувають:</p>\n        <ul>\n          <li>універсальні (для загального використання);</li>\n          <li>спеціальні (для розв'язання спеціальних задач);</li>\n          <li>спеціалізовані (виконуються на спеціальному обладнанні);</li>\n          <li>\n            однозадачні (в окремий момент часу можуть виконувати лише одну\n            задачу);\n          </li>\n          <li>\n            багатозадачні (в окремий момент часу здатні виконувати більше однієї\n            задачі);\n          </li>\n          <li>\n            однокористувацькі (в системі відсутні механізми обмеження доступу до\n            файлів та на використання ресурсів системи);\n          </li>\n          <li>\n            багатокористувацькі (система впроваджує поняття «власник файлу» та\n            забезпечує механізми обмеження на використання ресурсів системи\n            (квоти)), всі багатокористувацькі операційні системи також є\n            багатозадачними;\n          </li>\n          <li>\n            реального часу (система підтримує механізми виконання задач\n            реального часу, тобто такі, для яких будь які операції завжди\n            виконуються за наперед передбачуваний і незмінний при наступних\n            виконаннях час).\n          </li>\n        </ul>\n      </div>\n      <div id=\"17\">\n        <h3>\n          Операційна система, її функції. Інтерфейс операційної системи та\n          правила роботи з ним. Основні об'єкти, з якими працює операційна\n          система. Типи вікон і правила роботи з ними. Піктограми, їх\n          призначення.\n        </h3>\n        <p>\n          Операційна система (ОС) — це набір управляючих програм, які\n          забезпечують роботу обчислювальної системи, а саме:\n        </p>\n        <ul>\n          <li>\n            Здійснюють управління роботою апаратної і програмної складових\n            обчислювальної системи, координують взаємодію ок­ремих частин цих\n            складових.\n          </li>\n          <li>\n            Дають змогу користувачеві здійснювати загальне управління\n            обчислювальною системою на рівні заздалегідь занесених до\n            запам'ятовуючих пристроїв машини програм\n          </li>\n          <li>\n            ОС забезпечує взаємодію програм із зовнішніми пристроями та між\n            собою; здійснює розподіл ресурсів оперативної пам'яті; виявляє різні\n            ситуації, що виникають у процесі виконання про­грам, повідомляючи\n            про них.\n          </li>\n        </ul>\n        <p>\n          Інтерфейс — засоби та сукупність команд ОС для здійснення діяльності\n          користувача щодо опрацювання інформації засобами обчислювальної\n          системи.\n        </p>\n        <p>\n          Для спрощення доступу користувача до ресурсів комп'ютера операційна\n          система підтримує інтерфейс користувача, який має високий рівень\n          сервісу і звільняє користувача від безпосереднього «спілкування» з\n          апаратурою. Інтерфейс користувача сучасних ОС (наприклад, Windows\n          98/2000/ХР) називають ще графічним, Оскільки він дає змогу подавати\n          команди операційній системі шляхом маніпулювання наочними графічними\n          об'єктами (вікнами, меню; списками, кнопками тощо).\n        </p>\n        <p>\n          Об'єкт - це будь-який елемент інтерфейсу користувача: значок, кнопка,\n          меню, список, межа вікна, а також саме вікно тощо. Основними об'єктами\n          в системи Windows є вікна, документи, папки, ярлики.\n        </p>\n        <p>\n          Для збереження інформації на зовнішніх носіях система Windows\n          організує інформацію у вигляді документів. Як правило документи\n          створюються у конкретних прикладних програмах (додатках). Окремі\n          документи складаються у папки, причому кожна папка може містити в собі\n          як документи, так і вкладені папки.\n        </p>\n        <p>\n          Папка в Windows — це сховище різних об'єктів: документів, інших папок,\n          зразків дисків, принтерів тощо. Папки позначаються жовтим прямокутники\n          із виступом у лівому верхньому куті. Серед усіх папок, записаних на\n          диски комп'ютера, існують такі, що необхідні для роботи самої системи\n          Windows. Ці папки називаються системними.\n        </p>\n        <p>\n          Ярлик - це невеликий файл (розміром до 1 Кбайта), що містить\n          картинку-піктограму і посилання на будь-який об'єкт (програму,\n          документ, папку, принтер тощо)\n        </p>\n        <p>\n          Вікнами називаються прямокутні ділянки на екрані, що призначені для\n          введення інформації від користувача і виведення інформації, отриманої\n          програмою.\n        </p>\n        <p>\n          Вікна – це графічні, відображення програм (тобто Windows-додатків),\n          які бачить Користувач на екрані.\n        </p>\n        <p>До основних типів вікон належать:</p>\n        <ul>\n          <li>\n            <p>\n              Прикладні — вікна прикладних програм (додатків) Windows для\n              виконання певної роботи.\n            </p>\n          </li>\n          <li>\n            <p>Підлеглі—вікна, що викликаються із іншого вікна Windows</p>\n          </li>\n          <li>\n            <p>\n              Діалогові — додаткові вікна, для встановлення параметрів ко­манд.\n            </p>\n          </li>\n          <li>\n            <p>\n              Інформаційні — вікна з інформацією про стан системи, пристроїв,\n              хід виконання роботи, а також з попередженнями про аварійні\n              ситуації.\n            </p>\n          </li>\n        </ul>\n        <p>\n          Маніпулювати з вікнами можна, користуючись клавіатурою, а ще простіше\n          — мишею. Наведемо основні операції з вікнами, що виконуються мишею.\n        </p>\n        <p>\n          Активізація вікна здійснюється простим клацанням миші по полю\n          всередині .вікна. Активне вікно розміщується зверху інших вікон,\n          причому змінюється Підсвічування фону заголовка. Цього ж результату\n          досягають натисканням кнопки програми на панелі задач: кнопка при\n          цьому ніби заглиблюється.\n        </p>\n        <p>\n          Переміщення вікна. Щоб перемістити вікно; розмістіть курсор миші у\n          рядок заголовка, натисніть на кнопку миші та потягніть контур вікна у\n          потрібний бік. Відпустіть кнопку миші й вікно займе нове положення.\n        </p>\n        <p>\n          Зміна розмірів вікна. Розгорнути вікно на весь екран, віднови­ти його\n          до попередніх розмірів, згорнути на панелі задач — усі ці операції\n          виконуються за допомогою кнопок керування вікном. Для довільної зміни\n          розмірів вікна потягніть покажчиком миші за будь-яку зі сторін\n          обрамлення вікна (для зміни одного розмі­ру) чи за куток обрамлення\n          (для одночасної зміни двох розмірів).\n        </p>\n        <p>\n          Закриття вікна здійснюється клацанням по кнопці керування вікном,\n          позначеній хрестиком, або комбінацією клавіш Alt+F4.\n        </p>\n        <p>\n          Корисна команда Свернуть все окна. Вона дає змогу згорнути на панель\n          задач усі вікна додатків та відкрити простір робочого стола. Ви можете\n          користуватися цією командою, якщо треба швидше дістатися до будь-якого\n          значка на робочому столі або до діалогу настроювання екрана.\n        </p>\n        <p>\n          Windows дає можливість користувачу керувати комп'ютером за допомогою\n          графічних символів. Такі символи називають піктограмами, значками або\n          «іконками».\n        </p>\n        <p>\n          Піктограми — це графічне зображення значком об'єкта, який знаходиться\n          десь у файловій системі. Піктограмами зображаються дисководи для\n          дискет і компакт-дисків, вінчестер, пристрої, папки, файли, засоби\n          налагодження системи тощо.\n        </p>\n        <p>\n          Щоб Windows виконав певну команду, досить вибрати потрібну піктограму\n          і виконати відповідну дію мишею. Залежно від виду піктограми реакція\n          на ці дії може бути різною.\n        </p>\n      </div>\n      <div id=\"18\">\n        <h3>\n          Поняття генерації, інсталяції, ініціалізації операційної системи.\n        </h3>\n        <p>\n          При покупке вычислительной системы приобретается и программное\n          обеспечение для выполнения тех функций, ради которых эта ВС и\n          покупается. Как правило, в это ПО включены все необходимые программы\n          для полной поддержки всех соответствующих аппаратурных составляющих и\n          необходимых режимов работы приобретенной ВС. Таким образом, покупается\n          исходный вариант операционной системы или дистрибутив. В него входят\n          различные варианты драйверов для аппаратных компонент, а также\n          программы для обеспечения различных режимов работы ВС. Это драйверы\n          CD-ROMа, cетевых Ethernet карт, SCSI-устройств, Sound Blasterа,\n          принтера и т.д. Причем в состав дистрибутива могут входить варианты\n          драйверов для поддержки различных локальных шин (VESA, PCI) и\n          аппаратных платформ. Кроме этого, дистрибутив имеет все необходимые\n          программы, поддерживающие работу вычислительной системы в различных\n          режимах работы, например, однопрограммном или многопрограммном,\n          многопроцессорном, сетевом и поддержки различных сервисов (файловый,\n          почтовый, удаленного терминала и т.п.).\n        </p>\n        <p>\n          В реальных условиях эксплуатации, для нормального функционирования\n          вычислительной системы, вся совокупность программ исходного ПО не\n          нужна. Из всего их множества нужно выбрать некое подмножество\n          программ, обеспечивающих работу вычислительной установки в\n          установленных пользователем режимах и на имеющемся оборудовании.\n          Процесс отбора из дистрибутива тех программных модулей, которые будут\n          использоваться, называется генерацией операционной системы. Процесс\n          генерации выполняется либо с использованием специального \"языка\n          генерации\", либо с помощью организации диалога пользователя с\n          системой, в результате которого определяются желания и требования\n          пользователя к функционированию системы, а система в соответствии с\n          этим определяет совокупность необходимых программ, поддерживающих эти\n          требования.\n        </p>\n        <p>\n          Место, где находится резиденция системы, называется \" резидентным\"\n          томом, а сама система \"резиденцией\". Из всех программных модулей в\n          резидентном томе, часть, используется по мере необходимости, а\n          некоторые из них обеспечивающие базовое функционирование ВС составляют\n          резидентные программы, постоянно находящиеся в системной области\n          оперативной памяти. Совокупность программ, обеспечивающих\n          функционирование ВС и находящихся в системной области оперативной\n          памяти, составляет ядро супервизора.\n        </p>\n        <p>\n          Некоторые программы, связанные с выполнением функций ОС, но не\n          находящиеся постоянно в оперативной памяти называются транзитными. Эти\n          программы вызываются в память по мере необходимости. Кроме этого,\n          система позволяет пользователю по своему желанию определить некоторые\n          программы как резидентные. Все остальные программы являются\n          транзитами, вызываются динамически и могут занимать одно и то же место\n          в оперативной памяти и затирать друг друга.\n        </p>\n        <p>\n          При работе вычислительной системы пользователь может менять свои\n          представления о режимах ее функционирования. Кроме этого может\n          меняться и состав оборудования. Процесс локальной настройки ОС по\n          желанию пользователя называется инсталляцией. Признаком, по которому\n          можно отличить инсталляцию от генерации является то, что, если при\n          настройке операционной системы не используется дистрибутив или он\n          используется, но только для локальной добавления некоторых функций ?\n          то это инсталляция. Если для изменения или добавления функций\n          требуется дистрибутив и выполняется полная переустановка ОС ?\n          генерация.\n        </p>\n        <p>\n          При включении вычислительной системы выполняется загрузка ОС. Во время\n          загрузки выполняется связывание и размещение всех частей, входящих в\n          ядро супервизора в памяти ВС, т.е. размещение резидентных программ на\n          своих местах, формирование специальных системных структур данных в\n          области данных операционной системы, формирование постоянной области,\n          активизацию задач для начала работы операционной системы. Этот процесс\n          называется инициализацией операционной системы и выполняется в два\n          этапа, сначала выполняется инициализация ядра, а затем инициализация\n          системы.\n        </p>\n      </div>\n      <div id=\"19\">\n        <h3>\n          Робота з графічними об'єктами в середовищі текстового процесора.\n          Вкорінення об'єктів з інших додатків. Приклади. Операційна система.\n          Призначення.\n        </h3>\n        <p>\n          До графічних об'єктів Word відносять малюнки, геометричні фігури,\n          автофігури, а також фігурний текст. Ці об'єкти пропо­нують додаткові\n          можливості з оформлення таких документів, як реферат, об'ява, листівка\n          тощо.\n        </p>\n        <p>\n          Малюнок, що вставляється в документ, може бути растровим (точковим) чи\n          векторним.\n        </p>\n        <p>\n          Растрові малюнки створюються за допомогою растрових графічних\n          редакторів (Раіnt Рhotoshop та ін­ших), виконуються шляхом сканування\n          фотографій чи зйомки на цифровий фотоапарат.\n        </p>\n        <p>\n          Векторні малюнки створюються в програмах векторних графічних\n          редакторів (СогеDraw, Illustrator та інших). Простий векторний\n          редактор є й у Word.\n        </p>\n        <p>\n          Для вставки малюнка поставте курсор у потрібне місце документа і\n          виконайте команду Вставка — Рисунок — Картинки (вставка кліпу з\n          колекції) або команду Вставка - Рисунок — С файла (вставка малюнка з\n          файла). У наступних діалогах виберіть потрібний кліп чи файл.\n        </p>\n        <p>\n          Вставлений малюнок потребує додаткового форматування. Так, щоб змінити\n          розміри малюнка, клацніть мишею по ділянці малюнка і пересуньте один\n          із граничних маркерів. Для задання обтікання малюнка текстом клацніть\n          по малюнку правою кноп­кою миші й виберіть у контекстному меню команду\n          Формат ри­сунки. У діалозі; що відкрився, перейдіть на вкладку\n          Положення, визначте потрібну схему обтікання й клацніть по кнопці ОК.\n        </p>\n        <p>\n          Графічні об'єкти(лінії, багатокутники, еліпси, зірки, стрілки тощо)\n          створюються в документі Word за допомогою вмонтовано­го векторного\n          редактора. Доступ до інструментів редактора від­кривається за\n          допомогою панелі Рисование.\n        </p>\n        <p>\n          За допомогою вбудованого засобу WordArtможна створювати художньо\n          оформлений текст (нахилений, повернутий і розтягнутий текст, текст із\n          тінню і текст, вписаний у певні фігури). Для створення тексту\n          WordArtклацніть мишею в місці розміщення тексту і виберіть команду\n          меню Вставка — Рисунок — Обьект WordArt або клацніть по кнопці\n          Добавить абьект WordArt і на па­нелі інструментів Рисование. У\n          наступних діалогах потрібно ви­брати варіант оформлення тексту і\n          ввести сам текст, задавши гарнітуру і розмір шрифту.\n        </p>\n        <p>\n          В документ Місгоsoft Word можна вставляти об'єкти, коли не­обхідно\n          включити дані з файлів, які створені іншими програма­ми Місгоsoft\n          Office або будь-якою програмою, яка підтримує зв'язані об'єкти і\n          вкорінені об'єкти.\n        </p>\n        <p>\n          Наприклад, щомісячний звіт про стан включає відомості, які містяться\n          окремо, на аркуші Місгоsoft Ехсеl. У випадку створен­ня зв'язку звіту\n          з аркушем дані у звіті будуть оновлюватися кожен раз при оновленні\n          вихідного файла. У випадку вкорінення аркуша у звіт, звіт або кінцевий\n          файл містять статистичну копію даних.\n        </p>\n        <p>\n          Найзручніший спосіб помістити в документ Місгоsoft Word малюнки,\n          діаграми чи яку-небудь іншу інформацію — внесення інформації у вигляді\n          об'єкта. Внесений об'єкт можна перемішу­вати, масштабувати, копіювати\n          чи видаляти як звичайний гра­фічний об'єкт Місгоsoft Word. Щоб\n          викликати програму, за до­помогою якої був створений об'єкт, достатньо\n          двічі натиснути на ньому мишкою.\n        </p>\n        <p>\n          Такий додаток, як MS Graphдає змогу створювати в доку­ментах будь-які\n          типи діаграм на основі введених до таблиці даних. Такі діаграми можна\n          підписувати, змінювати їх розміри та міняти місце розташування.\n          Дозволяється також редагувати та форматувати вбудовані до документу\n          діаграми.\n        </p>\n        <p>\n          Щоб вставити графіку чи діаграму в документ, необхідно спочатку\n          помістити позицію введення до потрібного місця в до­кументі, потім\n          вибрати вказівку Вставка/Обьект і в списку об'єктів вибрати Діаграма\n          Місrocoft Graph, після чого ця програма запускається для роботи та на\n          екран виводиться діаграма-заготовка і таблиця, за даними якої\n          побудована така діаграма.\n        </p>\n        <p>\n          Ще одним додатком, об'єкти якого використовуються при введенні до\n          документу формул, є редактор формул Місrocoft Eguation 3.0 Вибравши\n          вказівку Вставка/Об'єкт та зі списку об'єктів Місrocoft Eguation 3. на\n          екран виводимо панель інструментів Формула.Тепер необхідно почати\n          вводити формулу за допомогою від­ повідних кнопок цієї панелі.\n        </p>\n      </div>\n      <div id=\"20\">\n        <h3>Завантаження операційної системи. Етапи. Поняття ініціалізації.</h3>\n        <p>\n          Після проведення самотестування спеціальна програма, що зберігається в\n          BIOS, починає пошук завантажника операційної системи. Відбувається\n          почергове звертання до наявних у комп'ютері дисків (гнучких, твердих,\n          CD-ROM) і пошук на певному місці (у першому, так званому\n          завантажувальному секторідиска) наявності спеціальної програми Master\n          Boot (програми-завантажника операційної системи). Якщо диск системний\n          і програма-завантажник виявляється на місці, то вона завантажується в\n          оперативну пам'ять і їй передається керування роботою комп'ютера.\n          Програма шукає файли операційної системи на системному диску й\n          завантажує їх в оперативну пам'ять як програмні модулі. Якщо системні\n          диски в комп'ютері відсутні, на екрані монітора з'являється\n          повідомлення «Non system disk», і комп'ютер «зависає», тобто\n          завантаження операційної системи припиняється й комп'ютер залишається\n          непрацездатним. Після закінчення завантаження операційної системи\n          керування передається командному процесору. У випадку використання\n          інтерфейсу командного рядка на екрані з'являється запрошення системи\n          до введення команд. Запрошення являє собою послідовність символів, що\n          повідомляють про поточний диск і каталог. Наприклад, якщо завантаження\n          операційної системи було зроблено з диска С:, а операційна система\n          була встановлена в каталог WINDOWS, то з'явиться запрошення:\n          C:\\WINDOWS> Ініціалізація-це створення,активація,підготовка до\n          роботи,визначення параметрів.Приведення програми або пристрою в стан\n          готовності для використання.\n        </p>\n      </div>\n      <div id=\"21\">\n        <h3>\n          Поняття про бази даних та їх види: фактографічні та документальні.\n          Інформаційно-пошукові системи та системи управління базами даних\n          (СУБД), їх призначення та функції.\n        </h3>\n        <p>\n          База даних (БД) — це сукупність однорідних, структурованих,\n          взаємопов’язаних даних з конкретної предметної галузі, які\n          зберігаються на комп’ютерних носіях.\n        </p>\n        <p>Класифікація баз даних:</p>\n        <ul>\n          <li>\n            За технологією обробки данних(Централізована база даних та\n            Розподілена база даних)\n          </li>\n          <li>\n            За засобом доступу до данних(Локальні та Мережеві(файл-сервер,клієнт\n            -сервер))\n          </li>\n        </ul>\n        <p>Основні групи баз даних:</p>\n        <ul>\n          <li>\n            Документальні.Ці бази даних створені сукупністю не структурованих\n            текстових документів(статті,книги,реферати,тексти законів)та\n            графічних об\"єктів\n          </li>\n          <li>\n            Фактографічні.Основна ідея таких баз даних є у тому,що усі відомості\n            про дані мають свій формат.Інформація яка заноситься до бази даних\n            має чітку структуру\n          </li>\n          <li>Документально-фактографічні(Змішані)</li>\n        </ul>\n        <p>\n          Інформаційно –пошукові системи (ІПС) — це різновид автоматизованих\n          інформаційних систем, в яких завершальна обробка даних не\n          передбачається. Ці системи призначені для пошуку текстів (документів,\n          їх частин, фактографічних записів) в сховищах (базах даних) за\n          формальними характеристиками. Тому в роботі ІПС можна виділити два\n          основних етапи: перший — збір і зберігання інформації, другий — пошук\n          і видача інформації користувачам.\n        </p>\n        <p>\n          Управляюча програма, яка призначена для зберігання, пошуку та обробки\n          даних у базі, зветься системою управління базами даних (СУБД)\n        </p>\n        <p>Функції СУБД:</p>\n        <ul>\n          <li>\n            можливість маніпулювання даними (ввід, вибір, вставка, оновлення,\n            видалення, редагування таін.);\n          </li>\n          <li>можливість пошуку та формування запитів;</li>\n          <li>оформлення звітів;</li>\n          <li>забезпечення цілісності даних;</li>\n          <li>забезпечення захисту даних;</li>\n          <li>\n            використання мови, яка дозволяє виконувати нестандартні алгоритми\n            обробки даних;\n          </li>\n          <li>\n            створення додатків користувача, які дозволяють об’єднувати\n            різноманітні операції роботи з базою даних у єдиний технологічний\n            процес.\n          </li>\n        </ul>\n      </div>\n      <div id=\"22\">\n        <h3>Принцип розташування операційної системи в оперативній пам’яті.</h3>\n      </div>\n      <div id=\"23\">\n        <h3>\n          Основні об'єкти, з якими працює операційна система, та вказівки для\n          роботи з ними. Стандартні імена зовнішніх запам'ятовуючих пристроїв\n          комп'ютера. Поняття файла, його імені та розширення, каталогу (папки),\n          шляху до файла. Особливості виконуваних файлів. Приклади.\n        </h3>\n        <p>\n          Терміном \"об'єкт\" позначається будь-який елемент інтерфейсу\n          користувача: значок/кнопка, меню, список, межа вікна, а також саме\n          вікно тощо.\n        </p>\n        <p>\n          Основними об'єктами в системі Windows є вікна, документи,папки,\n          ярлики.\n        </p>\n        <p>\n          Для збереження інформації на зовнішніх носіях система Windows\n          організує інформацію у вигляді документів. Як правило документи\n          створюються у конкретних прикладних програмах (додатках). Окремі\n          документи складаються у папки, причому кожна папка може містити в собі\n          як документи, так і вкладені папки.\n        </p>\n        <p>\n          Ярлик — це невеликий файл (розміром до1 Кбайта), який є засобом\n          швидкого доступу і містить лише шлях до відповідного об'єкта.\n        </p>\n        <p>Основні операції, що виконуються над об'єктами:</p>\n        <ul>\n          <li>Перейменування.</li>\n          <li>Відкриття.</li>\n          <li>Вставка.</li>\n          <li>Створення нової папки.</li>\n          <li>Копіювання.</li>\n          <li>Переміщення.</li>\n        </ul>\n        <p>\n          Операції над об'єктами можна здійснювати кількома спосо­бами: за\n          допомогою контекстного меню об'єкта, віконного меню або кнопок'панелі\n          інструментів, мишки або за допомогою кла­віатури, використовуючи певні\n          комбінації клавіш.\n        </p>\n        <p>Стандартні імена зовнішніх запам'ятовуючих пристроїв комп'ютера</p>\n        <p>\n          Накопичувач(нагромаджувач)- пристрій зовнішньої пам’яті, на якому\n          зберігаються файли. Накопичувачі прийнято позначати літерами\n          англійського алфавіту з наступною двокрапкою. Жорсткий диск розбивають\n          на декілька областей, які називаються логічними дисками: С:, D:, Е:,\n          F: і т.д. Оптичний диск одержує букву , яка йде за останнім іменем\n          логічного диску, наступні букви – флеш- пам’яті, картам пам’яті.\n          Накопичувачі на ГМД позначаються А:, В:, причому головним є А:, В: -\n          допоміжний.\n        </p>\n        <p>\n          Файл — це окремий запис, що зберігається на носієві інформації та має\n          ім'я. Ім'я файла складається з двох частин: власне ім'я файла і\n          роз­ширення, що визначає його тип (програма, документ тощо). Власне\n          ім'я файла дає користувач, а його тип зазвичай задається додатком\n          автоматично. Приклади розширень:\n        </p>\n        <ul>\n          <li>.SYS —файл операційної системи</li>\n          <li>.ТХТ — текстовий файл</li>\n          <li>.ЕХЕ— виконуваний файл</li>\n          <li>.РОС —- файл-документ.</li>\n        </ul>\n        <p>\n          Каталогом називається спеціальне місце на диску, в якому зберігаються\n          імена і допоміжні відомості про кожний файл:\n        </p>\n        <ul>\n          <li>дата і час останнього поновлення (запису) файла;</li>\n          <li>атрибут файла, який вказує його тип;</li>\n          <li>розмір файла в байтах;</li>\n          <li>\n            посилання на об­ласть диска, де записаний сам файл. Каталоги\n            утворюють багаторівневу ієрархічну структуру, що має вигляд дерева.\n            З початкового кореневого каталогу (наприк­лад, диска С) можна\n            перейти в каталоги першого рівня, з них, у свою, чергу, в каталоги\n            другого рівня і т. д. У каталогах усіх рівнів можуть зберігатися\n            файли. Каталог, з яким у даний момент працює користувач,\n            називає­ться поточним. Коли ви використовуєте файл не з поточного\n            ка­талогу, необхідно вказати, у якому каталозі цей файл\n            знаходить­ся. Це можна зробити за допомогою вказівки шляху до файла.\n          </li>\n        </ul>\n        <p>\n          Шлях — це послідовність, яка складається із імені диска та імен папок\n          (каталогів), і веде до файла. Наприклад: .\n        </p>\n        <p>\n          Виконувані файли — програми. Користувач безпосередньо працює лише з\n          двома типами файлів: програмами і документами. Перші використовуються,\n          щоб створювати другі.\n        </p>\n        <p>\n          .ЕХЕ — означає виконуваний файл, який зберігає в собі про-граму.\n          Наприклад, winword.ехе,\n        </p>\n      </div>\n      <div id=\"24\">\n        <h3>\n          Системи числення, що використовуються в обчислювальних системах. Види.\n          Приклади. Арифметичні операції в двійковій системі.\n        </h3>\n        <p>\n          • Скласти два числа (10110011101) + (00011101011) • Відняти два числа\n          (1011011001)- (0101101110)\n        </p>\n        <p>\n          Система числення – сукупність способів і засобів запису чисел для\n          проведення підрахунків. Звичайною для нас і загальноприйнятою є\n          позиційна десяткова система числення. Як умовні знаки для запису чисел\n          вживаються цифри. Найпростішим способом запису натурального числа є\n          зображення його за допомогою відповідної кількості паличок або\n          рисочок. Таким способом можна користуватися для невеликих чисел.\n        </p>\n        <p>Розрізняють такі типи систем числення:</p>\n        <ul>\n          <li>непозиційні</li>\n          <li>позиційні;</li>\n          <li>змішані.</li>\n        </ul>\n        <p>\n          Непозиційна система числення – система числення, в якій значення\n          кожної цифри в довільному місці послідовності цифр, яка означає запис\n          числа, не змінюється.\n        </p>\n        <p>\n          Позиційна система числення – система числення, в якій значення кожної\n          цифри залежить від місця в послідовності цифр у записі числа. Для\n          позиційних систем числення характерні наочність зображення чисел і\n          відносна простота виконання операцій.\n        </p>\n        <p>Також поширені системи числення з основами:</p>\n        <ul>\n          <li>\n            2 – двійкова (у дискретній математиці, інформатиці, програмуванні)\n          </li>\n          <li>8 – вісімкова (у програмуванні)</li>\n          <li>\n            12 – дванадцятирічна (мала широке застосування у давнину, подекуди\n            використовується і нині)\n          </li>\n          <li>\n            16 – шістнадцятирічна (поширена у програмуванні, а також для\n            кодування шрифтів)\n          </li>\n          <li>\n            60 – шістдесяткова (для виміру кутів і, зокрема, довготи і широти)\n          </li>\n        </ul>\n        <p>Двійкова система числення</p>\n        <p>\n          У двійковій системі числення числа виражаються тільки за допо­могою\n          двох цифр 0 і 1. Не зважаючи на високу розряд­ність двійкових чисел\n          саме двійкова система стала основою побудови обчис­лю­вальних машин,\n          тому що електронні елементи, які застосо­ву­ються в комп’ютерній\n          техніці, можуть перебувати в двох стійких станах. Сучасні комп’ютери\n          можуть за один такт (в паралель) опрацьовувати до 64 бітів, тому\n          висока розрядність двійкових чисел не є проблемою. Якщо під запис\n          двійкового числа виділити n бітів, то кількість різних чисел, що\n          записується за допомогою n бітів, дорівнює 2n.\n        </p>\n      </div>\n      <div id=\"25\">\n        <h3>\n          Основні поняття бази даних. Типи даних, що зберігаються в базі даних.\n          Проектування бази даних і створення структури бази даних. Основні\n          команди для роботи з таблицями.\n        </h3>\n        <p>\n          База даних (англ. database) – сукупність даних, організованих\n          відповідно до концепції, яка описує характеристику цих даних і\n          взаємозв'язки між їх елементами; ця сукупність підтримує щонайменше\n          одну з областей застосування (за стандартом ISO/IEC 2382:2015[1]). В\n          загальному випадку база даних містить схеми, таблиці, подання,\n          збережені процедури та інші об'єкти. Дані у базі організовують\n          відповідно до моделі організації даних. Таким чином, сучасна база\n          даних, крім саме даних, містить їх опис та може містити засоби для їх\n          обробки.\n        </p>\n        <p>\n          В загальному випадку базою даних можна вважати будь-який впорядкований\n          набір даних. Наприклад, паперову картотеку з формулярами про\n          працівників підприємства у відділі кадрів. Але дана стаття зосереджена\n          на використанні баз даних в інформаційних системах. На даний час\n          застосунки для роботи з базами даних є одними з найпоширеніших\n          прикладних програм.\n        </p>\n        <p>Проектування бази даних.</p>\n        <p>\n          Перш ніж створити електронну базу даних, необхідно детально розробити\n          її структуру. Цей процес включає наступні етапи:\n        </p>\n        <ul>\n          <li>Визначення мети створення бази даних.</li>\n          <li>Визначення таблиць, які повинна містити база даних.</li>\n          <li>\n            Визначення для кожної таблиці списку полів і призначення імен\n            кожному полю.\n          </li>\n          <li>Визначення полів з унікальними значеннями у кожному записі.</li>\n          <li>Визначення зв’язків між таблицями.</li>\n          <li>Удосконалення структури бази даних.</li>\n          <li>Введення даних і створення інших об’єктів бази даних.</li>\n          <li>Використання засобів аналізу бази даних.</li>\n        </ul>\n        <p>\n          База даних повинна задовольняти вимогам тих користувачів, які будуть з\n          нею працювати. Тому на першому етапі необхідно визначити, які функції\n          буде виконувати база даних, яка інформація буде міститись в її\n          таблицях. Визначити, яку результативну інформацію необхідно отримувати\n          у звітах. Після визначення мети створення бази даних, стане\n          зрозумілим, які дані повинні міститися в її таблицях. Добре продумана\n          структура таблиць є запорукою ефективної роботи з даними. Необхідно\n          детально продумати структуру таблиць, враховуючи наступні вимоги:\n        </p>\n        <ul>\n          <li>Інформація в таблиці не повинна повторюватись.</li>\n          <li>Таблиці не повинні містити одну й ту ж інформацію.</li>\n          <li>\n            Кожна таблиця повинна містити інформацію лише на визначену тему. Щоб\n            не відбувалось дублювання даних, необхідно розподілити різнорідні\n            дані по окремих таблицях. Для кожного типу відомостей необхідно\n            створювати окреме поле. Якщо таблиці містять значну кількість даних,\n            можна використати майстер аналізу таблиць (меню\n            Сервис/Анализ/Таблица), який допоможе розділити їх на зв’язані\n            таблиці, тим самим підвищивши ефективність збереження даних.\n          </li>\n          <li>\n            Для кожного поля таблиці необхідно задати тип даних і вибрати\n            найменший розмір, який дозволяє зберігати потрібні дані. Для\n            утворення зв’язків між таблицями необхідно визначити для кожної\n            таблиці первинний ключ, який являє собою одне або декілька полів, що\n            однозначно ідентифікують кожен запис таблиці. -Після даного етапу\n            необхідно остаточно проаналізувати утворену структуру і зв’язки між\n            таблицями і усунути існуючі недоліки. Для цього вводиться необхідний\n            для перевірки структури набір даних і створюються запити, які\n            показують чи вдається отримати необхідні відомості. Якщо структура\n            таблиць відповідає поставленим вимогам, то вводяться дані і\n            створюються всі інші об’єкти – форми, запити, макроси, модулі,\n            звіти.\n          </li>\n        </ul>\n      </div>\n      <div id=\"26\">\n        <h3>\n          Призначення віртуальної пам'яті в обчислювальних системах.\n          Максимальний розмір програми при віртуальній організації пам'яті. Її\n          розподілення між користувачем та ОС.\n        </h3>\n        <p>\n          Віртуальна пам'ять - це сукупність програмно-апаратних засобів, що\n          дозволяють користувачам писати програми, розмір яких перевершує наявну\n          оперативну пам'ять.\n        </p>\n        <p>Віртуальна пам'ять виконує наступні завдання:</p>\n        <ul>\n          <li>\n            розміщає дані в запам'ятовувальних пристроях різного типу,\n            наприклад, частина програми в оперативній пам'яті, а частина на\n            диску;\n          </li>\n          <li>\n            вибір образів процесів або їхніх частин для переміщення з\n            оперативної пам'яті на диск і назад;\n          </li>\n          <li>переміщення в міру необхідності даних між пам'яттю й дисків;</li>\n          <li>перетворення віртуальних адрес у фізичні адреси</li>\n        </ul>\n      </div>\n      <div id=\"27\">\n        <h3>\n          Поняття про стиснення даних. Призначення та основні функції\n          програм-архіваторів. Приклади.\n        </h3>\n        <p>\n          Архівація даних - це злиття кількох файлів чи каталогів в єдиний файл\n          - архів.\n        </p>\n        <p>\n          Стиснення даних - це скорочення обсягу вихідних файлів шляхом усунення\n          надлишкової інформації.\n        </p>\n        <p>\n          Для виконання цих завдань існують програми-архіватори, які\n          забезпечують як архівацію, так і стиснення даних. За допомогою\n          спеціальних алгоритмів архіватори видаляють з файлів надлишкову\n          інформацію, а при зворотній операції розпаковування вони відновлюють\n          інформацію у первісному вигляді. При цьому стиснення та відновлення\n          інформації відбувається без втрат.\n        </p>\n        <p>\n          Стиснення без втрат актуальне при роботі з текстовими і програмними\n          файлами, у задачах криптографії.\n        </p>\n        <p>\n          Існують також методи стиснення із втратами. Вони видаляють з потоку\n          інформацію, яка незначно впливає на дані або взагалі не сприймається\n          людиною. Такі методи стиснення застосовуються для аудіо- та\n          відеофайлів, деяких форматів графічних файлів.\n        </p>\n        <p>За допомогою архівації можна виконувати цілий комплекс завдань:</p>\n        <ul>\n          <li>\n            меншення обсягу файлів. Це завдання виконується за допомогою методів\n            стискання, що були розглянуті вище. Зменшення файлів актуальне не\n            лише для економії вільного місця на дисках, а й для прискорення\n            передачі файлів по мережі. Якщо дисковий простір можна \"нарощувати\"\n            шляхом придбання сучасніших дисків більшої ємності, то швидкість\n            передавання ще довго стримуватиме збільшення розміру файлів, що\n            передаються.\n          </li>\n          <li>\n            Резервне копіювання. У процесі експлуатації комп'ютера не виключені\n            ситуації, що загрожують невідновною втратою інформації (несправність\n            пристрою накопичувача або дефекти на поверхні жорсткого диска,\n            неправильні операції з файлами або випадкове знищення файлів, чи\n            руйнування інформації комп'ютерним вірусом). Для збереження важливої\n            інформації застосовується резервне копіювання на зовнішні носії\n            (магнітооптичні диски, диски CD-R і CD-RW, вінчестери). Резервне\n            копіювання виконується за допомогою спеціальних утиліт, що\n            забезпечують створення компактних архівів. Одна з таких утиліт,\n            Microsoft Backup, входить до комплекту Windows.\n          </li>\n          <li>\n            Архівація при шифруванні даних. Ця операція виконується з метою\n            зменшення імовірності злому криптосистеми. Доведено, що чим менша\n            кореляція (взаємозв'язок) між блоками вхідної інформації, тим нижча\n            імовірність злому. Процедура архівації, знищуючи надмірну\n            інформацію, ліквідує кореляції у вхідному потоці.\n          </li>\n        </ul>\n        <p>\n          Для роботи з архівами існують програми, що називаються архіваторами.\n        </p>\n        <p>\n          Перші програми-архіватори з'явилися в середині 80-х років. Вони були\n          зорієнтовані, насамперед, на роботу в MS-DOS і підтримували популярні\n          архівні формати: ARC, ZIP, LZH, ARJ, RAR, ICE тощо. Тогочасні\n          архіватори дозволяли створювати архівні файли та розкривати архіви,\n          переглядати архіви, сортувати файли в архіві, виводити вміст архіву иа\n          екран, знищувати файли в архіві. Існувала також група архіваторів\n          (PKLITE, LZE,..), які запаковували дані у саморозпаковувані архіви -\n          файли з розширеннями exe, com.\n        </p>\n        <p>\n          В MS-DOS програми-архіватори викликаються командним рядком з\n          чи-сленними параметрами. Параметри забезпечують великі можливості,\n          хоча й створюють труднощі пересічному користувачеві у роботі з\n          архіваторами.\n        </p>\n        <p>\n          Значно зручнішою стала робота з архівами з появою ОС Windows 9.x і\n          Windows-версій архіваторів.\n        </p>\n        <p>\n          Розглянемо принципи роботи з архіваторами на прикладі програми WinRAR.\n        </p>\n        <p>\n          WinRAR - потужний архіватор і менеджер архівів, який має зручну\n          графічну оболонку й підтримує технологію Drag and Drop. Програма\n          WinRAR дозволяє працювати з архівними файлами типу rar, zip, cab, arj.\n        </p>\n        <p>\n          Запускається WinRAR будь-яким з можливих способів, передбачених у\n          Windows. Якщо піктограми WinRAR немає на робочому столі або на панелі\n          інструментів Windows, то найпростіше запустити WinRAR з головного меню\n          (Пуск - Программы - WinRAR - WinRAR).\n        </p>\n        <p>Функції WinRAR:</p>\n        <ul>\n          <li>Перегляд і вилучення файлів з архіву.</li>\n          <li>Архівація файлів.</li>\n          <li>Додавання файлів до архіву.</li>\n          <li>\n            Створення багатотомних, саморозпаковувальних й неперервних архівів.\n          </li>\n        </ul>\n      </div>\n      <div id=\"27\">\n        <h3>Файл. Файлові системи з погляду користувача. Призначення.</h3>\n        <p>\n          Файл — це набір даних, до якого можна звертатися за іменем. Файли\n          організовані у файлові системи. З погляду користувача файл є\n          мінімальним обсягом даних файлової системи, з яким можна працювати\n          незалежно. Наприклад, користувач не може зберегти дані на зовнішньому\n          носії, не звернувшись при цьому до файлу. Розглянемо особливості\n          використання файлів.\n        </p>\n        <ul>\n          <li>\n            Файли є найпоширенішим засобом зберігання інформації в\n            енергонезалежній пам'яті. Така пам'ять надійніша, й інформація на\n            ній може зберігатися так довго, як це необхідно. Зазначимо, що\n            більшість збоїв у роботі ОС не руйнує інформації, що зберігається у\n            файлах на диску. Для забезпечення збереження даних підвищеної\n            цінності вживають додаткових заходів (гаряче резервування, резервне\n            копіювання тощо).\n          </li>\n          <li>\n            Файли забезпечують найпростіший варіант спільного використання даних\n            різними застосуваннями. Це пов'язано з тим, що файли відокремлені\n            від програм, які їх використовують: будь-яка програма, якій відоме\n            ім'я файла, може отримати доступ до його вмісту. Якщо одна програма\n            запише у файл, а інша його потім прочитає, то ці дві програми\n            виконають обмін даними.\n          </li>\n        </ul>\n        <p>Поняття файлової системи</p>\n        <p>\n          Файлова система - це підсистема ОС, що підтримує організований набір\n          файлів, здебільшого у конкретній ділянці дискового простору (логічну\n          структуру); низькорівневі структури даних, використовувані для\n          організації цього простору у вигляді набору файлів (фізичну\n          структуру); програмний інтерфейс файлової системи (набір системних\n          викликів, що реалізують операції над файлами).\n        </p>\n        <p>\n          Файлова система надає прикладним програмам абстракцію файла. Прикладні\n          програми не мають інформації про те, як організовані дані файла, як\n          знаходять відповідність між ім'ям файла і його даними, як пересилають\n          дані із диска у пам'ять тощо - усі ці операції забезпечує файлова\n          система.\n        </p>\n        <p>\n          Важливо зазначити, що файлові системи можуть надавати інтерфейс\n          доступу не тільки до диска, але й до інших пристроїв. Є навіть файлові\n          системи, які не зберігають інформацію, а генерують її динамічно за\n          запитом. Втім, для прикладних програм усі такі системи мають однаковий\n          вигляд.\n        </p>\n        <p>\n          До головних задач файлової системи можна віднести: організацію її\n          логічної структури та її відображення на фізичну організацію\n          розміщення даних на диску; підтримку програмного інтерфейсу файлової\n          системи; забезпечення стійкості проти збоїв; забезпечення розподілу\n          файлових ресурсів за умов багатозадачності та захисту даних від\n          несанкціонованого доступу.\n        </p>\n      </div>\n      <div id=\"29\">\n        <h3>\n          Структура програмної складової інформаційної системи. Системне і\n          прикладне програмне забезпечення.\n        </h3>\n        <p>\n          Інформаційна система-це сукупність взаємопов\"язаних елементів,що\n          утворюють єдине ціле і призначені для реалізації інформаційних\n          процесів. Інформаційна система має апаратну та програмні складові.\n        </p>\n        <p>Програмну складову ще називають програмним забезпеченням(ПЗ)</p>\n        <p>\n          Програмне забезпечення (ПЗ)-це комплекс програм,які забезпечують\n          реалізацію інформаційних процесів пристроями інформаційної системи.\n          Програмне забезпечення називають також \"software\"(у перекладі\"м'який\n          виріб\").\n        </p>\n        <p>Програмне забезпечення ділиться на три групи:</p>\n        <ul>\n          <li>системне ПЗ</li>\n          <li>прикладне ПЗ</li>\n          <li>системне програмування</li>\n        </ul>\n        <p>\n          Системне ПЗ-це сукупність програм для забезпечення роботи\n          комп'ютера.Системне програмне забезпечення призначено для\n          обслуговування власних потреб комп'ютера — забезпечення його\n          працездатності і виконання його внутрішніх функцій, а також для\n          створення передумов для виконання прикладного програмного\n          забезпечення.Типовим прикладом системного програмного забезпечення є\n          операційна система.\n        </p>\n        <p>\n          Прикладне ПЗ-це сукупність програм,що використовуються безпосередньо\n          для розв'я зування задач в різноманітних предметних галузях в ході\n          людської діяльності.Прикладне програмне забезпечення, призначено для\n          розв'язання задач користувача. Наприклад: редактори тексту, електронні\n          таблиці, бази даних тощо.\n        </p>\n        <p>\n          Програмне забезпечення можна розділити на корисне і шкідливе. Корисне\n          програмне забезпечення створюється для виконання завдань, що\n          відповідають побажанням користувача комп'ютера. Основна мета\n          шкідливого програмного забезпечення — виконувати операції, які є\n          небажаними для користувача, часто із завдаванням прихованої чи явної\n          шкоди. Прикладом шкідливого програмного забезпечення є комп'ютерні\n          віруси.\n        </p>\n      </div>\n      <div id=\"30\">\n        <h3>\n          Файлова система (FAT). Особливості роботи. Переваги та недоліки.\n        </h3>\n        <p>\n          Фа́йлова систе́ма — спосіб організації даних, який використовуються\n          операційною системою для збереження даних у вигляді файлів на\n          електронних носіях. Також цим поняттям позначають сукупність файлів та\n          директорій, які розміщуються на логічному або фізичному пристрої.\n        </p>\n        <p>\n          FAT (File Allocation Table - таблиця розташування файлів) є\n          найпростішою з підтримуваних у Windows NT файлових систем. Основою\n          файлової системи FAT є таблиця розташування файлів, яка розміщена на\n          початку тому. У випадку пошкодження на диску зберігаються дві копії\n          цієї таблиці. Крім того, таблиця розташування файлів і кореневий\n          каталог повинні зберігатися у визначеному місці на диску (для\n          правильного визначення місця розташування файлів завантаження).\n        </p>\n        <p>\n          Диск, відформатований у файловій системі FAT, ділиться на кластери,\n          розмір яких залежить від розміру тому. Одночасно зі створенням файлу в\n          каталозі створюється запис і встановлюється номер першого кластера, що\n          містить дані. Такий запис в таблиці розміщення файлів сигналізує про\n          те, що це останній кластер файлу, або вказує на наступний кластер.\n          Оновлення таблиці розміщення файлів має велике значення і вимагає\n          багато часу. Якщо таблиця розміщення файлів не оновлюється регулярно,\n          це може призвести до втрати даних.\n        </p>\n        <p>\n          Каталог FAT не має певної структури, і файли записуються в першому\n          виявленому вільному місці на диску. Крім того, файлова система FAT\n          підтримує тільки чотири файлових атрибути: «Системний», «Прихований»,\n          «Тільки читання» і «Архівний».\n        </p>\n        <p>Переваги файлової системи FAT</p>\n        <p>\n          На комп'ютері під управлінням Windows NT у будь-який з підтримуваних\n          файлових систем не можна скасувати видалення. Програма скасування\n          видалення намагається напряму звернутися до обладнання, що неможливо\n          при використанні Windows NT. Однак якщо файл знаходився в FAT-розділі,\n          то, запустивши комп'ютер в режимі MS-DOS, видалення файлу можна\n          скасувати. Файлова система FAT найкраще підходить для використання на\n          дисках і розділах розміром до 200 Мб, тому що вона запускається з\n          мінімальними накладними витратами.\n        </p>\n        <p>Недоліки файлової системи FAT</p>\n        <p>\n          Як правило, не варто використовувати файлову систему FAT для дисків і\n          розділів, чий розмір більше 200 МБ. Це пояснюється тим, що в міру\n          збільшення розміру тому продуктивність файлової системи FAT швидко\n          падає. Для файлів, розташованих в розділах FAT, неможливо встановити\n          дозволи. Розділи FAT мають обмеження за розміром: 4 ГБ під Windows NT\n          і 2 ГБ під MS-DOS.\n        </p>\n        <p>\n          Переваги FAT - низькі накладні витрати на зберігання даних і тотальна\n          сумісність з величезною кількістю операційних систем і апаратних\n          платформ. Цією файловою системою, як і раніше користуються для\n          форматування дискет, де великий обсяг розділу, підтримуваний іншими\n          файловими системами, не грає ролі, а низькі накладні витрати\n          дозволяють економно використовувати малий обсяг дискети (NTFS вимагає\n          для зберігання даних більше місця, що абсолютно не прийнятно для\n          дискет ).\n        </p>\n      </div>\n      <div id=\"31\">\n        <h3>\n          Опрацювання даних за допомогою табличного процесора: редагування,\n          копіювання, форматування, переміщення, захист від змін, зв'язування.\n          Приклади.\n        </h3>\n        <p>Можна виділити такі режими роботи табличного процесора:</p>\n        <ul>\n          <li>формування електронної таблиці;</li>\n          <li>управління обчисленнями; '</li>\n          <li>графічний режим;</li>\n          <li>\n            робота з електронною таблицею як базою даних. Система команд\n            табличного процесора тісно пов'язана з режимами роботи електронної\n            таблиці. Як правило, команди реалізовуються через меню команд або\n            через функціональні клавіші.\n          </li>\n        </ul>\n        <p>\n          Розглянемо детальніше режими роботи електронних таблиць і команди,\n          пов'язані з ними.\n        </p>\n        <ol>\n          <li>\n            Режим формування електронних таблиць передбачає заповнення і\n            редагування документа. Базові команди формування таблиць можна\n            поділити на дві групи:\n          </li>\n        </ol>\n        <ul>\n          <li>\n            команди, що змінюють вміст клітинок (очистити, редагувати,\n            копіювати);\n          </li>\n          <li>\n            команди, шо змінюють структуру таблиці (вилучити, вставити,\n            перемістити). '\n          </li>\n        </ul>\n        <ol>\n          <li>\n            Режим управління обчисленнями Всі обчислення починаються з клітинки,\n            розташованої на перетині першого рядка і першого стовпчика\n            електронної таблиці. Обчислення проводяться в природному порядку,\n            тобто якщо в черговій клітинці знаходиться формула, що включає\n            адресу ще не обчисленої клітинки, то обчислення за цією формулою\n            відкладаються доти, поки значення в клітинці, від якої залежить\n            формула, не буде визначене.\n          </li>\n        </ol>\n        <p>\n          Прй кожному введенні нового даного в клітинку електронна таблиця\n          переобчислюється заново — реалізовується автоматичне переобчислення. У\n          деяких табличних процесорах існує можливість установки ручного\n          переобчислення, тобто таблиця переобчислюєтьея заново тільки при\n          виборі спеціальної команди. ;\n        </p>\n        <ol>\n          <li>\n            Графічний режим дає змогу відображати числову інформацію в\n            графічному вигляді, частіше за все у вигляді діаграм та графіків.\n            Команди графічного режиму можна поділити на дві групи:команди опису\n            діаграм (задають Дані, які будуть виведені в графічному поданні,\n            задають тип діаграм);\n          </li>\n        </ol>\n        <ul>\n          <li>команди виведення, форматування діаграм та графіків.</li>\n        </ul>\n        <ol>\n          <li>\n            Робота в режимі баз даних реалізована в професійних ТП. Можливість\n            шукати і вибирати із таблиці дає змогу використовувати електронну\n            таблицю як нескладну базу даних. Прй роботі з базами даних\n            доводиться мати справу з такими поняттями, як файл, запис, поле\n            даних. У електронних таблицях файлом є сама таблиця, записами —\n            рядки таблиці, полями — клітинки таблиці.\n          </li>\n        </ol>\n        <p>\n          Дані робочого листа можна редагувати двома способами: в рядку формул\n          або безпосередньо в клітинці.\n        </p>\n        <p>\n          Редагування існуючих записів клітинок. Для редагування спочатку\n          оберіть клітинку, дані якої потрібно редагувати, і клацніть у рядку\n          формул. Вміст клітинки з'явиться в рядку формул. Для редагування\n          безпосередньо в клітинці клацніть на ній або натисніть клавішу F2.\n        </p>\n        <p>\n          У редагуванні вмісту клітинки для переміщення курсору вводу можна\n          використовувати мишу або клавіатуру.\n        </p>\n        <p>\n          В ЕхсеІ пропонується кілька способів копіювання та переміщення даних\n          робочого листа. Можна копіювати дані методом drag-and-dtop, за\n          допомогою команд основного і контекстного меню, клавіатури,\n          стандартної панелі інструментів, використовуючи Буфер обмена або\n          копіювати дані в сусідні клітинки за допомогою Автозаполнителя.\n        </p>\n        <p>До форматування даних належать такі дії: .</p>\n        <ul>\n          <li>Настроювання параметрів перегляду таблиць ЕхсеІ;</li>\n          <li>Вибір формату виведення числа; - Зміна ширини стовпця;</li>\n          <li>Зміна висоти рядка;</li>\n          <li>Вибір типу шрифту;</li>\n          <li>Зміна розміру шрифту;</li>\n          <li>Зміна стилю шрифту;</li>\n          <li>Вирівнювання і орієнтація даних;</li>\n          <li>Форматування сторінки;</li>\n          <li>Зміна стилю;</li>\n        </ul>\n        <p>\n          Захист клітинок використовується для закриття доступу до виділених\n          клітинок. При створенні документів найчастіше захист встановлюється на\n          заголовок, шапку документа, і на клітинки з формулами. Для\n          встановлення захисту на клітинки таблиць виконайте такі дії:\n        </p>\n        <ul>\n          <li>\n            Виділіть клітинку або діапазон клітинок робочого листа, на які\n            потрібно встановити захист, але які на даний момент мають бути\n            відкритими для запису і редагування.\n          </li>\n          <li>Виберіть команду Формат/Ячейки та вкладку Защита.</li>\n          <li>Зніміть, якщо потрібно, опцію Защищаемая ячейка.</li>\n          <li>Виконайте команду' Сервис/Защита/Защитить лист.</li>\n          <li>\n            Введіть пароль та підтвердження паролю. Після чого виконайте перші\n            два пункти, встановіть опцію Защищаемая ячейка.\n          </li>\n        </ul>\n        <p>\n          За необхідності внесення правок у захищені клітинки потрібно зняти\n          захист із робочого листа командою Сервис/Защи-та/Снять защиту листа.\n        </p>\n      </div>\n      <div id=\"32\">\n        <h3>Способи пошуку файлів в різних файлових системах .</h3>\n        <p>\n          Для того щоб легко знайти потрібні дані, їх необхідно впорядковано\n          зберігати. Більшість користувачів намагається це робити. Зберігаючи\n          дані на носіях, вони створюють панки з іменами, що відповідають змісту\n          файлів, що в них містяться, розподіляють файли за часом їх створення,\n          за видами документів тощо. Однак після перенесення даних з одного\n          носія на інший, з одного комп’ютера на інший, внесення змін у перелік\n          папок, значного збільшення кількості об’єктів користувач перестав\n          пам’ятати місцезнаходження частини даних.\n        </p>\n        <p>\n          Для пошуку потрібних об’єктів операційні системи мають засоби, які\n          дають змогу знайти об’єкти за різними значеннями їх властивостей,\n          наприклад за іменами, часом створення, типом тощо.\n        </p>\n        <p>\n          В операційній системі Windows ХР для початку пошуку об’єктів потрібно\n          виконати Пуск =&gt; Знайти. Відкриється вікно Провідника з панеллю\n          Помічник із пошуку у лівій частині вікна.Відкрити цю панель для\n          здійснення пошуку можна також вибором кнопки Пошук на панелі\n          інструментів вікна Провідника. На панелі Помічник із пошуку розміщено\n          список Що ви бажаєте знайти? У списку наведено команди для пошуку\n          об’єктів на носіях даних комп’ютера або в мережі за певними значеннями\n          властивостей:\n        </p>\n        <ul>\n          <li>\n            Малюнки, музику або відео - для пошуку файлів, що містять дані\n            зазначених типів;\n          </li>\n          <li>\n            Документи (текстові файли, електронні таблиці тощо) - для пошуку\n            файлів, що створені в прикладних програмах, крім файлів малюнків,\n            музичних і звукових. Наприклад, файли з розширеннями імен DOC, TXT,\n            РРТ, DBF тощо.\n          </li>\n          <li>\n            Усі файли й папки - для пошуку файлів будь-яких типів і папок;\n          </li>\n          <li>\n            Комп’ютери або людей - для пошуку комп’ютерів у мережі або даних про\n            певних людей, що зберігаються в спеціальних файлах — адресних\n            книгах, які створює користувач.\n          </li>\n        </ul>\n        <p>\n          Після вибору однієї з названих команд на панелі Помічника із пошуку\n          з’являються елементи керування для уточнення значень властивостей\n          пошуку. Наприклад, після вибору команди Малюнки, музику або відео на\n          панелі з’являться елементи керування. Установленням позначки\n          відповідного прапорця можна вказати, файли яких типів будемо шукати.\n          Якщо відомо ім’я файлу або частина імені, то їх можна ввести у\n          відповідне поле, що значно пришвидшить пошук.\n        </p>\n        <p>\n          Якщо ви на тижні створювали презентацію, але забули в якій папці її\n          зберегли і точно не пам’ятаєте ім’я файлу цієї презентації, то для\n          пошуку можна використати спеціальні символи - зірочку (*) чи знак\n          питання (?). Зірочка позначає будь-яку кількість довільних символів, а\n          знак питання - один довільний символ. Наприклад, за записом *.pptx\n          будуть знайдені всі файли і палки, що мають розширення імені pptx, а\n          за записом ?.pptx - тільки файли і палки, що мають розширення імені\n          pptx і лише один довільний символ в імені.\n        </p>\n        <p>\n          Зменшити час пошуку потрібного файлу можна, вибравши в списку Шукати\n          в: відповідний носій даних або палку. Якщо ви знаєте терміни створення\n          файлу, то можна встановити позначку перемикача в позиції, що\n          відповідає часу створення (змінення) файлу (група перемикачів Коли\n          були внесені останні зміни?).\n        </p>\n        <p>\n          Для знаходження файлу з розширенням імені pptx, що містить слово\n          «інформатика», може зберігатися на одному із жорстких локальних дисків\n          комп’ютера, а дата його створення невідома, слід установити значення\n          властивостей пошуку.\n        </p>\n        <p>\n          Після завершення пошуку на панелі Помічника із пошуку буде виведено\n          повідомлення про кількість знайдених об’єктів і запит про досягнення\n          потрібних результатів пошуку.\n        </p>\n        <p>\n          У результаті пошуку користувач у правій частині вікна отримує список\n          імен об’єктів, які відповідають умовам пошуку. Для переходу до папки,\n          що містить знайдений об’єкт, потрібно вибрати його в списку та\n          виконати Файл =&gt; Відкрити папку, що містить об'єкт. Якщо ж потрібно\n          відкрити вікно знайденого об’єкта, то об’єкт необхідно вибрати і\n          натиснути клавішу Enter або двічі клацнути на ньому.\n        </p>\n        <p>\n          Якщо пошук об’єктів не дав потрібного результату, то варто перевірити\n          чи правильно вказані значення властивостей пошуку, можливо варто\n          змінити носій даних чи папку, в списках яких відбувався пошук. А\n          можливо варто розширити пошук, здійснивши пошук на всіх носіях даних\n          комп'ютера, чи вказати більш загальні значення імені об’єкта.\n        </p>\n        <p>Для Windows 7</p>\n        <p>\n          Пошук об’єктів файлової системи в операційній системі Window» 7 можна\n          здійснювати кількома способами. Після вибору кнопки Запустити в меню\n          стає доступним поле Пошук програм та файлів. У це поле потрібно ввести\n          слово або словосполучення для пошуку. Цим словом або словосполученням\n          може бути ім’я або частина імені (шаблон) об’єкта.\n        </p>\n        <p>\n          У міру введення символів у поле Пошук програм та файлів над полем\n          відкривається панель, на якій відображаються результати пошуку в\n          певних областях. Наприклад, на запит «по» було знайдено 5 програм, у\n          назві яких є ці дві літери, та 2337 файлів, які або в імені, або у\n          вмісті мають зазначені літери.\n        </p>\n        <p>\n          Для запуску знайденої програми або відкриття файлу потрібно вибрати\n          відповідне ім’я на панелі пошуку. Вибравши назву групи об’єктів або\n          посилання Інші результати, буде відкрито вікно Результати пошуку, яке\n          містить у Робочій області список знайдених об’єктів.\n        </p>\n        <p>\n          У кінці списку об’єктів під заголовком Шукати знову в: розміщено\n          кнопки для здійснення нового пошуку з уточненими місцями пошуку.\n        </p>\n        <p>\n          Вид подання результатів пошуку можна змінити вибором відповідної\n          команди в меню Вигляд або в списку кнопки Змінити подання\n        </p>\n      </div>\n      <div id=\"33\">\n        <h3>\n          Поняття про мову програмування. Класифікація мов програмування.\n          Основні поняття мови: алфавіт, синтаксис і семантика. Основні елементи\n          мови програмування: символи, слова, вирази і команди.\n        </h3>\n        <p>\n          Мова програмування — це штучна мова для написання команд, що\n          виконуються комп'ютером. Оскільки мова програмування обчислювальній\n          машині не зрозуміла, то має існувати спеціальна програма, що\n          перекладала б символи цієї мови у двійкові символи машинних вказівок.\n          Така програма для перекладу символів, що називається транслятором,\n          вперше була створена на початку 50-х років XX століття.\n        </p>\n        <p>\n          Зазначимо, що мови, близькі до числового коду процесора, називають\n          мовами низького рівня, а мови, зручні для людини, — мовами високого\n          рівня. Мова найнижчого рівня — мова машинного кодування. Трохи вище\n          лежить мова Ассемблера, в якій машинні команди замінюються\n          мнемонічними скороченнями. Всі інші мови програмування є мовами більш\n          високого рівня, ніж мова Ассемблера.\n        </p>\n        <p>\n          Мови програмування поділяються також на процедурні (детальний опис\n          розв'язування задачі і використання процедур) і непроцедурні\n          (використання об'єктів і декларацій). Процедурні мови, у свою чергу,\n          поділяються на операціональні (Ассемблер, Фортран, Бейсік, Сі та ін.)\n          і структурні (Паскаль, Модула). Серед непроцедурних мов виділяють\n          об'єктні мови (Сі++, Делфі, Смолток) і декларативні йоті (Пролог,\n          Лісп).\n        </p>\n        <p>\n          Кожна мова програмування характеризується трьома основними складовими:\n          алфавіт, синтаксис і семантика.\n        </p>\n        <p>\n          Алфавіт складається зазвичай з латинських букв, наприклад, у Бейсіку\n          всі букви пишуться як великі (А, В,..., 2), а в Паскалі можливе\n          використання як малих (а, Ь,.., z), так і великих букв. В алфавіт\n          обов'язково входять цифри 0,1, ..., 9, знаки арифметичних операцій (+,\n          — та ін.), знаки логічних операцій (поt, апd, ог та ін.), знаки\n          операцій порівняння (=, &lt;, &gt; та ін.), а також спеціальні символи\n          (дужки, роздільники тощо).\n        </p>\n        <p>\n          Словник мови програмування складається з кінцевого; фіксованого\n          набору, ключових слів, наприклад, іпіе^ег, У/пїіе, уаг тощо.\n        </p>\n        <p>\n          Синтаксис (від грецького шпіахіг — «буДова») — це система правил, за\n          якими із символів утворюються конструкції мови програмування: слова,\n          оператори, команди. Наприклад, символи в слові не можна опускати чи\n          міняти місцями. Якщо ви напишете службове слово Ье§іп як Ье§п чи Ьещп,\n          це вважатиметься помилкою.\n        </p>\n        <p>\n          Семантика (від грецького $етапііко5 — «що позначає») представлена\n          системою правил однозначного тлумачення окремих мовних конструкцій.\n          Мова програмування має у своєму розпорядженні набір зарезервованих\n          слів, який можна використовувати тільки в значенні, визначеному самою\n          мовою, і не можна застосовувати для позначення користувальницьких\n          об'єктів (змінних, міток тощо).\n        </p>\n        <p>\n          У будь-якій мові програмування можна виділити чотири типи елементів,\n          що використовуються при побудові описів програм: символи, слова,\n          вирази і команди (оператори).\n        </p>\n        <p>\n          Символи мови — це основні нероздільні знаки, за допомогою яких\n          описуються програми і дані.\n        </p>\n        <p>\n          Слова мови — структури, які утворені із символів і є мінімальними\n          одиницями, що мають деякий смисл. Слова — це імена (позначення,\n          ідентифікатори) змінних величин, числа, службові слова, які входять в\n          команди мови програмування, тощо.\n        </p>\n        <p>\n          Вирази- це текст, який задає правило обчислення одного значення того\n          чи іншого типу. Якщо одержуване значення числове, то вираз називають\n          арифметичним. Якщо одержуване значення логічне, то вираз називають\n          логічним або бульовим. Якщо одержуване значення -текст, то вираз\n          називають літерним.\n        </p>\n        <p>\n          Команда — це команда про виконання деякої дії. Скінченна послідовність\n          виконуваних одна за іншою команд називається серією команд. Серія може\n          складатися із однієї команди або бути порожньою (не містити жодної\n          команди).\n        </p>\n        <p>В мовах програмування застосовуються команди трьох типів:</p>\n        <ul>\n          <li>\n            Команди про безумовне виконання деякої дії чи набору дій:\n            присвоювання, введення, виведення, виклику допоміжного алгоритму.\n          </li>\n          <li>Команди розгалуження.</li>\n          <li>\n            Команди повторення. . Команди першого типу називають простими,\n            другого і третього- складеними.\n          </li>\n        </ul>\n      </div>\n      <div id=\"34\">\n        <h3>Способи пошуку файлів в різних файлових системах.</h3>\n        Смотреть вопрос 32\n      </div>\n      <div id=\"35\">\n        <h3>\n          Об'єкти в середовищі текстового процесора (символ, абзац, * документ)\n          і правила роботи з ними. Робота з фрагментами тексту:, виділення,\n          перенесення, копіювання, форматування, Пошук, заміна. Використання\n          буфера обміну. Приклади.\n        </h3>\n        <p>\n          У редакторі Word для створення документа використовуються три\n          складовi, символи, абзаци і розділи. Документ складається з одного чи\n          кількох розділів. Більшість документів містить тільки один розділ.\n          Один або кілька абзаців утворюють розділ. Абзац складається з одного\n          чи кількох символів.\n        </p>\n        <p>\n          Для кожної із перелічених складових використовуються свої параметри\n          форматування.\n        </p>\n        <p>\n          Щоб переміщувати, форматувати, вилучати або вносити зміни до тексту,\n          необхідно його виділити. Виділяти частину документа можна як за\n          допомогою мишки, так і за допомогою клавіатури.\n        </p>\n        <p>\n          Протяжка — один із способів виділення будь-якої частини тексту. В\n          деяких випадках для виділення тексту використовується смуга виділення\n          — це завжди присутня вузька область зліва від тексту.\n        </p>\n        <p>Для переміщення та копіювання фрагменту тексту слід:</p>\n        <ul>\n          <li>Виділити той фрагмент, який треба перемістити або скопіювати.</li>\n          <li>\n            Натиснути кнопку Вьірезать для переміщення або Копировать для\n            копіювання.\n          </li>\n          <li>\n            Встановити курсор у місце вставки та натиснути кнопку Вставить на\n            панелі інструментів. .\n          </li>\n        </ul>\n        <p>\n          Для заміни виділеного тексту іншим слід виділити текст, який треба\n          замінити, та набрати з клавіатури новий текст. Word пропонує такий\n          засіб, як автозаміна.\n        </p>\n        <p>\n          Автозаміна — автоматична заміна із підготовленого списку слів з\n          типовими помилками, скороченнями на правильні або повні.\n        </p>\n        <p>\n          Може виникнути потреба знайти у багато сторінковому документі якесь\n          певне слово, групу слів або речення. Наприклад, у тексті кулінарних\n          рецептів української кухні знайти «пироги з сиром». Для цього\n          необхідно подати команду Правка/ Найти.\n        </p>\n        <p>\n          Для знаходження потрібного фрагменту і заміни його на інший вибрати\n          команду Правка/ Заменить.\n        </p>\n        <p>\n          Кожен символ у документі несе в собі інформацію про форматування, яке\n          виконується за допомогою встановлення відповідних значень параметрів\n          опцій. у діалоговому вікні Формат/Шрифт.\n        </p>\n        <p>\n          Основні параметри форматування символів, які можна задати та змінити:\n        </p>\n        <ul>\n          <li>шрифт;</li>\n          <li>інтервал;</li>\n          <li>розмір;</li>\n          <li>зміщсння;</li>\n          <li>підкреслення;</li>\n          <li>кернінг для символів;</li>\n          <li>колір;</li>\n          <li>анімація.</li>\n          <li>ефекти;</li>\n        </ul>\n        <p>\n          Найшвидшими способами форматування є кнопки панелі інструментів і\n          передбачені комбінації клавіш. Наприклад, для зміни написання символів\n          зручно користуватися такими комбінаціями клавіш: Ctrl+I - курсив, Ctrl\n          +В — напівжирний,Ctrl +U — підкреслення.\n        </p>\n        <p>\n          Абзац у документі Word- це сукупність символів, яка закінчується\n          маркером абзацу, що створюється в результаті натискання клавіші Епtег.\n          Цей знак є прихованим символом, що вводиться щоразу, коли користувач\n          натискає клавішу Епtег. Параметри форматування абзацу зберігаються у\n          маркері абзацу. Абзац може містити багато символів або не мати\n          жодного.\n        </p>\n        <p>\n          Щоб змінити форматування абзацу, необхідно спочатку виділити абзац, а\n          потім застосувати потрібні параметри форматування. Для виділення\n          абзацу достатньо встановити курсор на цьому абзаці, або виділити деяку\n          його частину.\n        </p>\n        <p>\n          Основні параметри форматування можна змінити за допомогою команди меню\n          Формат/Абзац. У діалозі, що з'явився, ви можете встановити такі\n          параметри:\n        </p>\n        <ul>\n          <li>тип вирівнювання;</li>\n          <li>абзацні відступи;</li>\n          <li>міжрядковий інтервал;</li>\n          <li>перший рядок;</li>\n          <li>інтервали перед абзацом і після абзацу;</li>\n          <li>заборона висячих рядків;</li>\n          <li>не відривати від попереднього;</li>\n          <li>з нової сторінки;</li>\n          <li>заборонити нумерацію рядків;</li>\n          <li>табуляція (Формат/Табуляция);</li>\n          <li>межі та заливка (Формат/Границь» и заливка);</li>\n          <li>список (Формат/Список).</li>\n        </ul>\n        <p>\n          Під час оформлення різних списків зручно використовувати абзаци з\n          маркерами (наприклад, у списку вище вставлені маркери а також\n          пронумеровані абзаци. Для створення маркувальних нумерованих списків\n          виділіть потрібні абзаци і натисніть кнопку Маркери на панелі\n          інструментів або кнопку Нумерация. Проте точнішим засобом є\n          Формат/Список.\n        </p>\n        <p>\n          Коли необхідно, щоб певні частини документу мали різний вигляд, тоді\n          документ треба поділити на розділи та відформатувати кожний розділ за\n          своїми параметрами.\n        </p>\n        <p>До основних параметрив розділу відносять:</p>\n        <ul>\n          <li>параметри сторінки;</li>\n          <li>номери сторінок;</li>\n          <li>колонки;</li>\n          <li>номери рядків;</li>\n          <li>розміщення приміток;</li>\n          <li>колонтитули;</li>\n          <li>вставлення розривів.</li>\n        </ul>\n        <p>\n          Буфер обміну — це спеціальна ділянка пам'яті, у якій можна розмістити\n          виділений фрагмент тексту (вирізати або копіювати на старому місці)\n          для того, щоб його вставити в інше місце того самого або іншого\n          документа.\n        </p>\n        <p>\n          Зазвичай буфер обміну може містити один об'єкт, але вже є багато\n          програм, де буфер обміну є багатомісний.\n        </p>\n        <p>\n          Для роботи з буфером обміну використовують команди Копіювати у буфер\n          (Ctrl+С), Вставляти з буфера (Ctrl+Y). Вони є в меню команди\n          Редагувати (Правка) чи в контекстних меню об'єктів, а також\n          продубльовані кнопками на панелі інструментів.\n        </p>\n      </div>\n      <div id=\"36\">\n        <h3>Дескриптор файлу. Призначення. Основні поля.</h3>\n        <p>\n          Дескриптор файла - это целое число без знака, с помощью которого\n          процесс обращается к открытому файлу. Количество дескрипторов файлов,\n          доступных процессу, ограничено параметром /OPEN_MAX, заданным в файле\n          sys/limits.h. Кроме того, количество дескрипторов файлов можно задать\n          с помощью флага -n команды ulimit. Дескрипторы файлов создаются при\n          выполнении функций open, pipe, creat и fcntl. Обычно каждый процесс\n          работает с уникальным набором дескрипторов. Однако эти же дескрипторы\n          могут применяться и дочерними процессами, созданными с помощью функции\n          fork. Кроме того, дескрипторы можно скопировать с помощью функций\n          fontal, dup и dup2. Все открытые файлы ссылаются к ядру через так\n          называемые файловые дескрипторы. Файловый дескриптор — это\n          неотрицательное целое число. Когда мы открываем существующий файл и\n          создаем новый файл, ядро возвращает процессу файловый дескриптор.\n        </p>\n        <p>\n          Файловый дескриптор — это неотрицательное целое число. Когда создается\n          новый поток ввода-вывода, ядро возвращает процессу, создавшему поток\n          ввода-вывода, его файловый дескриптор. В операционной системе Windows\n          для получения дескриптора файла его необходимо открыть функцией\n          CreateFile. Затем полученный дескриптор (или handle) можно\n          использовать для работы с этим файлом. Если это драйвер, то дескриптор\n          будет использоваться в функции DeviceIoControl. По умолчанию\n          Unix-оболочки связывают файловый дескриптор 0 с потоком стандартного\n          ввода процесса (терминал), файловый дескриптор 1 — с потоком\n          стандартного вывода (терминал), и файловый дескриптор 2 — с потоком\n          диагностики (куда обычно выводятся сообщения об ошибках). Это\n          соглашение соблюдается многими Unix-оболочками и многими приложениями\n          — и ни в коем случае не является составной частью ядра. Стандарт\n          POSIX.1 заменил «магические числа» 0, 1, 2 символическими константами\n          STDIN_FILENO, STDOUT_FILENO и STDERR_FILENO соответственно. Файловые\n          дескрипторы могут принимать значения от 0 до OPEN_MAX. Согласно\n          POSIX.1, значение OPEN_MAX равно 19. В реальных ОС это значение может\n          быть больше\n        </p>\n      </div>\n      <div id=\"37\">\n        <h3>\n          Комп'ютерні мережі. Види, основні характеристики і принципи\n          використання комп'ютерних мереж. Сервер та робоча станція. Технологія\n          клієнт-сервер.\n        </h3>\n        <p>\n          Комп'ютерна мережа — це сукупність комп'ютерів і периферійного\n          обладнання, об'єднаних між собою каналами передачі даних. Існують\n          різні класифікації комп'ютерних мереж.\n        </p>\n        <p>Комп'ютерні мережі :</p>\n        <ol>\n          <li>За призначенням:</li>\n        </ol>\n        <ul>\n          <li>Інформаційні</li>\n          <li>Обчислювальні</li>\n          <li>Інформаційно-обчислювальні</li>\n        </ul>\n        <ol>\n          <li>За розміщенням даних:</li>\n        </ol>\n        <ul>\n          <li>3 централізованим банком даних</li>\n          <li>3 розподіленим банком даних</li>\n        </ul>\n        <ol>\n          <li>За територіальним розподіленням:</li>\n        </ol>\n        <ul>\n          <li>Локальні</li>\n          <li>Корпоративні</li>\n          <li>Регіональні</li>\n          <li>Телекомунікаційні</li>\n          <li>Глобальні</li>\n        </ul>\n        <ol>\n          <li>За структурою:</li>\n        </ol>\n        <ul>\n          <li>Однорідні</li>\n          <li>Неоднорідні</li>\n        </ul>\n        <p>Розглянемо детальніше види мереж за територіальним розподіленням.</p>\n        <ul>\n          <li>\n            <p>\n              Локальні мережі— поєднують невелике число комп'ютерів (звичайно до\n              100) й існують у межах однієї організації чи підприємства. Такі\n              мережі часто створюються для організації інформаційної системи чи,\n              як мінімум, для спільного використання ресурсів (дисководів,\n              принтерів, сканерів та іншого обладнання).\n            </p>\n          </li>\n          <li>\n            <p>\n              Корпоративні мережі створюються великими підприємствами\n              (корпораціями), банками та їхніми філіями, страховими компаніями,\n              засобами масової інформації. Корпоративні мережі використовують\n              для обслуговування клієнтів у віддалених пунктах: філіях, готелях\n              тощо. У таких мережах застосовуються спеціальні заходи для\n              збереження таємниці й виключення несанкціонованого доступу до\n              інформаційних ресурсів.\n            </p>\n          </li>\n          <li>\n            <p>\n              Регіональна мережа - комп'ютери об'єднуються в мережу масштабу\n              регіону країни. Лініями зв'язку для такої мережі можуть бути\n              телефонні лінії чи безпровідний супутниковий зв'язок. Регіональні\n              мережі націлені, як правило, на розв'язання завдань масштабу\n              регіону ( роботи електроенергетики, транспорту, регіонального\n              постачання, банківських розрахунків тощо).\n            </p>\n          </li>\n        </ul>\n        <p>\n          Мережі, які охоплюють великі відстані і широке коло користувачів,\n          називаються телекомунікаційними. Телекомунікаційна мережа — це мережа\n          обміну і розподіленого опрацювання інформації, що утворюється безліччю\n          взаємозалежних локальних мереж. Передача інформації здійснюється за\n          допомогою телефонних, телевізійних і супутникових систем зв'язку.\n        </p>\n        <p>\n          Мережі різного масштабу можуть бути з'єднані між собою,. Наприклад,\n          локальна мережа підприємства по кабелю може бути підключена до\n          регіональної мережі, а мережі різних регіонів можуть бути зв'язані\n          телефонною лінією. Завдяки об'єднанню мереж різного масштабу можливе\n          передавання повідомлень, між містами, країнами і континентами. В цьому\n          разі ведуть мову про глобальні мережі.\n        </p>\n        <p>\n          Сучасні глобальні мережі використовують телефонний зв'язок. Проте\n          зв'язок між серверами глобальної мережі здійснюється не звичайними\n          телефонними лініями, а виділеними лініями або спеціальними каналами\n          зв'язку.\n        </p>\n        <p>\n          Комп'ютер, з якого користувач Інтернету одержує послуги, називається\n          сервером, а комп'ютер користувача — клієнтом чи робочою станцією.\n        </p>\n        <p>\n          Взаємодія серверів і робочих станцій забезпечується мережним\n          програмним забезпеченням. Призначення робочої станції — виконувати\n          програми, отримані з мережі, а призначення серверу — доставляти ці\n          програми до робочих станцій. Схему роботи, коли робочі станції\n          виконують велику частину опрацювання, а файл-сервер надає файли для\n          цього опрацювання, називають розподіленим опрацюванням. Схему\n          опрацювання, за якою робота розподіляється між робочою станцією і\n          файлом-сервером більш рівномірно, називається системою клієнт-сервер.\n        </p>\n      </div>\n      <div id=\"38\">\n        <h3>Пристрої виведення інформації. Типи.</h3>\n        <p>\n          Пристрій виведення інформації (англ. output device) — периферійний\n          пристрій для виведення інформації (результатів роботи обчислювальної\n          машини) для людей і в зрозумілій для людей формі. Найчастіше пристрої\n          виведення інформації виводять інформацію через звук і візуально.\n        </p>\n        <p>Пристрої для виведення інформації візуально</p>\n        <p>Монітор</p>\n        <p>\n          На моніторі у вигляді текстової та графічної інформації відтворюються\n          результати роботи комп'ютера. Крім того, на моніторі відображаються\n          елементи керування, які користувач може вибрати за допомогою миші та\n          активізувати у такий спосіб певну дію (ініціювати виконання команди,\n          видалити фрагмент тексту тощо). Зображення на моніторі формується з\n          пікселів. Донедавна поширеними були монітори на основі\n          електронно-променевих трубок (ЕПТ-монітори), але тепер їх змінили\n          РК-монітори, тобто — рідкокристалічні.\n        </p>\n        <p>\n          Основною характеристикою монітора є розмір діагоналі його екрана та\n          його дозвіл (чим більший дозвіл екрану, тим більш детальне\n          промальовування).\n        </p>\n        <p>\n          Для того щоб створити на екрані монітора зображення, потрібно\n          перетворити на відеосигнали зображення, що міститься в пам'яті\n          комп'ютера. Цю роботу виконує графічна плата, яка встановлюється у\n          рознім на материнській платі. Сучасні графічні плати мають графічний\n          процесор, який виконує обчислення, необхідні для отримання зображення.\n          Крім того, на графічній платі розміщено відеопам'ять, у якій\n          зберігається зображення, що генерується графічним процесором,\n          відеоконтролер, що керує цим зображенням, а також інше.\n        </p>\n        <p>Проектор</p>\n        <p>\n          Проектор — електронно-оптичний прилад, що дає змогу виводити\n          результати роботи комп'ютера шляхом проектування зображення на\n          поверхню, розташовану поза приладом — екран.\n        </p>\n        <p>Принтер</p>\n        <p>\n          Принтер дає змогу вивести результати роботи комп'ютера на папір чи\n          прозору плівку.\n        </p>\n        <p>\n          Сьогодні найпоширенішими є принтери двох типів: струменеві (зазвичай,\n          їх використовуються для кольорового друку) та лазерні (зазвичай,\n          використовуються для чорно-білого друку).\n        </p>\n        <p>\n          Струменевий принтер наносить зображення на папір у такий спосіб:\n          уздовж аркуша паперу переміщується друкувальна голівка з\n          мікроскопічними отворами, з яких викидаються крапельки чорнил. Ці\n          крапельки такі малі, що їх не можна розгледіти неозброєним оком, і\n          тому нанесене на папір зображення здається суцільним. Відбиток,\n          отриманий за допомогою струменевого принтера, боїться вологи.\n        </p>\n        <p>\n          У лазерному принтері є світлочутливий вал (фотобарабан), який\n          заряджений від'ємним зарядом. Для формування зображення вал сканується\n          лазерним променем, який активізується в тих місцях, де має бути\n          зображення, та змінює заряд вала. До цих місць на наступному етапі\n          притягується тонер (порошкоподібна фарба), який завдяки дії\n          електростатики переноситься на папір, який в свою чергу згодом\n          надходить у піч, де тонер закріплюється під дією високої температури і\n          тиску. Зроблені в такий спосіб відбитки не бояться вологи, стійкі до\n          стирання та вицвітання.\n        </p>\n        <p>Графопобудовник</p>\n        <p>\n          Графопобудовник — пристрій, призначений для виведення результатів\n          роботи комп'ютера в графічній формі на папір. Найчастіше це\n          широкоформатний, струменевий принтер, зорієнтований на друк аркушів\n          формату А0, А1, А2, А3, А4 тощо різної товщини (від 80 г/м², ватманів,\n          напівватманів тощо). Використовується для друку, як у чорно-білому так\n          і в кольоровому варіантах, креслень, схем, карт, рекламних плакатів,\n          цінників великого формату.\n        </p>\n        <p>Пристрої для виведення інформації через звук</p>\n        <p>Акустична система</p>\n        <p>\n          Акустична система — пристрій або система пристроїв для відтворення\n          звуку, що складається з однієї або кількох динамічних головок,\n          розташованих у корпусі (акустичному оформленні). Акустична система\n          перетворює електричні коливання у звукові. Окремих колонок в\n          акустичній системі може бути від 2 до 8. Колонки бувають пасивні та\n          активні. Пасивні колонки не мають власного підсилювача і підключаються\n          до виходу підсилювача звукової карти, за допомогою якої комп'ютер\n          відтворює інформацію у звуковому форматі. Активні колонки оснащено\n          вбудованим підсилювачем, завдяки чому забезпечується краща якість\n          звуку.\n        </p>\n        <p>Навушники</p>\n        <p>\n          Навушники — пристрій для відтворення звукової інформації персонально.\n          За своєю будовою, навушники належать до класу електроакустичних\n          перетворювачів. В переважній більшості навушників використовуються\n          електродинамічні випромінювачі, які називаються динаміками, звідси й\n          назва — динамічні навушники. Існують також навушники з\n          електростатичними випромінювачами, але, попри деякі переваги (зокрема,\n          в локалізації джерел), вони не користуються широким попитом внаслідок\n          своєї дорожнечі.\n        </p>\n        <p>Вбудований динамік</p>\n        <p>\n          PC speaker — найпростіший пристрій для відтворення звуку, який\n          застосовується у IBM PC-сумісних ПК. До появи спеціалізованих звукових\n          карт був основним пристроєм відтворення звуку. У сьогодення PC speaker\n          залишається штатним пристроєм IBM PC-сумісних комп'ютерів, і в\n          основному використовується для подачі сигналів про помилки, зокрема\n          при проведенні POST. Пристрій дозволяє відтворювати прості одноголосні\n          звукові сигнали, що генеруються за допомогою програмувального таймера.\n          За допомогою спеціальних програм також можливе відтворення\n          низькоякісного оцифрованого звуку, шляхом істотного використання\n          ресурсів процесора. Приблизно з початку 2000-х років, PC speaker являє\n          собою мініатюрний динамік, розташований безпосередньо на материнській\n          платі.\n        </p>\n        <p>Пристрої для виведення інформації через вібрацію</p>\n        <p>Ігровий джойстик</p>\n        <p>\n          Джойстик — пристрій-держак для керування у відеоіграх: важіль на\n          підставці, який можна відхиляти у двох площинах. На важелі можуть бути\n          різного роду гашетки і перемикачі. Деякі сучасні джойстики мають\n          вбудований вібратор. У відеоіграх при зіткненні з перешкодою він\n          вібрує, таким чином інформація до людини доходить у вигляді вібрації.\n        </p>\n      </div>\n      <div id=\"39\">\n        <h3>\n          Виконання обчислень у середовищі табличного процесора. Використання\n          математичних функцій і операцій для опрацювання даних, поданих в\n          електронній таблиці. Приклади.\n        </h3>\n        <p>\n          Електронні таблиці Ехсеl мають у своєму розпорядженні потужні\n          інструменти для опрацювання даних, основним серед яких є формули.\n          Формули в Ехсеl являють собою вирази, які описують обчислення в\n          комірках.\n        </p>\n        <p>\n          Запис формули починається зі знака рівності = або знака + чи — .\n          Формула, що набирається, відображається в рядку формул. Завершується\n          введення формули натисканням на клавішу Епter, переміщенням курсору в\n          іншу комірку. Після цього запис формули в комірці зникає і з'являється\n          результат її виконання або повідомлення про помилку.\n        </p>\n        <p>\n          За допомогою формул можна порівнювати дані в комірках, множити\n          значення комірок, знаходити середні значення тощо.\n        </p>\n        <p>\n          У Ехсеl є чотири види операторів: арифметичні, текстові, оператори\n          порівняння й оператори посилань (адресні оператори). Операції над\n          числами виконуються за допомогою арифметичних операторів: + (сума), —\n          (різниця), * (множення), / (ділення), ^(піднесення до степеня), %\n          (обчислення відсотка). Під час роботи з текстом і числами\n          застосовуються оператори порівняння: =,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;\n          (не дорівнює).\n        </p>\n        <p>\n          Формули, що вписуються в комірки електронних таблиць, можуть містити в\n          собі вбудовані функції. Вбудовані функції широко використовуються в\n          Ехсеl для обчислень, полегшуючи процес опрацювання даних. Крім того,\n          застосування цих функцій позбавляє від довгих записів і знижує\n          ймовірність помилок.\n        </p>\n        <p>\n          При цьому аргументами функцій можуть бути самі дані, адреси об'єктів\n          електронної таблиці, в яких зберігаються ці дані. Адреси, що\n          використовуються в функціях і формулах, одержали назву посилань.\n          Можливість використання в ЕТ посилань в формулах і/або функціях дає\n          змогу автоматично виконувати обчислення при зміні значень даних\n          елементів ЕТ, на які виконуються посилання.\n        </p>\n        <p>\n          Функції в ЕТ реалізовані за допомогою стандартних програм, які можна\n          заздалегідь викликати за відомими іменами. Кількість різних функцій,\n          які можна використовувати, досить велика, для зручності їх пошуку вони\n          всі поділені на категорії: математичні, статистичні, текстові,\n          логічні, фінансові, функції дати і часу тощо.\n        </p>\n        <p>\n          Використання всіх функцій та формул відбувається за однаковими\n          правилами:\n        </p>\n        <ul>\n          <li>кожна функція мас своє унікальне ім'я;</li>\n          <li>\n            при зверненні до функції після її імені в круглих дужках вказується\n            список аргументів, відокремлених між собою крапкою з комою;\n          </li>\n          <li>введення до комірки формули слід починати із знака =.</li>\n        </ul>\n        <p>Приклади:</p>\n        <ul>\n          <li>=КОРІНЬ(А5)</li>\n          <li>=МАКС(Д6:В10;В2:Е4;С$:І8)</li>\n          <li>=СЕРЕДНЄ(АЦВ23)</li>\n          <li>=СУМА(А1 :А9)*СУМ А(В 1: В9)</li>\n        </ul>\n        <p>\n          Результат обчислення функції називається значенням, що повертається.\n          Дужки, які обмежують список аргументів, завжди мають бути парними;\n          пропуски перед дужками чи після них не припускаються. Окремі аргументи\n          в списку мають бути розділені комами.\n        </p>\n        <p>\n          Функція включається у формулу записом «вручну» або за допомогою\n          майстра функцій, що спрощує введення функції. Викликається майстер\n          через меню Вставка — Функция.\n        </p>\n        <p>\n          Діалог Мастер функций містить два списки: Категория і Функция. У\n          першому списку треба вибрати категорію, у якій знаходиться потрібна\n          вам функція, а в другому — саму функцію. Після вибору функції\n          необхідно зважати на вказівки Мастера до одержання результату.\n        </p>\n        <p>\n          Перелічимо функції Ехсеl, призначені для роботи з математичними\n          виразами.\n        </p>\n        <p>\n          До таких функцій належать тригонометричні функції (СОS, SIN, ТАN);\n          зворотні тригонометричні (АСОS? АSIN, АТАN); модуль числа (АВS)\n          логарифмічні (LOG, LOG10, LN); арифметичні (СУМ, ПРОИЗВЕД, ЧАСТНОЕ,\n          ОСТАТ); степінь числа (СТЕПЕНЬ); квадратний корінь (КОРЕНЬ); визначник\n          матриці (МОПРЕД), число п (ПИ) та інші.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Answers_1_39;\n","import React from 'react';\n\nconst Answers_40_80: React.FC = (): JSX.Element => {\n  return (\n    <>\n      <div id=\"40\">\n        <h3>\n          Форматування диска. Призначення. Збереження інформації про формат .\n        </h3>\n        <p>\n          Форматува́ння (formatting) — процедура створення структур порожньої\n          файлової системи вказаного типу — розподіл доріжок магнітного диска\n          (дискети, твердого диска) чи іншого носія інформації (наприклад, SSD\n          чи флеш-накопичувача) на фізичні чи логічні записи, що виконується\n          перед першим використанням диска. Форматування, при цьому\n          супроводжується втратою даних, що зберігаються на розділі, який\n          форматується.\n        </p>\n        <p>\n          Суть форматування — створення (формування) структур доступу до даних,\n          наприклад, структур файлової системи. Після цього можливість прямого\n          доступу до інформації, попередньо записаної на носії, втрачається,\n          частина її безповоротно знищується. Деякі програмні утиліти дають\n          можливість відновити деяку (зазвичай, більшу) частину інформації з\n          відформатованих носіїв. В процесі форматування також може перевірятися\n          й виправлятися цілісність носія.\n        </p>\n        <p>\n          Форматувати HDD потрібно з кількох причин: Створення базової розмітки\n          для подальшої роботи з вінчестером Виконується після першого\n          підключення нового HDD до ПК, інакше його просто не буде видно серед\n          локальних дисків. Очищення від всіх збережених файлів За роки роботи\n          комп'ютера або ноутбука на вінчестері скупчується величезна кількість\n          непотрібних даних. Це не тільки призначені для користувача, але і\n          системні файли, які вже не потрібні, але при цьому не видаляються\n          самостійно. В результаті може виникнути переповнення накопичувача,\n          нестабільна і повільна робота. Найпростіший варіант позбавлення від\n          сміття - зберегти потрібні файли в хмарне сховище або на флешку і\n          відформатувати вінчестер. Це в якомусь роді є радикальним методом\n          оптимізації роботи HDD. Повна перевстановлення операційної системи Для\n          більш якісної і чистої установки ОС правильніше за все використовувати\n          чистий диск. Виправлення помилок Непереборні віруси і шкідливе\n          програмне забезпечення, пошкоджені блоки і сектора і інші проблеми з\n          вінчестером нерідко виправляються створенням нової розмітки.\n        </p>\n      </div>\n      <div id=\"41\">\n        <h3>\n          Електронна пошта та пришити її функціонування. Поштові стандарти.\n          Електронна адреса. Основні можливості використання поштових програм.\n          Правила й етикет електронного листування.\n        </h3>\n        <p>\n          Електронна пошта (E-mail) ¾ одна з найбільш популярних служб Internet.\n          Популярність електронної пошти пояснюється її оперативністю,\n          дешевизною, доступністю. Перша поштова програма була створена в 1971\n          р. Реєм Томлісоном, американським професором, співробітником компанії\n          DDN, яка розробила мережу ARPANET. До переваг електронної пошти\n          належать : швидкість і надійність доставки кореспонденції; відносно\n          низька вартість послуг; можливість швидко ознайомити широке коло\n          кореспондентів з повідомленням; пересилання не тільки текстових\n          повідомлень, але й програм, графіків, аудіофайлів; економія паперу і\n          т.д. Час одержання листа складається з двох частин : часу, необхідного\n          мережі для доставки листа на поштовий сервер, і часу, необхідного для\n          доставки адресатові.\n        </p>\n        <p>\n          Робота E-mail ґрунтується на протоколах POP3 і SMTP, а також на\n          взаємодії двох поштових програм ¾ поштового сервера і поштового\n          клієнта.\n        </p>\n        <p>\n          POP3 (Post Office Protocol 3, поштовий протокол 3) ¾ протокол для\n          одержання і зберігання повідомлень.\n        </p>\n        <p>\n          SMTP (Simple Mail Transport Protocol, простий протокол передачі пошти)\n          ¾ протокол для передавання повідомлень.\n        </p>\n        <p>\n          Стандарт MIME (Multipurpose Internet Mail Extensions ─ багатоцільові\n          розширення поштового стандарту мережі Internet) описує, яким чином\n          пересилати електронною поштою дані. Типове застосування MIME ─\n          пересилання графічних зображень, аудіо, документів Word, програм і\n          навіть просто текстових файлів, коли важливо, щоб під час пересилання\n          не відбувалося ніяких перетворень даних. MIME також дозволяє\n          розподіляти лист на частини різних типів таким чином, щоб отримувач\n          (поштова програма) міг визначити, що робити з кожною частиною листа.\n        </p>\n        <p>\n          Загальна схема роботи з електронною поштою така : користувач\n          звертається до провайдера, реєструється й одержує адресу електронної\n          пошти. На сервері провайдер створює поштову скриньку користувача, в\n          якій будуть накопичуватися повідомлення користувача. Також можна\n          відкрити поштову скриньку самостійно на безкоштовному сервері. Для\n          відкриття безкоштовної поштової скриньки необхідно пройти реєстрацію\n          на даному сервері та прийняти деякі умови.\n        </p>\n        <p>\n          При використанні електронної пошти кожній поштовій скриньці\n          користувача присвоюється унікальна поштова адреса, яка зазвичай\n          утворюється приєднанням імені користувача до імені самого комп’ютера.\n          Ім’я користувача й ім’я комп’ютера розділяє спеціальний символ @ , що\n          називається «ет комерційне». Регістр букв в адресі значення не має,\n          допускається використання букв латинського алфавіту, цифр і знаків «-»\n          і «_». Пробіли, розділові знаки й символи кирилиці не\n          використовуються. Наприклад, якщо користувач має вхідне ім’я emsworth\n          на комп’ютері blandings.com , то його електронна адреса буде мати\n          вигляд emsworth@blandings.com .\n        </p>\n        <p>\n          Будь-яка система електронної пошти складається з двох головних\n          підсистем : клієнтського програмного забезпечення, з яким\n          безпосередньо взаємодіє користувач, і серверного програмного\n          забезпечення, яке керує прийомом повідомлення, яке керує прийомом\n          повідомлення від користувача-відправника, передаванням повідомлення,\n          направленням повідомлення в поштову скриньку адресата та його\n          збереженням у цій скриньці доти, поки користувач-одержувач його не\n          візьме звідти.\n        </p>\n        <p>\n          Для роботи з електронною поштою існують спеціальні поштові\n          програми-клієнти, наприклад Outlook Express, Internet Mail тощо.\n          Функції поштових програм. · Збирання листів з поштової скриньки на\n          сервері. · Відсилання підготовлених листів. · Сортування прийнятих\n          листів і листів, що відправляються, по папках. · Ведення адресної\n          книги. · Відповідь на листи, що надходять, пересилання листів. ·\n          Створення нового листа. · Можливість прикріплення до листа, що має\n          звичайний текстовий вигляд, картинки чи будь - якого іншого файлу.\n        </p>\n        <p>\n          Правила та етикет електронного листування ─ це частина мережного\n          етикету. 1. Ніколи не довіряйте електронній пошті інформацію, що не є\n          призначеною для всіх. (Ваші повідомлення часто залишаються в резервних\n          копіях файлів на тривалий термін). 2. Будуйте фрази грамотно з точки\n          зору орфографії та граматики. 3. Пам’ятайте про різне сприйняття\n          відправником та одержувачем (Відправник найчастіше сприймає\n          повідомлення як дружню бесіду, одержувач ─ як діловий лист. Електронна\n          пошта забезпечує швидкий контакт, однак при цьому повністю відсутнє\n          супроводження «мовою жестів». Ця проблема в мережі розв’язується за\n          допомогою так званих «смайликів», тобто комбінацій символів ASCII, їх\n          призначення ─ передавати вираз людського обличчя). 4. Не\n          використовуйте цитати, які можуть скривдити людей. 5. Цитуйте у своїй\n          відповіді текст оригінального повідомлення. 6. Правильно заповнюйте\n          поля електронного повідомлення. 7. Пам’ятайте про відображення вашого\n          повідомлення на екрані монітора (Встановлюйте довжину рядка, яка не\n          перевищує 60 символів, щоб повідомлення відображалось на дисплеї\n          практично будь-якого типу. Не пишіть увесь текст у верхньому регістрі,\n          режим великих букв ─ тільки для більшої виразності. Не використовуйте\n          різні види накреслення шрифту). 8. Використовуйте підпис (\n          Рекомендована довжина підпису ─ із зазначенням організації, телефонів\n          тощо ─ до 7 рядків). 9. Пам’ятайте, що користувач в Internet несе\n          відповідальність за зміст своїх повідомлень.\n        </p>\n      </div>\n      <div id=\"42\">\n        <h3>Покоління обчислювальних машин по методу обробки інформації.</h3>\n        <p>\n          По етапах створення ЕОМ виділяють кілька поколінь розвитку\n          комп'ютерної техніки, які формувалися протягом XX в.\n        </p>\n        <p>\n          До першого покоління відносять машини, створені в 1950-і рр. на основі\n          електронних ламп. В цей час були розроблені вітчизняні машини: МЕСМ\n          (мала електронна рахункова машина), БЕСМ (велика електроннолічильні\n          машина), \"Стріла\", серія \"Урал\", М-20. Основним застосуванням перших\n          ЕОМ було виконання науково-технічних розрахунків.\n        </p>\n        <p>\n          Через десятиліття з'явилися ЕОМ, створені на дискретних\n          напівпровідникових приладах (транзисторах). Друге покоління ЕОМ\n          застосовувалося для технічних і економічних розрахунків.\n        </p>\n        <p>\n          Машини третього покоління з'явилися в 1970-і рр. і були розроблені на\n          напівпровідникових інтегральних схемах з малої і середньої ступенем\n          інтеграції (сотні, тисячі транзисторів в одному корпусі). Це покоління\n          ЕОМ початок застосовуватися в управлінні і проведенні економічних\n          розрахунків.\n        </p>\n        <p>\n          Четверте покоління ЕОМ сформувалося в 1980-і рр. на базі великих і\n          надвеликих інтегральних схем - мікропроцесорів (десятки тисяч -\n          мільйони транзисторів в одному кристалі). Метою ЕОМ цього покоління\n          вже було подання інформації та більш широке використання в управлінні.\n        </p>\n        <p>\n          Так, 1990-ті рр. характеризуються створенням ЕОМ з багатьма десятками\n          паралельно працюючих мікропроцесорів, що дозволяють будувати ефективні\n          системи обробки знань. Для цього покоління характерні застосування\n          персональних комп'ютерів, телекомунікаційна обробка даних, комп'ютерні\n          мережі, широке застосування систем управління базами даних, елементи\n          інтелектуальної поведінки систем обробки даних і пристроїв.\n        </p>\n        <p>\n          Створення оптоелектронних ЕОМ з масовим паралелізмом і нейронної\n          структурою відноситься до початку XXI ст. Передбачається, що в\n          комп'ютерах наступного покоління відбудеться якісний перехід від\n          обробки даних до обробки знань.\n        </p>\n      </div>\n      <div id=\"43\">\n        <h3>Правила впорядкування та пошуку даних у базі даних. Приклади.</h3>\n        <p>\n          У ACCESS існує багато способів пошуку потрібних даних під час\n          виконання пошуку конкретного значення, одного запису або групи\n          записів. Для пошуку запису можна прокрутити форму або об’єкт у режимі\n          таблиці або ввести номер потрібного запису в поле номера запису. За\n          допомогою діалогового вікна Пошук можна знайти конкретні записи або\n          певні значення в полях. Якщо потрібно замінити конкретні, виявлені в\n          ході пошуку значення, слід скористатися вікном Замена. За допомогою\n          фільтра можна тимчасово ізолювати й переглянути конкретний набір\n          записів для роботи з ним при відображенні на екрані відкритої форми\n          або таблиці. За допомогою запиту можна працювати з конкретним набором,\n          який задовольняє задані умови записів з однієї або декількох таблиць\n          бази даних. Порядок пошуку значення в таблиці, формі або запиті ACCESS\n          такий :\n        </p>\n        <p>\n          Відкрити таблицю, запит або форму, у яких необхідно виконати пошук.\n          Вибрати поле (стовпець), за яким треба виконати пошук (пошук в одному\n          полі виконується швидше, ніж пошук у всі таблиці або формі). Натиснути\n          кнопку Бинокль; увести в поле Образец значення, яке потрібно знайти.\n          Якщо точне значення для пошуку невідоме, можна використовувати в полі\n          Образец підстановочні знаки; установити в діалоговому вікні Поиск и\n          замена всі інші потрібні параметри; натиснути кнопку Найти далее.\n        </p>\n      </div>\n      <div id=\"44\">\n        <h3>\n          Розподілені системи обробки інформації. Визначення. Призначення.\n        </h3>\n        <p>\n          Распределенная система обработки данных (РСОД) - любая система,\n          позволяющая организовать взаимодействие независимых, но связанных\n          между собой ЭВМ. Эти системы предназначены для автоматизации таких\n          объектов, которые характеризуются территориальной распределенностью\n          пунктов возникновения и потребления информации. Концептуально\n          распределенная обработка подразумевает тот или иной вид организации\n          сети связи и децентрализацию трех категорий ресурсов:\n        </p>\n        <p>\n          · аппаратных вычислительных средств и собственно вычислительной\n          мощности; · баз данных; · управление системой.\n        </p>\n        <p>\n          В распределенных системах обработки данных в той или иной степени\n          осуществляется реализация следующих основных функций: · доступ к\n          ресурсам (вычислительным мощностям, программам, данным и т. п.) с\n          терминалов и из пользовательских программ в режиме «файл-сервер»; ·\n          выполнение заданий и интерактивное общение пользователей с запущенными\n          по их требованию программами в режиме «клиент-сервер»; · сбор\n          статистики о функционировании системы; · обеспечение надежности и\n          живучести системы в целом.\n        </p>\n        <p>\n          Системы, имеющие программы распределенной среды, включают компьютеры,\n          называемые серверами и клиентами. Каждый сервер имеет свою группу\n          клиентов. Программное обеспечение сетевой среды обслуживается и\n          поддерживается сетевыми операционными системами. В роли сервера\n          выступает главный, более мощный компьютер. Распределенная среда\n          требует организации распределенной базы данных и такого\n          инструментария, как распределенная система управления базой данных\n          (РСУБД). Распределенная обработка данных позволила повысить\n          эффективность удовлетворения изменяющейся информационной потребности\n          информационного работника и тем самым обеспечить гибкость принимаемых\n          им решений.\n        </p>\n        <p>\n          Преимущества распределенной обработки данных: • большое число\n          взаимодействующих между собой пользователей, выполняющих функции\n          сбора, регистрации, хранения, передачи и выдачи информации; • снятие\n          пиковых нагрузок с централизованной базы путем распределения обработки\n          и хранения локальных баз данных на разных ЭВМ; • обеспечение доступа\n          информационного работника к вычислительным ресурсам сети ЭВМ; •\n          обеспечение симметричного обмена данными между удаленными\n          пользователями. Введение классификации моделей представления данных на\n          иерархические, сетевые и реляционные отразилось на архитектуре систем\n          управления базами данных и технологии их обработки. Архитектура СУБД\n          описывает ее функционирование как взаимодействие процессов двух типов:\n          клиента и сервера. Распределенная обработка и распределенная база\n          данных не синонимы. Если при распределенной обработке производится\n          работа с базой, то подразумевается, что представление данных, их\n          содержательная обработка, работа с базой на логическом уровне\n          выполняются на персональном компьютере клиента, а поддержание базы в\n          актуальном состоянии — на сервере.\n        </p>\n      </div>\n      <div id=\"45\">\n        <h3>\n          Апаратні, програмні та інформаційні ресурси сучасних мереж. Програмне\n          забезпечення роботи в глобальній мережі Інтернет. Основні послуги\n          глобальної мережі Інтернет\n        </h3>\n        <p>\n          nternet - глобальна комп'ютерна мережа, що охоплює увесь світ.\n          Сьогодні Іnternet має близько 15 мільйонів абонентів у більш ніж 150\n          країнах світу. Щомісяця розмір мережі збільшується на 7-10%. Іnternet\n          утворює як би ядро, що забезпечує зв'язок різних інформаційних мереж,\n          які належать різним установам в усьому світі.\n        </p>\n        <p>\n          Сучасні мережі створюються по багаторівневому принципі. Передача\n          повідомлень у виді послідовності бітів починається на рівні ліній\n          зв'язку й апаратури, причому лінії зв'язку не завжди високої якості.\n          Потім додається рівень базового програмного забезпечення, що керує\n          роботою апаратури. Наступний рівень програмного забезпечення дозволяє\n          наділити базові програмні засоби додатковими необхідними можливостями.\n          Розширення функціональних можливостей мережі шляхом додавання рівня за\n          рівнем приводить до того, що Ви зрештою одержуєте по-справжньому\n          дружній і корисний інструментарій. Функція Internet полягає не лише в\n          тому, щоб зв'язати комп'ютери один з одним. Основне завдання Internet\n          - забезпечити користувача необхідною інформацією і послугами. Для\n          цього використовується технологія клієнт/сервер (англ. client\n          /server). Клієнт - це програма, що приймає інформацію і послуги, які\n          надаються іншими програмами - серверами. Клієнти виступають у ролі\n          споживачів, а сервери - у ролі постачальників. Комп'ютери, на яких\n          запускають програми-сервери, повинні мати досить потужні ресурси,\n          оскільки їм доводиться \"пропускати через себе\" великі обсяги\n          інформації. Будь-який комп'ютер мережі може виступити в ролі клієнта,\n          щойно на ньому буде запущена якась програма-клієнт.\n        </p>\n        <p>\n          Загальна мережеве програмне забезпечення включає: • браузер - програма\n          перегляду веб-сторінок (наприклад, Internet Explorer). Браузер містить\n          такі засоби: програму для роботи з електронною поштою (читання,\n          створення, редагування і відправка поштових повідомлень); програму для\n          роботи з сервером новин (підписка на групу новин, читання новин,\n          створення і пересилання повідомлень), редактор тексту; •\n          HTML-редактори - редактори, призначені для створення веб-сторінок; •\n          графічні веб-засоби - засоби, призначені для оптимізації графічних\n          елементів веб-сторінок; • машинні перекладачі - програмні засоби, що\n          служать для перегляду веб-сторінок на різних мовах; • антивірусні\n          мережеві програми - програми, використовувані для запобігання\n          потрапляння програмних вірусів на комп'ютер користувача або поширення\n          його по локальній мережі фірми. До системного програмного забезпечення\n          відносять: • операційну систему - обов'язкову частину системного\n          програмного забезпечення, що гарантує ефективне функціонування ЕОМ у\n          різних режимах, організуючу виконання програм і взаємодія користувача\n          і зовнішніх пристроїв з ЕОМ; • сервісні програми - програми, які\n          розширюють можливості ОС, надаючи користувачеві і його програмами\n          набір додаткових послуг; • систему технічного обслуговування -\n          систему, яка полегшує діагностику, тестування обладнання та пошук\n          несправностей в ПК. Спеціальні мережні ОС призначені для управління\n          мережею. По своїй організації цей різновид мережевих ОС можна\n          розділити на однорангові (Peer-To-Peer Network) і з виділеним сервером\n          (Dedicated File Server Network). До однорангові відносяться такі\n          мережні ОС, як NetWare Lite, Personal NetWare (Novell), Windows For\n          Workgroups (Microsoft), LANtastic (Artisoft).\n        </p>\n        <p>\n          Послуги комп’ютерної мережі INTERNETINTERNET надає такі основні види\n          послуг: e-mail – електронна пошта; групи новин; списки поштової\n          розсилки; доступ до файлів віддалених комп’ютерів; сеанси зв’язку з\n          іншими комп’ютерами, під’єднаними до INTERNET; пошук інформації в базі\n          даних в оперативному режимі; спілкування з іншими користувачами шляхом\n          використання сервісу Internet Relay Chart; доступ до інформаційної\n          системи World Wide Web (WWW). З додаткових послуг можна виділити\n          наступні: широка передача MultiMedia; RadioInternet; розмовний\n          конференційний зв’язок; безпечні угоди; відеоконференційний зв’язок;\n          безпровідне з’єднання.\n        </p>\n      </div>\n      <div id=\"46\">\n        <h3>\n          IP адреса. Призначення. Дати двійкове представлення IP адреси\n          10.18.52.1\n        </h3>\n        <p>\n          IP-адреса (ай-пі адреса, скорочення від англ. Internet Protocol\n          Address) - мережева адреса вузла в комп'ютерній мережі Інтернет.\n        </p>\n        <p>Є два основних типи:</p>\n        <p>\n          Статична IP-адреса забезпечує можливість передачі даних із\n          застосуванням мережевих протоколів, для роботи яких необхідна\n          наявність у користувача реального IP-адресу в мережі Інтернет. Це\n          необхідно, наприклад, для встановлення шифрованого VPN-з'єднання.\n          Динамічна IP-адреса - призначається автоматично при підключенні\n          пристрою до мережі і використовується протягом обмеженого проміжку\n          часу, як правило, до завершення сеансу підключення. Також виділяють\n          Ipv4 і Ipv6. pv4 - перша основна версія протоколу, яка застосовується\n          для забезпечення роботи величезної частини Інтернету. Відповідно до\n          IPv4, адреси складаються з бінарних чисел 0 і 1. Але вони можуть бути\n          записані у вигляді десяткових чисел, між якими ставиться крапка.\n        </p>\n        <p>\n          4,3 мільярда ipv4 досить велика кількість, але все ж її недостатньо\n          для всіх пристроїв і потреб у всьому світі. Для вирішення цієї\n          проблеми були розроблені IPv6. Вони використовують адресний простір\n          розміром 128 біт. Обидва типи цих адрес Ви можете орендувати в нашій\n          компанії.\n        </p>\n        <p>\n          Кожному вузлу IP мережі призначається 32-розрядна логічна адреса, що\n          називається IP-адресою. IP-адреса має довжину 4 байти і звичайно\n          записується у вигляді чотирьох чисел, що представляють значення\n          кожного байта в десятковій формі і розділених крапками, наприклад,\n          10.18.52.1 – традиційна десяткова форма представлення адреси, а 1010\n          10010 110100 1 – двійкова форма представлення цієї ж адреси.\n        </p>\n      </div>\n      <div id=\"47\">\n        <h3>\n          Ділова графіка. Побудова діаграм і графіків на основі табличних даних\n          у середовищі табличного процесора. Приклади.\n        </h3>\n        <p>\n          Подання даних в графічному вигляді (діаграм та графіків) дозволяє\n          вирішувати різноманітні задачі. Основна перевага такого подання — його\n          наочність (легко можна побачити тенденції до змін, різнома­нітні\n          співвідношення, взаємозв'язок різних процесів тощо). Діаграма являє\n          собою графічне зображення зв'язків між величинами, які порівнюються.\n          Графік — графічне (візуальне) відображення числових даних згідно з\n          вибраними осями та масштабом. Для побудови діаграм та графіків\n          використовують спеціальні прогоа засоби, наприклад програма для\n          проектування й опрацювання електрони таблиць Microsoft Office Excel. У\n          програмі MS Excel термін «діаграма» використовується для позначення\n          усіх видів графічних зображень числових даних. На діаграмі числові\n          дані та­блиці зображуються у вигляді точок, ліній, смуг, стовбців,\n          секторів і в іншій формі. Групи елементів даних, що відбивають вміст\n          комірок одного рядка або стовпця на робочому листі, складають ряд\n          даних. Microsoft Excel дозволяє будувати діаграми різних типів. Вибір\n          правиль­ного типу діаграми — ключовий фактор, що впливає на\n          переконливість гра­фічного зображення. Всього в Excel є 14 типів\n          стандартних і 20 типів нестан­дартних діаграм. Стандартні типи діаграм\n          Excel: гістограма, лінійчата діаграма, графік, кругова діаграма,\n          точкова діаграма, з ділянками, кільцева, пелюсткова, по­верхнева,\n          бульбашкова, біржова, циліндрична, канонічна, пірамідальна.\n        </p>\n        <p>\n          Гістограма. Діаграми цього типу використовують для демонстрації того,\n          як певні значення змінюються у часі, а також для порівняння даних або\n          з'ясування тенденцій. Гістограму краще застосовувати, коли потрібно\n          оціни­ти зміну даних за скінчений період часу.\n        </p>\n        <p>\n          Лінійчата діаграма. Це горизонтальна діаграма, яка схожа на\n          гістогра­му. Демонструє або порівнює окремі числові значення у\n          визначений час. У ній менше уваги приділяється часовому перебігу,\n          подібна діаграма відобра­жає співвідношення окремих компонентів.\n          Лінійчата діаграма нагадує гісто­граму, повернуту на 90°. За наявності\n          багатьох значень даних, які потрібно продемонструвати, краще обрати\n          лінійчату діаграму, аніж гістограму, осо­бливо якщо планується її\n          друкувати.\n        </p>\n        <p>\n          Графік. Діаграму цього типу краще засто­совувати у випадках, коли\n          треба показати зміни у групі значень за довгі проміжки часу, особливо\n          якщо треба акцентувати ува­гу на змінах у часі і темпах змін. Графіки\n          рекомендується використовувати при потре­бі відобразити кілька груп\n          даних одночасно.\n        </p>\n        <p>\n          Точкова діаграма. Діаграма такого типу зазвичай використовується для\n          побу­дови графіка даних наукових досліджень, але її також можна\n          застосовувати і для відтворення будь-якого іншого графіка, на якому,\n          наприклад, потрібно побачити співвідношення між двома числовими\n          змінними і порівняти їх значення у різні проміжки часу.\n        </p>\n        <p>\n          Кругова діаграма. Використання кру­гової діаграми — це найкращий\n          спосіб зо­бразити складові частини якоїсь величини або певні пропорції\n          і співвідношення.\n        </p>\n        <p>\n          Кільцева діаграма. На перший погляд, кільцева діаграм нагадує кругову.\n          На загал це правильно, коли створюється графік з одного ряду даних.\n          Проте на відміну від кругової діаграми кільцева може використовуватися\n          для демонстрації не одного ряду даних, а декількох, і тоді кожне\n          кільце в кільцевій діаграмі відображає окремий ряд даних. Для того,\n          щоб створити в Excel діаграму, необхідно спочатку ввести для неї Дані\n          на робочому аркуші. Після цього виділити ці дані, скориставшись\n          Мастером диаграмм для покрокового створення діаграми, при якому\n          оби­раються її тип і певні параметри. Або скористатися для створення\n          основної діаграми панеллю інструментів Диаграмма.\n        </p>\n      </div>\n      <div id=\"48\">\n        <h3>Мета обчислення (Суперобчислення)</h3>\n        <p>\n          Метаобчислення обумовлені бажанням користувачів мати доступ до\n          ресурсів, недоступних в середовищі одномашинних обчислень. Турчин\n          Валентин Федорович заклав основи метаобчислень, запропонувавши якісно\n          новий метод перетворення і оптимізації програм. Метакомп’ютер (або\n          обчислювальна мережа) утворюється деяким рівнем програмного\n          забезпечення, яке об'єднує комп'ютери і комунікаційні мережі,\n          створюючи ілюзію одного віртуального комп'ютера. Ще один рівень\n          програмного забезпечення на вершині цієї інфраструктури забезпечує\n          метаобчислювальне середовище, що дозволяє програмам використовувати\n          можливості метакомп’ютера. Суть і ролі цих рівнів програмного\n          забезпечення подібні операційним системам, які реалізують віртуальну\n          машину на вершині апаратних ресурсів і підтримують набір інструментів,\n          використовуваних прикладними програмістами.Метатеорія — теорія, що\n          аналізує методи й властивості іншої теорії, так званої предметної або\n          об'єктної теорії. Завдання метатеорії - встановити межі області\n          застосування досліджуваної в ній теорії, відповісти на запитання про\n          її несуперечності та повноті, вивчити або встановити способи введення\n          її нових понять і докази її тверджень тощо. Необхідність створення\n          метатеорії виникла насамперед у застосуванні до математики. Вона була\n          зумовлена потребою з'ясування сенсу понять доказ, аксіома, теорема,\n          дослідження структури математичних теорій і питання про їхню\n          істинність в категорійно-логічних інтерпретаціях\n        </p>\n        <p>\n          Грід-обчислення — це сукупність комп'ютерних ресурсів з декількох\n          місць для досягнення спільної мети. Сітка може розглядатися як\n          розподілена система з неінтерактивних робочих навантажень, які\n          включають в себе велику кількість файлів. Сітка обчислень\n          відрізняється від звичайних високопродуктивних обчислювальних систем,\n          таких як кластерних обчислень тим, що сітки комп'ютерів мають кожен\n          вузол налаштований на виконання іншої задачі / програми. Комп'ютерні\n          сітки також мають тенденцію бути більш різнорідними і географічно\n          розосереджені (таким чином, не фізичні в поєднанні), ніж кластерних\n          комп'ютерів. Незважаючи на те, одна сітка може бути присвячена певній\n          програмі, зазвичай сітка використовується для різних цілей. Сітки\n          часто будуються з загального призначення бібліотеки сітки проміжного\n          програмного забезпечення. Розміри сітки може бути досить великим.\n        </p>\n        <p>\n          рід є формою розподілених обчислень, в якому багато комп'ютерів\n          об'єднані в один потужний віртуальний комп'ютер, і які працюють разом\n          для виконання трудомістких завдань. Для деяких застосувань, «ґрід»\n          обчислення можна розлядати як спеціальний тип паралельних обчислень\n          які покладаються на цілі комп'ютери(обладнані процесорами, пам'ятю,\n          живленням, мережевим інтерфейсом і тд.), під'єднані до комп'ютерної\n          мережі(приватної або публічної) звичайним мережевим інтерфейсом, таким\n          як Ethernet. Це все відрізняє від традиційного поняття\n          суперкомп'ютера, який має багато процесорів, з'єднаних локальною\n          високошвидкісною комп'ютерною шиною.\n        </p>\n      </div>\n      <div id=\"49\">\n        <h3>\n          Інформаційний зв'язок у мережі Інтернет. Ідентифікація комп'ютерів у\n          мережі. Адресація в мережі Інтернет. Провайдери. Способи під'єднання\n          комп'ютерів до глобальної мережі.\n        </h3>\n        <p>\n          Кожний комп'ютер, підключений до Internet, повинен мати свою адресу. В\n          Internet використовуються два типи адрес: цифрові або IР-адреси і\n          доменні (від англ. domain - область, сфера). Розглянемо структуру\n          кожного з цих типів. IP-адреса за смислом аналогічна поштовому\n          індексу, що містить інформацію про місто (перші три цифри) і поштове\n          відділення в ньому (інші три цифри). IP-адреса є послідовністю з\n          чотирьох чисел, розділених крапками: Наприклад, 198.162.201.204. Кожне\n          з чисел займає 1 байт = 8 битів (через це їх часто називають\n          октетами), тобто може набувати значень від О до 255. Ліва частина\n          IP-адреси визначає конкретну мережу в Internet і називається\n          ідентифікатором мережі* (англ. network ID). Права частина IP-адреси\n          визначає конкретний комп'ютер у цій мережі й називається\n          ідентифікатором комп'ютера (англ. host ID). Використовуються три класи\n          IP-адрес: А, В і С. Клас IP-адреси визначає, скільки октетів\n          відводиться під адресу мережі і скільки під адресу комп'ютера.\n          IP-адреси класу А призначені для роботи з невеликою кількістю (до 126)\n          мереж, які містять велику кількість комп'ютерів (до 16 777 214). Через\n          це в таких адресах один октет - найліві-ший - задає адресу мережі, а\n          три правих - адресу комп'ютера в цій мережі. IP-адреси класу В\n          призначені для роботи із середньою кількістю мереж (до 16 384), що\n          містять середню кількість комп'ютерів (до 65 534). У таких адресах два\n          лівих октети - це ідентифікатор мережі, а два правих - ідентифікатор\n          комп'ютера. IP-адреси класу С призначені для роботи з великою\n          кількістю мереж (до 2 097 092), що містять малу кількість комп'ютерів\n          (до 254). У таких адресах три лівих октети містять ідентифікатор\n          мережі, а найправіший - ідентифікатор комп'ютера. До якого класу\n          належить IP-адреса, визначають за значенням першого октету: якщо у\n          першому октеті число від 1 до 126 - це IP-адреса класу А, якщо від 128\n          до 191 - класу В, якщо від 192 до 223 - класу С. Для передачі\n          повідомлень на конкретні комп'ютери в Internet протокол TCP/IP і\n          програми-клієнти використовують IP-адреси. Але для сприйняття\n          користувачем IP-адреса незручна. Людині краще працювати з іменами.\n          Тому користувачі звичайно працюють із доменними адресами - унікальними\n          іменами комп'ютерів у Internet. Доменна адреса, так само як і\n          IP-адреса, складається з частин, розділених крапками. Але на відміну\n          від IP-адреси, що уточнює місце призначення зліва направо, доменна\n          адреса робить це у зворотному порядку - справа наліво: спочатку йде\n          ім'я комп'ютера, а потім - ім'я мережі, в якій він знаходиться. Щоб\n          користувачам Internet було простіше зв'язуватись один з одним, весь\n          простір її адрес розбитий на області - домени. Можливе також\n          розділення за певними ознаками всередині доменів. Доменна адреса\n          комп'ютера включає в себе, як мінімум, два рівні доменів: ·\n          Найправіший - домен першого рівня, · наступний зліва - його піддомен -\n          домен другого рівня тощо. Домен першого рівня визначає країну або тип\n          організації, до якої належить комп'ютер. Існують визначені дволітерні\n          скоречення для доменів країн. Наприклад, Україна - ua; Росія - ru; США\n          - us; Франція - fr. Домени типів організацій звичайно мають трилітерні\n          скорочення. Наприклад, університети та інші навчальні заклади - edu,\n          урядові установи - gov, комерційні організації - com, провайдери\n          послуг Internet - net тощо. Домен другого рівня визначає організацію,\n          яка володіє або керує мережею, що містить даний комп'ютер. У більшості\n          випадків ім'я цього домену збігається з назвою відповідної фірми або\n          її торговою маркою. Ім'я комп'ютера вказує конкретний комп'ютер у\n          мережі, визначеної доменами першого і другого (а можливо, і наступних)\n          і рівнів. Воно реєструється лише в цій мережі і тільки ця мережа І\n          \"відповідальна\" за передачу інформації конкретному\n          комп'ютеру-адресату. Для того щоб мережевий комп'ютер \"зрозумів\", куди\n          слід передати повідомлення, доменна адреса має бути перетворена на\n          IP-адресу. Отже, десь в Internet повинні зберігатися таблиці\n          відповідності доменних і IP-адрес. Звісно, що \"звичайний\" комп'ютер\n          користувача мережі не може і не повинен знати всі IP-адреси в\n          Internet. Такі таблиці зберігаються на спеціальних серверах, які\n          називаються DNS-серверами (скорочення від англ. Domain Name System -\n          система доменних імен). DNS-сервери розкидані по всьому Internet.\n          Кожний з них зберігає інформацію про велику кількість комп'ютерів в\n          Internet і здатний миттєво перетворити доменне ім'я на IP-адресу. Якщо\n          IP-адреса запитаного комп'ютера не відома даному DNS-серверу, він\n          звернеться до найближчого DNS-сервера і далі за ланцюжком, доки\n          потрібна адреса не буде знайдена. Весь процес забиратиме лише кілька\n          секунд. Під час налагоджування комп'ютера для роботи в Internet\n          користувач повинен указати адресу одного із DNS-серверів (таку адресу\n          можна отримати у провайдера послуг Internet або в адміністратора\n          локальної мережі).\n        </p>\n        <p>\n          Постачальник послуг Інтернету (англ. Internet Service Provider, ISP),\n          також провайдер послуг Інтернету, надавач послуг Інтернету,\n          Інтернет-провайдер (від англ. to provide — забезпечувати, надавати\n          доступ) — організація, яка надає послуги доступу та передачі\n          (інформації) певними інформаційними каналами.\n        </p>\n        <p>\n          Послуги інтернет-провайдера: • доступ до Інтернету по комутованих\n          лініях надійного зв'язку • надання дискового простору для зберігання\n          та забезпечення роботи сайтів (хостінг) • підтримка сервісів\n          електронних поштових скриньок чи віртуального поштового сервера •\n          розташування обладнання клієнтів на власних технічних потужностях та\n          лініях зв'язку (колокація) • оренда відокремлених та віртуальних\n          серверів, резервування даних тощо\n        </p>\n        <p>\n          Для під’єднання до мережі можна скористатись телефонними, кабельними\n          каналами або каналами радіозв’язку. Розглянемо найпоширеніші способи:\n        </p>\n        <p>\n          Найпоширенішими способами на сьогоднішній день є: Модемне з'єднання\n          (Комутований доступ) – Dial-Up, ADSL. З'єднання по виділеній лінії\n          (оптоволоконний кабель чи «скручена пара»). GPRS – доступ через\n          мобільний телефон. Радіодоступ. Супутниковий Інтернет.\n        </p>\n        <p>\n          Вони різняться між собою за принципом роботи, швидкістю передачі\n          даних, надійністю, складністю налаштування обладнання і, звичайно ж,\n          ціною. Основною характеристикою будь-якого під’єднання до Інтернету є\n          швидкість передачі даних. Вона вимірюється в кількості інформації, що\n          передається користувачеві за одиницю часу (за одну секунду) і,\n          зазвичай, вимірюється в кілобайтах/сек (Kb/s) або кілобітах/сек\n          (kbps). Для високошвидкісних каналів швидкість вимірюється вже в\n          Мегабітах або Мегабайтах в секунду. Загалом доступ до Інтернету\n          постійно дешевшає. В великих містах завдяки наявності будинкових\n          мереж, конкуренції багатьох провайдерів, великої кількості\n          користувачів – послуги доступу в Інтернет є значно дешевшими, ніж в\n          регіонах.\n        </p>\n      </div>\n      <div id=\"50\">\n        <h3>Математичне забезпечення обчислювальних систем.</h3>\n        <p>\n          Математичне забезпеченнявключає сукупність математичних методів,\n          моделей і алгоритмів для розв’язку задач управління і обробки\n          інформації із застосуванням обчислювальної техніки. Математичне\n          забезпечення містить засоби математичного забезпечення, методи вибору\n          розв’язування, технічну документацію, персонал (спеціалістів цієї\n          галузі). До засобів математичного забезпечення відносяться: моделі\n          процесів управління, алгоритми розв’язку задач управління, методи\n          оптимізації за багатьма критеріями, методи математичного\n          програмування, математичної статистики, теорії масового обслуговування\n          та інші. До методів вибору рішення математичного забезпечення\n          інформаційної системи відносяться методи вибору типів алгоритмів,\n          оцінки їх точності, швидкодії і складності. Технічна документація\n          включає описи задач і алгоритмів, постановки задач, описи пакетів\n          прикладних програм, тести і контрольні приклади. Спеціалісти\n          математичного забезпечення займаються постановкою задач та\n          використання математичних аналітичних і числових методів.\n        </p>\n      </div>\n      <div id=\"51\">\n        <h3>\n          Робота з таблицями в середовищі текстового процесора.Автоматичне\n          форматування таблиці. Створення нового стилютаблиці. Таблиця і текст,\n          їх взаємне перетворення. Приклади.\n        </h3>\n        <p>\n          Таблиці призначені для наочного подання інформації та структурування\n          даних для подальшого аналізу, виконання нескладних математичних\n          обчислень з даними таблиці. Елементами таблиці є осередки, рядки,\n          стовпці, рамки і дані осередків. За допомогою меню Таблиця можна\n          створювати, форматувати та редагувати таблиці. Вибравши пункт меню\n          Вставити таблицю і задавши кількість стовпців і рядків, таблиця\n          вставляється в документ. Вона з'явиться в тому місці, де знаходився\n          курсор. Для зміни формату таблиці необхідно викликати на екрані панель\n          інструментів Таблиці і межі, виділити рядки або стовпці, формат яких\n          треба змінити. За допомогою панелі інструментів змінюється тип і\n          товщина ліній, колір і тип кордонів, колір заливки та ін Для\n          об'єднання елементів таблиці використовується пункт меню Об'єднати\n          комірки. Для форматування таблиць використовується контекстне меню,\n          попередньо виділивши необхідні рядки або стовпці. Для переміщення по\n          таблиці використовується клавіша Tab (вперед) або Shift + Tab (назад),\n          або клавіші управління курсором. Розмір осередків змінюють за\n          допомогою перетягування кордонів.\n        </p>\n      </div>\n      <div id=\"52\">\n        <h3>Локальна мережа. Визначення. Призначення.</h3>\n        <p>\n          Лока́льна комп'ю́терна мере́жа (англ. Local Area Network (LAN)) являє\n          собою об'єднання певного числа комп'ютерів на відносно невеликій\n          території. В порівнянні з глобальною мережею (WAN), локальна мережа\n          зазвичай має більшу швидкість обміну даними, менше географічне\n          покриття та відсутність необхідності використовувати запозичену\n          телекомунікаційну лінію зв'язку. Локальна комп'ютерна мережа —\n          комп'ютерна мережа для обмеженого кола користувачів, що об'єднує\n          комп'ютери в одному приміщенні або в рамках одного підприємства.\n        </p>\n        <p>\n          Завдання, які вирішують локальні мережі Локальні мережі вирішують такі\n          задачі: Радіус дії обмежується невеликими географічними відстанями.\n          Надає множинний доступ до спільного передавального середовища. Права\n          користувача надаються локальним адміністратором. Надає постійний\n          доступ до сервісів локальної мережі. Фізично з'єднує пристрої на\n          невеликій відстані. Існують такі поширені реалізації локальних мереж:\n          Ethernet — локальна мережа з шинною топологією і випадковим методом\n          доступу. Token Ring — кільцева мережа з маркерним методом доступу.\n          FDDI — технологія побудови комп'ютерних мереж, що використовує для\n          передачі сигналу оптоволоконний кабель.\n        </p>\n        <p>\n          У локальних мережах застосовують такі мережеві пристрої: Концентратори\n          Комутатори Повторювачі Мости Маршрутизатори\n        </p>\n      </div>\n      <div id=\"53\">\n        <h3>\n          Поняття про комп'ютерні віруси та їх класифікація. Антивірусні\n          програми та їх застосування. Профілактика зараження комп'ютерними\n          вірусами.\n        </h3>\n        <p>\n          Комп'ютерний вірус (англ. computer virus) — комп'ютерна програма, яка\n          має здатність до прихованого самопоширення. Одночасно зі створенням\n          власних копій віруси можуть завдавати шкоди: знищувати, пошкоджувати,\n          викрадати дані, знижувати або й зовсім унеможливлювати подальшу\n          працездатність операційної системи комп'ютера. Розрізняють файлові,\n          завантажувальні та макро-віруси. Можливі також комбінації цих типів.\n          Нині відомі десятки тисяч комп'ютерних вірусів, які поширюються через\n          мережу Інтернет по всьому світу.\n        </p>\n        <p>\n          Комп'ютерні віруси бувають чотирьох типів: Шкідник Знищувач Хробак\n          Жарт Комбінований\n        </p>\n        <p>\n          Шкідник Вірус шкідник — робить якусь шкоду користувачу аби\n          роздратувати. Вірус шкідник може зробити наступні дії: Перемісити\n          вказівник миші на протилежну сторону від справжньої Вимкнути мишу\n          Вимкнути клавіатуру Заборонити постачання відео сигналу Відкривати\n          програму без команди користувача Відкривати вкладку у браузері без\n          команди користувача Тощо Знищувач Вірус який знищує: Системні файли\n          Документи Утиліти Ігри Відеозаписи Музику Фотографії Драйвери Тощо\n          Жарт Вірус-жарт — не завдає шкоди комп'ютеру, а просто лякає\n          користувача. Хробак комп'ютерний — це саморозповсюджувана програма,\n          яка може подолати всі три етапи розповсюдження самостійно (звичайний\n          хробак), або використовує агента-користувача тільки на 2-му етапі\n          (поштовий черв'як). Комбінований Комбінований — це поєднання двох або\n          більше типів вірусів.\n        </p>\n        <p>\n          Антивірусна програма (антивірус) — спеціалізована програма для\n          знаходження комп'ютерних вірусів, а також небажаних (шкідливих)\n          програм загалом та відновлення заражених (модифікованих) такими\n          програмами файлів, а також для профілактики — запобігання зараження\n          (модифікації) файлів чи операційної системи шкідливим кодом.\n        </p>\n        <p>\n          Основні завдання Сканування файлів і програм в режимі реального часу\n          Сканування комп'ютера за потребою Сканування інтернет-трафіку\n          Сканування електронної пошти Захист від атак ворожих веб-вузлів\n          Відновлення пошкоджених файлів\n        </p>\n      </div>\n      <div id=\"54\">\n        <h3>\n          Клієнт-серверна система. Призначення. Поняття клієнту та серверу.\n        </h3>\n        <p>\n          Архітектура клієнт-сервер є одним із архітектурних шаблонів\n          програмного забезпечення та є домінуючою концепцією у створенні\n          розподілених мережних застосунків і передбачає взаємодію та обмін\n          даними між ними. Вона передбачає такі основні компоненти: набір\n          серверів, які надають інформацію або інші послуги програмам, які\n          звертаються до них; набір клієнтів, які використовують сервіси, що\n          надаються серверами; мережа, яка забезпечує взаємодію між клієнтами та\n          серверами.\n        </p>\n        <p>\n          Сервери є незалежними один від одного. Клієнти також функціонують\n          паралельно і незалежно один від одного. Немає жорсткої прив'язки\n          клієнтів до серверів. Більш ніж типовою є ситуація, коли один сервер\n          одночасно обробляє запити від різних клієнтів; з іншого боку, клієнт\n          може звертатися то до одного сервера, то до іншого. Клієнти мають\n          знати про доступні сервери, але можуть не мати жодного уявлення про\n          існування інших клієнтів.\n        </p>\n        <p>\n          уже важливо ясно уявляти, хто або що розглядається як «клієнт». Можна\n          говорити про клієнтський комп'ютер, з якого відбувається звернення до\n          інших комп'ютерів. Можна говорити про клієнтське та серверне програмне\n          забезпечення. Нарешті, можна говорити про людей, які бажають за\n          допомогою відповідного програмного та апаратного забезпечення отримати\n          доступ до тієї чи іншої інформації. Загальноприйнятим є положення, що\n          клієнти та сервери — це перш за все програмні модулі. Найчастіше вони\n          знаходяться на різних комп'ютерах, але бувають ситуації, коли обидві\n          програми — і клієнтська, і серверна, фізично розміщуються на одній\n          машині; в такій ситуації сервер часто називається локальним.\n        </p>\n      </div>\n      <div id=\"55\">\n        <h3>\n          Вкорінені та зв'язані об'єкти слайдів комп'ютерної презентації.\n          Способи демонстрації слайдів. Приклади.\n        </h3>\n        <p>\n          Презентація — це набір слайдів, де є текст, графічні об'єкти, рисунки,\n          кнопки тощо. Презентація може містити звук, відео та анімацію.\n        </p>\n        <p>\n          Зв'язаний об'єкт — це об'єкт, створений у вихідному файлі та\n          вставлений у кінцевий файл із підтриманням зв'язку між цими двома\n          файлами. Зв'язаний об'єкт у кінцевому файлі може бути оновлений у разі\n          оновлення вихідного файла. Зв'язані дані зберігаються у вихідному\n          файлі. Кінцевий файл •зберігає лише відомості про розташування\n          вихідного файла та ві­дображує подання зв'язаних даних. Використовуйте\n          зв'язані об'єкти, коли має значення розмір файла.\n        </p>\n        <p>\n          Впроваджений (вкорінений) об'єкт— це дані (об'єкт), які міс­тяться у\n          вихідному файлі та вставлені в кінцевий файл. Після впровадження\n          об'єкт стає частиною кінцевого файла. Зміни, які вносяться до\n          впровадженого об'єкта, відбиваються на кінцевому файлі. -\n          Відрізняються такі об'єкти один від одного, головним чином, місцем\n          зберігання даних і способом оновлення даних після встановлення об'єкта\n          в кінцевий файл. Якщо об'єкт є впровадженим, дані в кінцевому файлі не\n          змі­нюються, коли'змінюється вихідний файл. Після встановлення\n          впроваджені об'єкти перестають належати до вихідного файла.\n        </p>\n        <p>\n          Кінцевий файл — це файл, в який вставлено зв'язаний або впроваджений\n          об'єкт. Вихідний файл містить дані, які викори­стовуються для\n          створення цього об'єкта. У разі зміни даних у кінцевому файлі у\n          вихідному файлі вони не змінюються.. Вкорінені та зв'язані об'єкти\n          використовуються для додаван­ня до файлів інших файлів (або частин\n          файлів), створених у про­грамах Місго5оЛ Ойісе або в будь-яких інших\n          програмах, які під­тримують зв'язування та впровадження об'єктів.\n          Створення зв'язаного або впровадженого об'єкта з частини на­явного\n          файла: 1. Відкрийте файл із даними, які будуть застосовані для\n          ство­рення зв'язаного або впровадженого об'єкта, а потім виділіть\n          потрібні дані. 2. На панелі інструментів Стандартна натисніть кнопку\n          Ко­піювати або Вирізати. 3. Перейдіть до файла, в який необхідно\n          помістити дані, а по­тім клацніть те місце, в якому ці дані повинні\n          відображуватися. 4. У меню Змінити виберіть команду Спеціальна вставка\n          . 5. Виконайте одну з таких дій.\n        </p>\n        <p>\n          Оскільки презентації слугують для зацікавлення слухачів ілю­страціями\n          та ефектами під час доповіді, для рекламування пос­луг, продуктів\n          тощо, то важливим, окрім її створення, є і вміння її продемонструвати.\n          Їх демонструють на екрані монітора чи на великому екрані у залі за\n          допомогою спеціального обладнання. Перед демонстрацією треба задати\n          додаткові ефекти демонст­рації командою Вигляд — Перехід слайдів, а\n          також спосіб зміни слайдів на екрані за допомогою клацання миші чи\n          автозміною за фіксований проміжок часу. Запуск демонстрації виконують\n          командою Показ слайдів/По­чати показ або перейшовши в режим перегляду\n          слайдів за допомогою кнопки, яка є внизу екрана. Потрібно стежити, щоб\n          перед переглядом активним був перший слайд. У режимі демонстрації\n          слайди можуть з'являтися внаслідок клацання кнопкою миші будь-де на\n          слайді (якщо не задано авто-перехід). Керувати процесом демонстрації\n          можна також за допо­могою меню стандартної кнопки керування, яка є у\n          лівому ниж­ньому кутку слайда (але це незручно). Якщо користувача не\n          за­довольняють можливості стандартної кнопки, він має змогу створити\n          на слайді свої кнопки керування. Для створення кно­пок є команда\n          Керуючі кнопки в меню Показ слайда. Після вибору кнопки із\n          запропонованого меню її треба налаштувати для реагу­вання на подію\n          клацання миші або на вказівник миші. Кнопці можна назначити дію\n          переходу: на наступний слайд, на поперед­ній, на перший, на осіянній,\n          на заданий, замнчиьі демонстра­цію, запустити деяку іншу програму.\n          Перехід можна супроводжу­вати звуковими ефектами. Також під час показу\n          слайдів можна застосувати ефект «При­хований слайд», який дає\n          можливість підготувати деякі додаткові презенташйні матеріали, які\n          можуть бути використані або про­пущені у демонстрації залежно від\n          зацікавленості та реакції аудиторії. Одну і ту саму презентацію можна\n          адаптувати для різних аудиторій, створивши довільний показ. Довільний\n          показ — це слайди, згруповані у презентацію, які можна демонструвати\n          незалежно від усього показу, або групи слайдів у презентації, на які\n          виконано гіперпосилання.\n        </p>\n      </div>\n      <div id=\"56\">\n        <h3>Застосування GRID систем. Недоліки.</h3>\n        <p>\n          Грід-обчислення — це сукупність комп'ютерних ресурсів з декількох\n          місць для досягнення спільної мети. Сітка може розглядатися як\n          розподілена система з неінтерактивних робочих навантажень, які\n          включають в себе велику кількість файлів. Сітка обчислень\n          відрізняється від звичайних високопродуктивних обчислювальних систем,\n          таких як кластерних обчислень тим, що сітки комп'ютерів мають кожен\n          вузол налаштований на виконання іншої задачі / програми. Комп'ютерні\n          сітки також мають тенденцію бути більш різнорідними і географічно\n          розосереджені (таким чином, не фізичні в поєднанні), ніж кластерних\n          комп'ютерів. Незважаючи на те, одна сітка може бути присвячена певній\n          програмі, зазвичай сітка використовується для різних цілей. Сітки\n          часто будуються з загального призначення бібліотеки сітки проміжного\n          програмного забезпечення. Розміри сітки може бути досить великим.[1]\n        </p>\n        <p>\n          Ґрід є формою розподілених обчислень, в якому багато комп'ютерів\n          об'єднані в один потужний віртуальний комп'ютер, і які працюють разом\n          для виконання трудомістких завдань. Для деяких застосувань, «ґрід»\n          обчислення можна розлядати як спеціальний тип паралельних обчислень\n          які покладаються на цілі комп'ютери(обладнані процесорами, пам'ятю,\n          живленням, мережевим інтерфейсом і тд.), під'єднані до комп'ютерної\n          мережі(приватної або публічної) звичайним мережевим інтерфейсом, таким\n          як Ethernet. Це все відрізняє від традиційного поняття\n          суперкомп'ютера, який має багато процесорів, з'єднаних локальною\n          високошвидкісною комп'ютерною шиною.\n        </p>\n        <p>\n          Грід-обчислення об'єднує комп'ютери з кількох адміністративних доменів\n          для досягнення спільної мети, щоб вирішити одну задачу, а потім може\n          зникнути так само швидко. Однією з основних стратегій розподілених\n          обчислень є використання проміжного програмного забезпечення, щоб\n          розділити і розподілити частини програми між декількома комп'ютерами,\n          іноді до багатьох тисяч. Грід-обчислення включає обчислення в\n          розподіленому режимі, який також може включати агрегацію\n          великомасштабних кластерів. Розмір сітки може варіюватися від\n          невеликих обмежується мережею комп'ютерних робочих станцій в межах\n          корпорації, наприклад, у великих, громадських співпраці з багатьох\n          компаній і мереж. \"Поняття обмеженою сітки може бути також відомо як\n          співпраця Intra-вузлів у той час як поняття більшої, ширшої мережі\n          таким чином, може ставитися до співпраці інтер-вузлів\".[2] Сітки є\n          однією з форм розподілених обчислень відповідно до якого \"супер\n          віртуальний комп'ютер\" складається з безлічі мережевих слабозв'язаних\n          комп'ютерів, що діють разом для виконання дуже великі завдання. Ця\n          технологія була застосована для інтенсивних обчислень наукові,\n          математичні та наукові проблеми за допомогою добровольця обчислень, і\n          він використовується в комерційних підприємствах для таких\n          різноманітних застосувань, як створення ліків, економічне\n          прогнозування, аналіз сейсмічних даних і назад обробки даних в офісі\n          підтримки e-комерції та веб-сервісів. Координаційні додатки на сітках\n          може бути складним завданням, особливо при координації потоку\n          інформації в розподілених обчислювальних ресурсів. Системи\n          документообігу сітки були розроблені як спеціалізована форма системи\n          управління робочими процесами, розроблена спеціально для створення і\n          виконати ряду кроків обчислювальної або дані маніпуляції, або робочий\n          процес, в контексті Grid.\n        </p>\n      </div>\n      <div id=\"57\">\n        <h3>\n          Етапи розв'язування задачі з використанням комп'ютера. Поняття\n          інформаційної моделі задачі.\n        </h3>\n        <p>\n          Розв’язання задач в будь-якій сфері діяльності – це завжди отримання\n          деяких результатів. А процес отримання результатів спирається на\n          деякий спосіб дій і пропонує використання визначених засобів. Одним із\n          нових засобів розв’язання різних задач стають сучасні комп’ютери –\n          універсальні пристрої опрацювання і накопичування даних.\n          Універсальність комп’ютерів полягає в тому, що вони можуть\n          опрацьовувати будь-які дані і розв’язувати задачі в будь-якій\n          предметній області.\n        </p>\n        <p>Розв’язання задачі на комп’ютері проходить в декілька етапів.</p>\n        <p>1-й етап – постановка задачі.</p>\n        <p>2 -й етап – розробка математичної моделі.</p>\n        <p>\n          3- й етап – конструювання. На основі математичної моделі конструюється\n          алгоритм. Про поняття алгоритму і його властивостях і способи\n          конструювання ми будемо вивчати на наступних уроках. А тут даний етап\n          виконаємо для нашої задачі без детальних пояснень.\n        </p>\n        <p>\n          4- й етап – перевід алгоритму в програму. Дальше дослідження\n          інформаційної моделі, записаної у вигляді алгоритму, можна проводити\n          різними способами. Можна закодувати алгоритм на мові програмування або\n          використати спеціальні програмні додатки.\n        </p>\n        <p>\n          5- й етап розв’язування задачі полягає в проведенні комп’ютерного\n          експерименту. Якщо ми досліджуємо інформаційну модель у вигляді\n          програми в деякому середовищі програмування, то до цього етапу\n          відносяться: завантаження вибраного середовища програмування; набір\n          тексту програми; збереження цього тексту на диску; запуск програми на\n          виконання. Причому необхідно запускати програму на виконання декілька\n          разів – при різних значеннях початкових умов. Можна скористатись і\n          готовими програмними засобами. Так, наприклад, якщо інформаційна\n          модель досліджується в електронних таблицях, то різні числові дані\n          вводяться у відповідні комірки.\n        </p>\n        <p>\n          6- й етап полягає в аналізі отриманих результатів і корегуванні\n          досліджуваної моделі. Для нашої задачі очевидно, що по-перше, доцільно\n          отримати значення координат для послідовності моментів часу і\n          по-друге, немає фізичного сенсу обчислення координат тіла після його\n          падіння на поверхню землі.\n        </p>\n      </div>\n      <div id=\"58\">\n        <h3>Текстовий редактор WORD. Призначення.</h3>\n        <p>\n          Microsoft Word (повна назва Microsoft Office Word, MS Word, WinWord\n          або просто Word, укр. Слово) — текстовий процесор, що випускається\n          фірмою Майкрософт, входить до складу офісного пакету «Microsoft\n          Office». Перша версія, «Multi Tool Word», була написана для Xenix\n          [3][4][5] і перенесена під DOS у 1983 році. Пізніше створено версії\n          для Apple Macintosh (1984), Microsoft Windows (1989), SCO UNIX, OS/2.\n        </p>\n        <p>\n          Назначение и возможности: • Создание и редактирование текстовых\n          документов с использованием большого выбора шрифтов и стилей текста. •\n          Оформление текстовых документов (создание заголовков, оглавления,\n          колонтитулов, формирование предметного указателя, расстановка\n          переносов, расположение текста на странице; настройка шрифтов и\n          параметров абзаца, а также создание текстовых документов с\n          использованием различных шаблонов (как системных, так и\n          пользовательских), предназначенных специально для соответствующего\n          оформления документа). • Вставка в текст требуемых элементов\n          (специальных символов, рисунков, примечаний, гиперссылок, сносок и т.\n          п.) • Работа с блоками текста (копирование, вставка, перемещение\n          фрагментов текста с использованием возможностей буфера обмена). •\n          Представление некоторых фрагментов текстового документа в виде\n          таблицы, созданной в соответствии с заданными параметрами. • Настройка\n          параметров представления текстового документа. • Просмотр статистики\n          документа (количество страниц текстового документа, количество\n          символов в документе, количество абзацев и др.). • Автоматическая\n          проверка формируемого документа на наличие в нем грамматических,\n          стилистических и т. п. ошибок с возможностью оперативного их\n          устранения • Создание рисунков с использованием специально\n          предназначенной функциональности. • Сохранение сформированного\n          документа в разных форматах. • Вывод на печать готового текстового\n          документа (при необходимости – предварительный просмотр документа\n          перед его распечаткой).\n        </p>\n      </div>\n      <div id=\"59\">\n        <h3>\n          Виконання обчислень у середовищі табличного процесора. Використання\n          логічних функцій та операцій для опрацювання даних, поданих у таблиці.\n          Приклади.\n        </h3>\n        <p>\n          Уведення формул аналогічне до введення текстів. Під час уведення\n          формул потрібно дотримуватись наступних правил: – Для позначення\n          математичних дій використовуються такі оператори: + – додавання; – –\n          віднімання; * – множення; / – ділення; ^ – піднесення до степеня; % –\n          знаходження відсотків; – У формулах не можна пропускати оператор\n          множення, як іноді записують в зошити з математики; – Пріоритет\n          операцій збігається з порядком виконання операцій, прийнятим у\n          математиці, за окремими винятками; – Операція знаходження протилежного\n          числа має вищий пріоритет, ніж операція піднесення до степеня. – Для\n          обчислення відсотків від числа потрібно виконати множення числа на ці\n          відсотки, увівши у формулу після кількості відсотків знак %; – Для\n          змінення порядку виконання дій використовують круглі дужки; – Формулу\n          потрібно записувати у вигляді рядка символів (так званий лінійний\n          запис виразу);\n        </p>\n        <p>\n          Електронна таблиця для обчислення значення функції у = 2х + 5 Для\n          заповнення рядку значень х використайте маркер автозаповнення. Для\n          цього введіть в першу клітинку-10 – вказівником миші натисніть на знак\n          маркеру авто заповнення (хрестик чорного кольору) – утримуючи ліву\n          клавішу миші протягніть на потрібну кількість клітинок – в меню, що\n          з’явиться, оберіть пункт Заповнити В клітинку В2 введіть\n          формулу=2*В1+5. Потім аналогічно з попереднім пунктом, використовуючи\n          маркер автозаповнення, скопіюйте формулу вправо на потрібну кількість\n          клітинок.\n        </p>\n      </div>\n      <div id=\"60\">\n        <h3>\n          Використання різних форматів зберігання даних. Вказати який формат для\n          зберігання яких даних використовується. DOC, JPG, PDF, HTML, AVI, PAS.\n        </h3>\n        <p>\n          Такие файлы содержат исходный код, написанный на одном из двух похожих\n          языков программирования: Pascal или Object Pascal.\n        </p>\n      </div>\n      <div id=\"61\">\n        <h3>\n          Етапи розвитку обчислювальної техніки та галузі застосування\n          комп'ютерів.\n        </h3>\n        <p>\n          Перше покоління ЕОМ. У машинах цього покоління (сорокові роки XX ст.)\n          використовувалися електронно-вакуумні лампи як основні елементи\n          електронних схем. Лампи, в основному, замі­нили електромеханічні реле,\n          тому швидкодія обчислювальних машин значно зросла. Першою потужною ЕОМ\n          такого роду була ЕНІАК (США). Однак у ній, як і в інших перших ЕОМ,\n          був сер­йозний недолік — програма, що виконувалась, не зберігалася в\n          пам'яті машини, а набиралася у складний спосіб за допомогою зовнішніх\n          перемичок. У 1945 р. з'явилася відома робота матема­тика фон Неймана,\n          у якій він сформулював загальні принципи роботи обчислювальних\n          пристроїв. Усі наступні ЕОМ створюва­лися з використанням цих\n          принципів, згідно з якими програма мала зберігатися в пам'яті машини.\n          Характерними рисами ЕОМ 1-го покоління є застосування електронних ламп\n          у цифрових схемах, великі габарити, а також трудомісткий процес\n          програмуван­ня.\n        </p>\n        <p>\n          Друге покоління ЕОМ. Коли в середині 50-х років на зміну електронним\n          лампам прийшли напівпровідникові прилади, то ЕОМ почали переводити на\n          напівпровідники. Напівпровіднико­ві (транзистори, діоди) були значно\n          компактніші від електрона них ламп, мали більший термін служби і\n          споживали набагато менше енергії. Найпоширенішими машинами 2-го\n          покоління були «Еліот» (Англія), «Сіменс» (ФРН), «Стретч» (США). У\n          СРСР були розроблені і широко використовувалися «Раздан-2», серія\n          машин «Минск», «Урал», «Наири», «Мир». Найдоскона­лішою машиною цього\n          покоління була БЭСМ-6, що виконувала понад 1 млн операцій за секунду.\n          ЕОМ 2-го покоління вирізня­ються застосуванням напівпровідникових\n          елементів і використан­ням алгоритмічних мов програмування.\n        </p>\n        <p>\n          Третє покоління ЕОМ. Чергова зміна поколінь ЕОМ відбулася наприкінці\n          60-х років під час заміни напівпровідникових прила­дів у пристроях ЕОМ\n          на інтегральні схеми. Інтегральна схема (мікросхема) — це невелика\n          пластинка кристалу. кремнію, на якій уміщаються сотні і тисячі\n          транзисторів, діодів, конденсато­рів тощо. Застосування інтегральних\n          схем дало змогу збільшити кількість електронних елементів в ЕОМ без\n          збільшення реальних розмірів машин. Швидкодія ЕОМ зросла до 10 млн.\n          операцій за секунду. Характерними рисами ЕОМ третього покоління є\n          засто­сування інтегральних схем і можливість використання розвинутих\n          мов програмування (мов високого рівня).\n        </p>\n        <p>\n          Четверте покоління ЕОМ. З удосконаленням мікросхем збіль­шувалася їхня\n          надійність і щільність розміщених у них елемен­тів. В основі ЕОМ\n          четвертого покоління лежать великі інтеграль­ні схеми (ВІС). У цих\n          схемах на 1см2 приходиться кілька десятків тисяч елементів. Завдяки\n          ВІС стало можливим на одному ма­лесенькому кристалі кремнію розмістити\n          таку велику електронну схему, як процесор ЕОМ. Однокристальні\n          процесори згодом стали називати мікропроцесорами. Перший мікропроцесор\n          був створений компанією Іпtel (США) у 1971 р. Мікропроцесори\n          спричинили появу міні-ЕОМ, а потім і персональних комп'ютерів. ЕОМ\n          4-го покоління характеризуються застосуван­ням мікропроцесорів,\n          побудованих на великих інтегральних схемах.\n        </p>\n        <p>\n          П'яте покоління ЕОМ. Починаючи із середини 90-х років, у потужних\n          комп'ютерах починають застосовуватися ВІСсупер-масштабу. Багато\n          фахівців почали говорити про комп'ютери 5-го покоління. Гадають, що\n          обчислювальними машинами 5-го поко­ління можна буде легко керувати —\n          користувач зможе просто го­лосом подавати машині команди. Характерною\n          рисою комп'ютерів п'ятого покоління має бути використання штучного\n          інтелекту і природних мов спілкування.\n        </p>\n        <p>\n          Основні галузі застосування коми 'ютерів такі: • Обробка інформації з\n          великою швидкістю і точністю; • Збереження великого об'єму\n          різноманітної інформації; • Створення місцевих і глобальних мереж\n          передачі інфор­мації; • Доставка інформації споживачу на будь-яку\n          відстань.\n        </p>\n      </div>\n      <div id=\"62\">\n        <h3>\n          Багаторівневі системи програмування в сучасних обчислювальних\n          системах. Вказати рівні програмування.\n        </h3>\n        <p>\n          БАГАТОРІВНЕВА СТРУКТУРА ЕОМ — репрезентація електронної обчислювальної\n          машини (взагалі обчислювальної системи) як складної системи з\n          декомпозицією її структури на певну кількість їєрархічних рівнів з\n          метою спрощення процесів аналізу та синтезу.\n        </p>\n        <p>\n          Розробка обчислювальної частини ЕОМ ведеться зазвичай на наступних\n          рівнях: архітектурний рівень — розробка загальної концепції\n          обчислювальної машини, системи команд процесора і його програмної\n          моделі, визначення інформаційних потоків між процесорами, ієрархією\n          запам’ятовуючих пристроїв, пристроями вводу-виводу. Визначення\n          стандартів в обчислювальній підсистемі й підсистемі вводу-виводу\n          рівень регістрових пересилань — конкретизація інформаційної й керуючої\n          частин обчислювальної системи в термінах регістрів, обчислювальних\n          операцій, потоків даних та управління і операцій пересилання даних між\n          регістрами. логічний рівень — подання структур ЕОМ у вигляді набору\n          логічних вентилів і зв'язків між ними. Поведінка системи описується в\n          термінах алгебри логіки (для комбінаційних схем), таблиць переходів\n          (для схем з пам'яттю). електричне або схемний рівень — подання ЕОМ у\n          вигляді набору електричних схем. Поведінка машини описується законами\n          електротехніки.\n        </p>\n      </div>\n      <div id=\"63\">\n        <h3>\n          Використання різних типів об'єктів (текстових, графічних, числових,\n          звукових, відео) для створення презентації. Приклади.\n        </h3>\n        <p>\n          Слайди є складними об'єктами, які монтує користувач. Слайд може\n          містити елементи таких трьох основних типів: 1) кадри з текстовою\n          інформацією; 2) мультимедійні об'єкти: картинки,, звук, відео; 3)\n          кнопки керування процесом демонстрації.\n        </p>\n        <p>\n          Слайди, що містять текстову інформацію, можуть мати заго­ловок і\n          основний текст. Найчастіше основний текст подають у вигляді маркованих\n          списків, де висвітлюють пункти, план чи го­ловні ідеї доповіді,\n          ставлять запитання (відповіді на них дають усно) тощо. На окремих\n          слайдах подають номери телефонів, назви й адреси фірм тощо. Щоб увести\n          текст, клацають у потріб­ному місці слайда і набирають текст на\n          клавіатурі.\n        </p>\n        <p>\n          До слайда можна додавати текст чотирьох типів: • Текст у рамці; •\n          Текст в автофігурах; • Текст у написах; • Текст WordArt\n        </p>\n        <p>\n          У слайди можна помістити різні об'єкти: рисунки, організа­ційні\n          діаграми, фотографії з графічних файлів (за допомогою ко­манди Малюнок\n          у меню Вставка); діаграми та таблиці з ЕхсеІ, креслення, створені\n          засобами AutoCad, документи та рисунки Microsoft Word, заготовки\n          таблиць Word (за допомогою меню Вставка/Об'єкт та Тип об'єкта); ефекти\n          WordArt, а також еле­менти мультимедіа: відеокліпи, звукові кліпи з\n          файлів чи дикт­орські тексти, які, зокрема, вставляють командами\n          Вставити — Кіно і звук — Звук з файла чи Записати звук. До об'єктів\n          застосо­вують ефекти анімації з запропонованого програмою меню.\n        </p>\n        <p>\n          Якщо тлом має бути пейзаж чи деяка картинка, то у слайд вставляють\n          відповідний графічний об'єкт з файла (відскановану фотографію тощо')\n          збільшують ного до рочміпів слайда і посила­ють на задній план.\n        </p>\n        <p>\n          Для окремого слайда можна записати та відтворити звуковий супровід або\n          примітку. Для цього: 1. Відкрийте слайд, до якого потрібно додати звук\n          або звуко­ву примітку. 2. У меню Вставка виберіть команду Фільми та\n          звуки, а потімЗаписати звук. 3. Щоб записати звук або звукову\n          примітку, натисніть кноп­ку Запис. 4. Після закінчення запису\n          натисніть кнопку Зупинити. 5. У полі Назва введіть назву звуку та\n          натисніть кнопку ОК. 6. На слайді з'явиться значок звуку.\n        </p>\n        <p>\n          До слайда додають фільми або анімовані малюнки GIF. Фільми — це фонові\n          файли відео у форматі AVI,МРЕG, які мають розширення AVI,МОV, QТ, МРG\n          і МРЕg. Анімований файл формату завжди має розширення GIF.\n        </p>\n      </div>\n      <div id=\"64\">\n        <h3>\n          Транслятор. Призначення. Відмінність компілятора від інтерпретатора.\n          Переваги, недоліки\n        </h3>\n        <p>\n          для перекладу тексту програми на мову, зрозумілу комп’ютеру, повинна\n          існувати окрема програмна оболонка – транслятор.\n        </p>\n        <p>\n          Означення Трансляція – перетворення програми, представленої на\n          якій-небудь мові програмування в еквівалентну форму на іншій мові.\n        </p>\n        <p>Транслятори бувають двох видів: компілятори й інтерпретатори.</p>\n        <p>\n          Компілятор перетворює початковий (вихідний) код програми в машинну\n          мову, тобто мову нулів і одиниць. До отриманого коду підключаються\n          стандартні процедури, використані програмістом. У результаті виходить\n          працююча програма – її називають робочим кодом. Файли таких програм\n          мають розширення .ехе або .com і представляють собою машинний код.\n          Компілятор – тип транслятора, що виконує перетворення всієї програми\n          цілком з якої-небудь мови програмування на мову машинних кодів\n          (абсолютний модуль) або близький до нього (об’єктний модуль).\n        </p>\n        <p>\n          Інтерпретатори обробляють текст не заздалегідь, а безпосередньо під\n          час виконання програми. Інтерпретатори є програмами-посередниками, які\n          читають команди з файлу і перекладають їх на мову процесора під час\n          виконання програми. Інтерпретатор – тип транслятора, що здійснює\n          покомандний (порядковий) переклад і виконання програми, написаної на\n          якій-небудь мові програмування.\n        </p>\n        <p>\n          Щоб краще зрозуміти відмінність між компілятором і інтерпретатором,\n          приведемо порівняння. Робота програми-компілятора схожа на роботу\n          літературного перекладача, який спочатку прочитує текст, аналізує\n          його, а потім виконує переклад. Роботу програми інтерпретатора можна\n          порівняти з роботою синхронного перекладача, який виконує переклад\n          відразу в міру озвучування тексту. Зрозуміло, що літературний переклад\n          буде більш якісним, ніж переклад синхронний. Аналогічно код, отриманий\n          при компіляції, буде більш компактний і ефективним, ніж код\n          інтерпретатора. У результаті відкомпільовані програми працюють у 20-50\n          разів швидше, ніж виконувані під керуванням інтерпретатора. Крім того,\n          компілятори під час своєї роботи займають меншу частину ресурсів\n          комп’ютера.\n        </p>\n        <p>\n          Таким чином, компілятори – більш ефективні перекладачі програм. Тому\n          всі прикладні і службові програми поставляються у відкомпільованому\n          вигляді.\n        </p>\n        <p>\n          У випадках, коли час виконання програми не занадто критичний,\n          наприклад, при навчанні, зручно використовувати мову, що\n          інтерпретується. Найпростіша і найбільш розповсюджена з них – це мова\n          програмування Basic. Іншими прикладами є такі мови, що інтерпретуються\n          JavaScript і VBScript, що широко використовуються при створенні\n          Web-сторінок, доступних через Інтернет.\n        </p>\n      </div>\n      <div id=\"65\">\n        <h3>\n          Поняття програми. Поняття про системи програмування. Поняття про\n          інтерпретацію та компіляцію програми.\n        </h3>\n        <p>\n          Програма — це упорядкований список команд, написаних мо­вою\n          програмування і призначених для виконання на комп'ютері. Отже, процес\n          роботи комп'ютера полягає у виконанні програми, тобто набору цілком\n          певних команд, що надходять у цілком певнЬму порядку. Машинний код\n          команди, що складається з ну­лів та одиниць, указує, яку саме дію має\n          виконати ЦП. Отже, щоб задати комп'ютеру послідовність дій, які він\n          має виконати, треба задати послідовність двійкових кодів відповідних\n          команд. Програми в машинних кодах містять у собі тисячі команд.\n          Писа­ти такі програми — дуже складна справа\". Програмісту для цього\n          раніше слід було пам'ятати не тільки комбінацію нулів та оди­ниць\n          двійкового коду кожної команди, але й двійкові коди адрес даних, що\n          використовуються під час виконання.\n        </p>\n        <p>\n          Разом з тим, для того щоб комп'ютер міг виконувати програ­му, її\n          потрібно перекласти на машинну мову. Для такого пере­кладу\n          використовують спеціальні програми-транслятори. Транслятор — це\n          програма, яка призначена для перекладу тексту програми' з однієї мови\n          програмування на іншу мову. Процес перекладання називається\n          трансляцією.\n        </p>\n        <p>\n          Розрізняють два типи трансляторів — компілятори та інтер­претатори.\n        </p>\n        <p>\n          Компілятор — це програма, що призначена для перекладу програми, яка\n          написана деякою мовою, в програму в машинних кодах. До отриманого коду\n          підключаються стандартні процеду­ри, використані програмістом. У\n          результаті дістанемо файли працюючих програм з розширеннями .ехе чи\n          .сот. Процес такого перекладання називається компіляцією.\n        </p>\n        <p>\n          Компілятор створює кінцевий результат — програму в ма­шинних кодах,\n          яка потім виконується. Скомпільований варіант програми можна зберігати\n          на диску. Для повторного виконання програми компілятор вже не\n          потрібен. Досить завантажити з диска в пам'ять комп'ютера\n          скомпільований перед цим варіант і виконати його. Крім того,\n          компілятори під час своєї роботи ви­користовують і частину ресурсів\n          комп'ютера. Тому всі прикладні й службові рами поставляються у\n          відкомпільованому вигляді. Мови, для яких існують\n          програми-компїлятори, — це компі­льовані мови Разсаі, С++, Оеірпі,\n          РоЛгап та інші.\n        </p>\n        <p>\n          Інтерпретатор — це програма, яка призначена для поко-мандних\n          трансляцій та виконання вихідної програми. Такий процес називається\n          інтерпретацією.\n        </p>\n        <p>\n          У процесі трансляції відбувається перевірка вихідної програ­ми на\n          відповідність правилам мови, яка використовується для її описування.\n          Якщо в програмі знайдено помилки, транслятор ви­водить повідомлення\n          про них на пристрій виведення (як прави­ло, на екран дисплея).\n        </p>\n        <p>\n          Інтерпретатор повідомляє про знайдені помилки після транс­ляції кожної\n          команди програми. Це значною мірою полегшує процес пошуку та\n          виправлення помилок у програмі, але суттєво збільшує час трансляції.\n          Компілятор транслює програму набага­то швидше, ніж інтерпретатор, але\n          повідомляє про знайдені ним помилки після завершення компіляції всієї\n          програми. Знайти та виправити помилки у цьому випадку важче. Через це\n          інтерпрета­тори розраховані, в основному, на мови, що призначені для\n          нав­чання програмуванню, і використовуються\n          програмістами-по-чатківцями. Найпростіша й найпоширеніша — це мова\n          програ­мування Ваsіс. Іншими прикладами є і мови JavaSkript і\n          VBSkript, які широко використовуються при створенні Web-сторінок,\n          доступних через Інтернет.\n        </p>\n      </div>\n      <div id=\"66\">\n        <h3>Редактор зв’язків. Призначення. Вхідна і вихідна інформація.</h3>\n        <p>\n          Компонувальник (також редактор зв'язків, лінкер — від англ. Link\n          editor, linker) — програма, яка виконує компонування (англ. linking) —\n          приймає на вхід один або кілька об'єктних модулів і збирає їх в один\n          виконуваний модуль.\n        </p>\n        <p>\n          Для зв'язування модулів компонувальник використовує таблиці імен\n          ідентифікаторів, створені компілятором в кожному з об'єктних модулів.\n          Такі імена можуть бути двох типів: Певні або експортовані назви\n          функцій та змінних, визначені в даному модулі і надані для\n          використання іншим модулям Невизначені або імпортовані імена — функції\n          та змінні, на які посилається модуль, але не визначає їх в середині\n          себе Робота компонувальника полягає в тому, щоб в кожному модулі\n          конкретизувати посилання на невизначені імена. Для кожного\n          імпортованого імені, визначення якого перебуває в інших модулях,\n          згадування імені замінюється на його адресу.\n        </p>\n        <p>\n          До вхідної інформації відносять дані, що необхідні для розв'язання\n          аналітичних задач (наприклад, наявність основних засобів, кількість і\n          склад працівників). Вхідна інформація реєструється в місці її збирання\n          чи виникнення і вводиться в ПЕОМ без попередньої обробки. Вхідна\n          первинна інформація є найбільш детальною і становить основу для\n          наступної логічної та арифметичної обробки даних. До вхідної\n          інформації може належати не лише змінна, а й умовно-постійна та\n          постійна інформація за особливо великої ролі умовно-постійної. Вихідна\n          інформація є підсумком обробки вхідних даних, але вона містить поряд з\n          результатною інформацією і певні первинні дані. Спеціального значення\n          набуває проміжна інформація, яка потрібна для розв'язування тих самих\n          задач у наступних періодах. Результатні дані в багатьох випадках\n          архівуються й накопичуються у базі даних для розв'язування інших\n          взаємозв'язаних задач, для вивчення динаміки показників чи процесів.\n        </p>\n      </div>\n      <div id=\"67\">\n        <h3>\n          Створення запитів, форм і формування звітів при роботі з базами даних.\n          Приклади.\n        </h3>\n        <p>\n          Запити є одним із основних інструментів опрацювання даних в СУБД, він\n          дає змогу вибрати дані із однієї чи кількох взаємо­пов'язаних таблиць,\n          провести обчислення та одержати результат у вигляді таблиці, поновити\n          дані в таблиці, подати чи вилучити із неї записи.\n        </p>\n        <p>СУБД МS Ассеss дає змогу створювати кілька видів запитів:</p>\n        <p>\n          1. Запит на вибірку, за допомогою якого можна із взаємо­пов'язаних\n          таблиць та заздалегідь створених запитів вибрати дані. 2. Запит на\n          створення таблиці будується на основі запиту на вибірку і результати\n          зберігаються у новій таблиці. 3. Запити на оновлення, додавання,\n          вилучення даних відносяться до запитів дій, в результаті виконання\n          яких змінюються дані в таблицях. 4. Перехресні запити відображають\n          результати статистичних розрахунків, виконаних по даним з одного поля.\n          5. Запит з параметром.\n        </p>\n        <p>\n          Створення запиту на вибірку. Припустимо, що вас цікавить така\n          інформація: які крайні брали участь в олімпіаді ;а скільки спортсменів\n          від кожної країни було представлено. Очевидно, що такий запит має бути\n          підготовлений на основі таблиць Країни та Спортсмени.\n        </p>\n        <p>\n          • Відкрийте вікно бази даних і клацніть по вкладці Запроси. У діалозі,\n          що з'явиться, виберіть позицію Простойзапрос. • У подальших діалогах\n          вибрати таблиці, на основі яких ство­рюватиметься запит, і вказати\n          поля, що будуть присутні взапиті. • В останньому діалозі залишіть\n          установленим перемикач Подробний (виведення кожного поля кожного\n          запису) і клацніть по кнопці Готово.\n        </p>\n        <p>\n          Форма — це об'єкт бази даних, в якому її розробник розміщує елементи\n          управління для прийняття дій користувача для введен­ня, відображення\n          та зміни в полях. Форми використовуються у БД для введення даних в\n          таблицю; відкриття інших форм чи зві­тів та вибору, перегляду та\n          друкування звіту. Форма завжди створюється на базі таблиці або запиту,\n          що створює зв'язок між формою і відповідною таблицею, однією чи\n          кількома, який дає змогу переносити їх до відповідних таблиць після\n          введення або зміни. У СУБД МS Ассеss можна працювати з формами в двох\n          режи­мах: режимі форми та режимі конструктора форми.\n        </p>\n        <p>\n          Залежно від призначення та елементів, які містяться у формі,\n          розрізняють: кнопкові, стрічкові, табличні, стовчикові форми та форми\n          з діаграмою. Звіти призначаються для відображення даних, які\n          організую­ться та форматуються відповідно до потреб користувача. За\n          до­помогою звітів складаються комерційні зведення, списки теле­фонів\n          або списки розсилки. Звіт — ефективний засіб для організації даних при\n          виведені на друк. За допомогою звіту можна вивести необхідні відомості\n          в потрібному вигляді. Більшість інформації у звіті вибирається із\n          базової таблиці чи запиту, який є для нього джерелом даних. Інша\n          інформація вводиться при розробці звіту.\n        </p>\n        <p>\n          Користувач має змогу розробити звіт самостійно або створити його за\n          допомогою майстра. Після виклику майстра виводяться діалогові вікна із\n          запрошенням ввести необхідні дані, і звіт ство­рюється на основі\n          відповідей користувача. Далі користувачеві дозволяється перейти до\n          режиму конструктора та внести зміни до стандартного створеного звіту.\n        </p>\n        <p>\n          Простий звіт містить всі поля і записи із базової таблиці чи запиту.\n          При цьому можна розташувати по-різному поля: стовп­чиком, рядком.\n        </p>\n      </div>\n      <div id=\"68\">\n        <h3>\n          ?Види модулів. Програми, що беруть участь в перетворенні модулів\n        </h3>\n        <p>\n          Мо́дульное программи́рование — это организация программы как\n          совокупности небольших независимых блоков, называемых модулями,\n          структура и поведение которых подчиняются определённым правилам.[1]\n          Использование модульного программирования позволяет упростить\n          тестирование программы и обнаружение ошибок. Аппаратно-зависимые\n          подзадачи могут быть строго отделены от других подзадач, что улучшает\n          мобильность создаваемых программ.\n        </p>\n        <p>\n          Мо́дуль — функционально законченный фрагмент программы. Во многих\n          языках (но далеко не обязательно) оформляется в виде отдельного файла\n          с исходным кодом или поименованной непрерывной её части. Некоторые\n          языки предусматривают объединение модулей в пакеты.\n        </p>\n        <p>\n          Принцип модульности является средством упрощения задачи проектирования\n          ПС и распределения процесса разработки ПС между группами\n          разработчиков. При разбиении ПС на модули для каждого модуля\n          указывается реализуемая им функциональность, а также связи с другими\n          модулями.[2] Удобство использования модульной архитектуры заключается\n          в возможности обновления (замены) модуля, без необходимости изменения\n          остальной системы.\n        </p>\n        <p>\n          Роль модулей могут играть структуры данных, библиотеки функций,\n          классы, сервисы и др. программные единицы, реализующие некоторую\n          функциональность и предоставляющие интерфейс к ней.\n        </p>\n        <p>\n          Программный код часто разбивается на несколько файлов, каждый из\n          которых компилируется отдельно от остальных. Такая модульность\n          программного кода позволяет значительно уменьшить время перекомпиляции\n          при изменениях, вносимых лишь в небольшое количество исходных файлов,\n          и упрощает групповую разработку. Также это возможность замены\n          отдельных компонентов (таких как jar-файлы, so или dll библиотеки)\n          конечного программного продукта, без необходимости пересборки всего\n          проекта (например, разработка плагинов к уже готовой программе).\n        </p>\n        <p>\n          Одним из методов написания модульных программ является\n          объектно-ориентированное программирование. ООП обеспечивает высокую\n          степень модульности благодаря таким свойствам, как инкапсуляция,\n          полиморфизм и позднее связывание.\n        </p>\n        <p>\n          Модульное программирование может быть осуществлено, даже когда\n          синтаксис языка программирования не поддерживает явное задание имён\n          модулям.\n        </p>\n      </div>\n      <div id=\"69\">\n        <h3>\n          Поняття про растрову та векторну графіку. Системи опрацювання\n          графічної інформації. Типи графічних файлів.\n        </h3>\n        <p>\n          Растрове зображення складається з точок — пікселів, які збе­рігають\n          інформацію про яскравість та колір. Якість растрових малюнків\n          достатньо висока, але вони займають великий обсяг пам'яті. Растрове\n          зображення нагадує аркуш паперу в клітинку, на якому кожна клітинка\n          зафарбована яким-небудь кольором.\n        </p>\n        <p>\n          Кожний растровий малюнок має певну кількість точок по го­ризонталі і\n          вертикалі. Ці два числа характеризують розмір ма­люнка. Розмір малюнка\n          в пікселях записують у вигляді: X — кількість пікселів по горизонталі,\n          V — кількість пікселів по вер­тикалі. Наприклад для операційної\n          системи Windows типові роз­міри екрану дисплея в піксеЛях 640*480,\n          1024*768, 1240*1024. Очевидно, що чим більша кількість пікселів\n          міститься по гори­зонталі та вертикалі за одних і тих самих\n          геометричних розмірів малюнка, тим вища якість відтворення малюнка.\n        </p>\n        <p>\n          Крім розмірів, малюнок характеризується також кольором кожного\n          пікселя. Таким чином, для створення або збереження растрового малюнка\n          необхідно вказати його розміри і колір кож­ного пікселя. Растрова\n          графіка дає змогу одержати високу якість зобра­ження, тому що\n          ефективно представляє реальні образи. Недолік растрової графіки —\n          великі розміри файлів, що зберігають растровий малюнок.\n        </p>\n        <p>\n          Векторні зображення будуються за допомогою математичного опису простих\n          об'єктів — ліній, кіл, з яких створюються більш складні. Такі прості\n          об'єкти називаються примітивами. Перева­гою векторної графіки є те, що\n          файли, які зберігають векторний малюнок, за розміром в 1-1000 разів\n          менші, ніж аналогічні рас­трові файли.\n        </p>\n        <p>\n          Векторна графіка повністю використовує всі переваги роздільної\n          здатності того конкретного пристрою, на який виво­диться малюнок.\n          Векторні команди просто покіломляють при­строю виведення, що необхідно\n          намалювати об'єкт заданого роз­міру, використовуючи стільки точок,\n          скільки можливо. Векторна графіка дає змогу також легко редагувати\n          окремий об'єкт у ма­люнку, не впливаючи на інші частини.\n        </p>\n        <p>\n          Недоліком векторної графіки є «неприродність» малюнка. Природа уникає\n          прямих ліній, і не всякий малюнок можна скла­сти з кіл та прямих ліній\n          без втрати якості. Через це векторну графіку в основному\n          використовують для побудови креслень, стилізованих малюнків.\n        </p>\n        <p>\n          Виборчі системи. Типи, значення у політ процесі. Визначення поняття\n          БІЛЕТ №18 Розрізняють два принципи побудови графічних зображень:\n          растровий та векторний. Растрове зображення складається з точок —\n          пікселів, які збе­рігають інформацію про яскравість та колір. Якість\n          растрових малюнків достатньо висока, але вони займають великий обсяг\n          пам'яті. Растрове зображення нагадує аркуш паперу в клітинку, на якому\n          кожна клітинка зафарбована яким-небудь кольором. Кожний растровий\n          малюнок має певну кількість точок по го­ризонталі і вертикалі. Ці два\n          числа характеризують розмір ма­люнка. Розмір малюнка в пікселях\n          записують у вигляді: X — кількість пікселів по горизонталі, V —\n          кількість пікселів по вер­тикалі. Наприклад для операційної системи\n          Windows типові роз­міри екрану дисплея в піксеЛях 640*480, 1024*768,\n          1240*1024. Очевидно, що чим більша кількість пікселів міститься по\n          гори­зонталі та вертикалі за одних і тих самих геометричних розмірів\n          малюнка, тим вища якість відтворення малюнка. Крім розмірів, малюнок\n          характеризується також кольором кожного пікселя. Таким чином, для\n          створення або збереження растрового малюнка необхідно вказати його\n          розміри і колір кож­ного пікселя. Растрова графіка дає змогу одержати\n          високу якість зобра­ження, тому що ефективно представляє реальні\n          образи. Недолік растрової графіки — великі розміри файлів, що\n          зберігають растровий малюнок. Векторні зображення будуються за\n          допомогою математичного опису простих об'єктів — ліній, кіл, з яких\n          створюються більш складні. Такі прості об'єкти називаються\n          примітивами. Перева­гою векторної графіки є те, що файли, які\n          зберігають векторний малюнок, за розміром в 1-1000 разів менші, ніж\n          аналогічні рас­трові файли. Векторна графіка повністю використовує всі\n          переваги роздільної здатності того конкретного пристрою, на який\n          виво­диться малюнок. Векторні команди просто покіломляють при­строю\n          виведення, що необхідно намалювати об'єкт заданого роз­міру,\n          використовуючи стільки точок, скільки можливо. Векторна графіка дає\n          змогу також легко редагувати окремий об'єкт у ма­люнку, не впливаючи\n          на інші частини. Недоліком векторної графіки є «неприродність»\n          малюнка. Природа уникає прямих ліній, і не всякий малюнок можна\n          скла­сти з кіл та прямих ліній без втрати якості. Через це векторну\n          графіку в основному використовують для побудови креслень, стилізованих\n          малюнків. Прикладна програма, призначена для створення й опрацю­вання\n          графічних зображень на комп'ютері, називається графіч­ним редактором.\n          Програма графічного редактора дає змогу ство­рювані нею зображення\n          записувати у файл, а також посилати зображення на пристрій виведення.\n          Графічні програми зазвичай використовуються разом зі сканерами,\n          кольоровими принтера­ми, цифровими фотоапаратами та іншою апаратурою\n          одержання й опрацювання зображень. Для роботи з растровими\n          (точкови­ми) зображеннями призначені растрові редактори (Adobe\n          Photoshop, Согеl РhotoPaint, Раіпt та ін.). Для створення векторних\n          зображень служать векторні редактори (СогеlDraw, АdobeIllustrator,\n          Хага та ін.).\n        </p>\n        <p>\n          Існує багато форматів для запису графічних зображень у файл. Існують\n          растрові формати, які використовуються для збе­реження растрових\n          зображень (розширення файлів ВМР, РСХ, ТІFF, GIF, JPG та ін.);\n          векторні формати (розширення СGМ, CDR, WМF, ЕМFР); метафайлові\n          формати, які підтримують обидва види графіки WРG, СGМ). Графічні\n          редактори, як правило, дають змогу працювати з графічними файлами\n          кількох форматів, конвертувати файли з одного формату в інший.\n        </p>\n      </div>\n      <div id=\"70\">\n        <h3>Текстовий редактор WORD. Призначення.</h3>\n        <p>\n          Microsoft Word (повна назва Microsoft Office Word, MS Word, WinWord\n          або просто Word, укр. Слово) — текстовий процесор, що випускається\n          фірмою Майкрософт, входить до складу офісного пакету «Microsoft\n          Office». Перша версія, «Multi Tool Word», була написана для Xenix\n          [3][4][5] і перенесена під DOS у 1983 році. Пізніше створено версії\n          для Apple Macintosh (1984), Microsoft Windows (1989), SCO UNIX, OS/2.\n        </p>\n        <p>\n          Назначение и возможности: • Создание и редактирование текстовых\n          документов с использованием большого выбора шрифтов и стилей текста. •\n          Оформление текстовых документов (создание заголовков, оглавления,\n          колонтитулов, формирование предметного указателя, расстановка\n          переносов, расположение текста на странице; настройка шрифтов и\n          параметров абзаца, а также создание текстовых документов с\n          использованием различных шаблонов (как системных, так и\n          пользовательских), предназначенных специально для соответствующего\n          оформления документа). • Вставка в текст требуемых элементов\n          (специальных символов, рисунков, примечаний, гиперссылок, сносок и т.\n          п.) • Работа с блоками текста (копирование, вставка, перемещение\n          фрагментов текста с использованием возможностей буфера обмена). •\n          Представление некоторых фрагментов текстового документа в виде\n          таблицы, созданной в соответствии с заданными параметрами. • Настройка\n          параметров представления текстового документа. • Просмотр статистики\n          документа (количество страниц текстового документа, количество\n          символов в документе, количество абзацев и др.). • Автоматическая\n          проверка формируемого документа на наличие в нем грамматических,\n          стилистических и т. п. ошибок с возможностью оперативного их\n          устранения • Создание рисунков с использованием специально\n          предназначенной функциональности. • Сохранение сформированного\n          документа в разных форматах. • Вывод на печать готового текстового\n          документа (при необходимости – предварительный просмотр документа\n          перед его распечаткой).\n        </p>\n      </div>\n      <div id=\"71\">\n        <h3>\n          Поняття гіпертексту. Засоби створення та перегляду гіпертекстових\n          документів. Особливості мови розмітки НТМL. Тегова модель.\n          Класифікація тегів. Основні теги мови НТМL для створення\n          гіпертекстового документа. Приклади.\n        </h3>\n        <p>\n          Гіпертекст зовні являє собою звичайний текст з картинками, в якому\n          виділені окремі знаки, слова, фрази або картинки, які називають\n          полями. З кожним полем в гіпертексті пов’язана яка-небудь дія :\n          перехід в інше місце того ж гіпертексту; перехід в інший гіпертекст;\n          програвання звукозапису або відеозапису; запуск програми на виконання\n          тощо.\n        </p>\n        <p>\n          Якщо встановити курсор на одне з полів та натиснути клавішу введення\n          (або кнопку миші), то виконається дія, пов’язана з вибраним полем.\n          Принципи гіпертексту закладені в більшість сучасних комп’ютерних\n          програм. Принципи побудови гіпертекстів широко використовується в\n          Інтернеті. На цьому принципу у 1991 р. була розроблена технологія WWW.\n        </p>\n        <p>\n          Гіпертекст (гіпертекстовий документ) ─ це сукупність елементів тексту,\n          кожний з яких оточений тегами, які визначають сферу дії правил, за\n          якими інтерпретуються текстові елементи документа.\n        </p>\n        <p>\n          Для створення гіпертекстових (HTML) сторінок слід уміти працювати в\n          текстовому редакторі та знати мову HTML (Hyper Text Markup Language) ─\n          мову розмітки гіпертексту. HTML - документ ─ це текстовий файл, що\n          містить звичайний ASCII текст та спеціальні команди розмітки (теги).\n        </p>\n        <p>\n          Теги в HTML ─ це спеціальні елементи розмітки, що визначають, як даний\n          документ HTML має інтерпретуватися браузером. Теги мови HTML\n          визначають правила, за якими браузер виводить документ на екран :\n          розміщення тексту у вікні, представлення графічних об’єктів, виведення\n          звуку та відео тощо. Якщо браузер не розуміє якійсь тег, він його\n          пропускає. Більшість тегів в HTML є парними і мають формат : .Але є й\n          непарні теги, для яких не обов’язковий кінець команди. Багато команд\n          мають параметри (атрибути), які модернізують дію команди.\n        </p>\n        <p>\n          HTML> HEAD> TITLE> Заголовок сторінки /TITLE> /HEAD> BODY> Тіло\n          документа /BODY> /HTML> HTML> ─ тег, який вказує на те, що даний\n          документ є HTML-документом. HEAD>─ тег, у якому розташовані загальні\n          відомості про HTML-сторінку (назва сторінки, додаткова інформація про\n          документ). BODY>─ тег «тіла» документа, що визначає ту частину\n          документа, у якій міститься його основний зміст. TITLE>─ тегзаголовка,\n          що розташовується в HEAD- області документа. Усі теги за їхнім\n          призначенням й ділянкою дії можна розділити на такі основні групи : ü\n          теги, що визначають структуру документа (теги форматування); ü теги,\n          що оформляють блоки гіпертексту (параграфи, списки, таблиці,\n          картинки); ü гіпертекстові посилання і закладки (тобто загальні\n          посилання). Теги форматування : P> …/P> ─ новий абзац; BR>─ перехід на\n          інший рядок; Hn>Текст/Hn>, де під nрозуміється рівень заголовка.\n        </p>\n      </div>\n      <div id=\"72\">\n        <h3>База даних. Види.</h3>\n        <p>\n          База даних (англ. database) – сукупність даних, організованих\n          відповідно до концепції, яка описує характеристику цих даних і\n          взаємозв'язки між їх елементами; ця сукупність підтримує щонайменше\n          одну з областей застосування (за стандартом ISO/IEC 2382:2015[1]). В\n          загальному випадку база даних містить схеми, таблиці, подання,\n          збережені процедури та інші об'єкти. Дані у базі організовують\n          відповідно до моделі організації даних. Таким чином, сучасна база\n          даних, крім саме даних, містить їх опис та може містити засоби для їх\n          обробки.\n        </p>\n        <p>\n          В загальному випадку базою даних можна вважати будь-який впорядкований\n          набір даних. Наприклад, паперову картотеку з формулярами про\n          працівників підприємства у відділі кадрів. Але дана стаття зосереджена\n          на використанні баз даних в інформаційних системах. На даний час\n          застосунки для роботи з базами даних є одними з найпоширеніших\n          прикладних програм.\n        </p>\n        <p>\n          Бази даних класифікують за різними критеріями. За моделлю організації\n          даних розрізняють такі бази даних:\n        </p>\n        <p>\n          *Ієрархічна. Ієрархічна база даних може бути представлена як дерево,\n          що складається з об'єктів різних рівнів. Між об'єктами існують зв'язки\n          типу «предок-нащадок». При цьому можлива ситуація, коли об'єкт не має\n          нащадків або має їх декілька, тоді як у об'єкта-нащадка обов'язково\n          тільки один предок. *Мережна. Така база даних подібна до ієрархічної,\n          за винятком того, що кожен об'єкт може мати більше одного предка. *\n          Реляційна. Реляційна база даних зберігає дані у вигляді таблиць.\n          Найвживаніші СКБД використовують реляційну модель даних.\n          *Об'єктно-орієнтована. У базі даних цього виду дані оформляють у\n          вигляді моделей об'єктів.\n        </p>\n        <p>За розміщенням даних виділяють такі види баз:</p>\n        <p>\n          Локальна, або централізована. Така база даних підтримується на одному\n          комп'ютері. Розподілена. Частини такої бази даних розміщують на різних\n          комп'ютерах мережі.\n        </p>\n        <p>Структуровані та неструктуровані БД</p>\n        <p>\n          Структуровані БД використовують структури даних, тобто структурований\n          опис типу фактів за допомогою схеми даних, більш відомої як модель\n          даних. Модель даних описує об'єкти та взаємовідношення між ними. Існує\n          декілька моделей (чи типів) баз даних, основні: ієрархічна, мережна та\n          реляційна.\n        </p>\n        <p>\n          До неструктурованих БД належать повнотекстові бази даних, які містять\n          неструктуровані тексти статей чи книг у формі, що дозволяє здійснювати\n          швидкий пошук (наприклад, як Вікіпедія).\n        </p>\n      </div>\n      <div id=\"73\">\n        <h3>\n          Системи опрацьовування текстів, їх класифікація та функції. Основні\n          формати текстових файлів і їх перетворення.\n        </h3>\n        <p>\n          Однією з найпоширеніших функцій сучасного персонального комп'ютера є\n          підготовка різноманітних текстових документів. Розрізняють три групи\n          програм підготовки текстових документів: текстові редактори, текстові\n          процесори та видавничі системи.\n        </p>\n        <p>\n          екстовими редакторами, в основному, називають програми, що створюють\n          текстові файли без елементів форматування (тобто не дозволяють\n          виділяти частини тексту різними шрифтами й гарнітурами). Редактори\n          такого роду незамінні під час створення текстів комп'ютер них програм.\n        </p>\n        <p>Редактори неформатованих текстів:</p>\n        <p>\n          NotePad - убудований в операційну систему Windows, зрозумілий і\n          простий у використанні; McEdit - подібний до редактора Edit із MS DOS,\n          компонента файлового менеджера mc (Midnight Commander) ОС Linux; KEdit\n          - найпростіший текстовий редактор, який входить до складу KDE Linux;\n          KWrite - текстовий редактор, який має низку додаткових настроювань у\n          порівнянні з іншими найпростішими текстовими редакторами; Emacs -\n          сполучає в собі функції файлового менеджера й тек стового редактора.\n          Текстові процесори вміють форматувати текст, вставляти в документ\n          графіку й інші об'єкти, що не належать до класичного поняття «текст».\n          Слід зазначити умовність такого поділу — розмаїтість програм для\n          опрацювання тексту дозволяє знайти редактор із будь-яким набором\n          функцій. Редактори, що створюють текст із елементами розмітки: Word —\n          служить для створення різноманітних друкованих документів, є\n          компонентом офісних додатків у MS Windows; StarWriter — входить до\n          складу програми StarOffice, зовнішнім виглядом і функціональністю\n          схожий на Word, однаково добре працює як в MS Windows, так і в ОС\n          Linux;\n        </p>\n        <p>\n          Деякі текстові процесори є так званими WYSIWYG-редакторами. Назва\n          отримана за першими буквами фрази What You See Is What You Get - «те,\n          що ти бачиш, є те, що ти одержиш». Коли говорять, що це\n          WYSIWYG-редактор, то гарантують повну відповідність зовнішнього\n          вигляду документа на екрані комп'ютера і його друкованої копії. До\n          редакторів такого типу належать Word i StarWriter.\n        </p>\n        <p>\n          Текстові файли — найпоширеніший тип даних у комп'ютерному світі.\n          Текстовий файл є формою подання послідовності символів у комп'ютері.\n          Кожний символ із використовуваного набора символів кодується у вигляді\n          одного байта, а решта у вигляді послідовності, двох, трьох і т. д.\n          байтів, що ідуть підряд. Існують кілька проблем, пов'язаних з\n          текстовими файлами. Перша — надзвичайно велика кількість символів, які\n          вимагаються для підтримки різних мов. Американські програмісти для\n          роботи з 128 символами використовують набір символів US ASCII\n          (американський стандартний код для обміну інформацією). Для підтримки\n          інших мов найчастіше не вистачає й 256 символів, тому зараз\n          здійснюється поступовий перехід до кодування Unicode, у якому для\n          зберігання одного символу приділяється вже два байти (тобто є\n          можливість закодувати 65 536 різних символів).\n        </p>\n        <p>\n          Чимало текстових файлів передаються у вигляді простого тексту (plain\n          text). Простий текст складно зробити привабливим і читати легко,\n          оскільки в ньому немає шрифтів різних накреслень, графіків,\n          заголовків, підзаголовків і т. д. Ці додаткові особливості звуться\n          розмітки тексту (markup).\n        </p>\n        <p>\n          Файли, створені різними редакторами, найчастіше мають унікальні\n          розширення, що дозволяють, не заглядаючи усередину документа,\n          здогадатися про способи розмітки тексту. Так, файли, створені\n          редакторами підготовки plain - тексту, часто мають розширення .txt, а\n          підготовлені в редакторі Lyx — .lух. Текстовий процесор Word за\n          замовчуванням створює файли у форматі MS Word (розширення .doc), але\n          підтримує й інші формати, наприклад RTF (роз ширення .rtf). Документи,\n          що містять команди розмітки мови HTML, мають розширення html або .htm.\n          Текстові файли часто використовуються для подання даних, які самі не є\n          чисто текстовими. У цьому випадку інші формати файлів «надбудовуються»\n          над простим текстом. Мови програмування майже виключно використовують\n          простий текст як основу. Зокрема, це дозволяє використати для\n          опрацювання текстів програм різноманітні стандартні утиліти. Файли\n          конфігурації багатьох програм використовують текстовий формат, навіть\n          якщо там зберігаються числа й двійкові перемикачі (так/ні). Хоча це\n          викликає невеличке ускладнення програм через необхідність перетворення\n          бінарних даних у текст і навпаки, проте набагато спрощується\n          налагодження. Крім того, у разі необхідності можна підправити\n          конфігурацію «вручну», без використання власних засобів настроювання\n          даної програми.\n        </p>\n      </div>\n      <div id=\"74\">\n        <h3>Математичне забезпечення обчислювальних систем.</h3>\n        <p>\n          Наряду с аппаратным и программным обеспечением средств вычислительной\n          техники в некоторых случаяхцелесообразно рассматривать информационное\n          обеспечение, под которым понимают совокупность программ и\n          предварительно подготовленных данных, необходимых для работы данных\n          программ.\n        </p>\n        <p>\n          Рассмотрим, например, систему автоматической проверки орфографии в\n          редактируемом тексте. Ее работа заключается в том, что лексические\n          единицы исходного текста сравниваются с заранее заготовленным\n          эталонным массивом данных (словарем).\n        </p>\n        <p>\n          В данном случае для успешной работы системы необходимо иметь кроме\n          аппаратного и программного обеспечения специальные наборы словарей,\n          подключаемые извне. Это пример информационного обеспечения\n          вычислительной техники.\n        </p>\n        <p>\n          (3 специализированных компьютерных системах (бортовых компьютерах\n          автомобилей, судов, ракет, самолетов, космических летательных\n          аппаратов и т. п.) совокупность программного и информационного\n          обеспечения называют математическим обеспечением. Как правило, оно\n          «жестко» записывается в микросхемы ПЗУ и может быть изменено только\n          путем замены ПЗУ или его перепрограммирования на специальном\n          оборудовании.\n        </p>\n        <p>\n          Вычислительная техника прошла те же исторические этапы эволюции,\n          которые прошли и все прочие технические устройства: от ручных\n          приспособлений к механическим устройствам и далее к гибким\n          автоматическим системам. Юридическая консультация Современный\n          компьютер — это прибор. Его принцип действия — электронный, а\n          назначение — автоматизация операций с данными. Гибкость автоматизации\n          основана на том, что операции с данными выполняются по заранее\n          заготовленным и легко сменяемым программам. Универсальность\n          компьютеров основана на том, что любые типы данных представляются в\n          нем с помощью универсального двоичного кодирования.\n        </p>\n        <p>\n          Работа компьютерных программ имеет многоуровневый характер. Программы\n          низшего (базового) уровня занимаются только взаимодействием с базовыми\n          аппаратными средствами и согласованием их работы. Ключевая роль\n          программ базового уровня проявляется в момент первичного запуска\n          компьютера. Программы системного уровня опираются на программы\n          базового уровня и обеспечивают взаимодействие пользователя с\n          оборудованием, взаимодействие дополнительного оборудования с базовым,\n          а также предоставляют возможность для установки и работы программ\n          более высоких уровней. Программы служебногоуровня выполняют\n          обслуживание компьютерной системы, обеспечивают ее контроль и\n          настройку. В своей работе они опираются на программы базового и\n          системного уровней. Программы прикладного уровня используются\n          человеком для исполнения практических задач с помощью компьютера. Эти\n          программы опираются на программы нижележащих уровней. Совокупность\n          программ, установленных на компьютере, называется его программной\n          конфигурацией. Совокупность оборудования, подключенного к компьютеру,\n          называется его аппаратной конфигурацией. Несмотря на то что по своей\n          архитектуре и функциональному назначению разные компьютеры могут быть\n          весьма близки друг другу, найти два компьютера, имеющих одинаковые\n          аппаратные и программные конфигурации, практически невозможно. На\n          каждом рабочем месте программноаппаратная конфигурация создается\n          такой, чтобы наиболее эффективно решать конкретные практические\n          задачи, характерные для данного рабочего места.\n        </p>\n      </div>\n      <div id=\"75\">\n        <h3>\n          Організація пошуку інформації в глобальній мережі. Способи збереження\n          веб-сторінок та їх частин. Особливості збереження зображень і звуку.\n          Приклади.\n        </h3>\n        <p>\n          Кожний ПК в Інтернеті має свою унікальну IP- адресу. IP- адреса ─ це\n          числова адреса, за допомогою якої визначене місце розташування кожного\n          комп’ютера в адресному просторі комп’ютерів всього світу. IP- адреси\n          складаються з чотирьох чисел (байтів), кожне з яких не перевищує 255.\n        </p>\n        <p>\n          В запису адреси числа відокремлюються одне від одного крапками :\n          192.112.36.5. Початок адреси містить інформацію для маршрутизаторів\n          про те, до якої мережі належить комп’ютер; права частина адреси\n          служить для того, щоб повідомити мережі, який комп’ютер має отримати\n          інформацію.\n        </p>\n        <p>\n          Доменна адреса комп’ютера ─ символьна адреса, яка складається з\n          декількох слів, розподілених крапками. Складові частини адреси\n          називаються сегментами.\n        </p>\n        <p>\n          Доменне ім’я розбивається зліва направо : першим стоїть ім’я\n          комп’ютера, потім ім’я домену (область), в який входить цей комп’ютер,\n          потім ім’я більшого домену. Самий правий сегмент є доменом верхнього\n          рівня.\n        </p>\n        <p>\n          Доменна система імен DNS являє собою метод призначення імен шляхом\n          покладання на різні групи користувачів відповідальності за підмножини\n          імен. За міжнародним стандартом домени країн мають двобуквене ім’я\n          (наприклад ua ─ код України).\n        </p>\n        <p>\n          Доступ до Інтернету забезпечують спеціальні організації, які\n          називаються постачальниками послуг Інтернету, або провайдерами. За\n          допомогою власного або орендованого каналу зв’язку провайдер\n          приєднується до опорного каналу та стає комп’ютерним вузлом, до якого\n          підходить цей канал.\n        </p>\n        <p>\n          Способи підключення комп’ютерів до мережі Інтернет : ü Прямий доступ\n          через виділений (спеціальний) канал зв’язку; ü Прямий доступ через\n          виділений телефонний канал зв’язку; ü Комутований доступ (на час\n          зв’язку) через телефонну мережу; ü Доступ через асиметричну цифрову\n          абонентську лінію; ü радіозв’язок; ü супутниковий зв’язок; ü\n          стільниковий зв’язок і т. п.\n        </p>\n        <p>\n          Доступ до Інтернету з використанням телефонної мережі передбачає\n          використання модему ─ стандартного пристрою, що перетворює цифровий\n          (дискретний) сигнал комп’ютера в аналоговий (безперервний) сигнал для\n          передачі телефонною мережею, і навпаки. Модем складається з двох\n          логічних пристроїв : модуляторів, який перетворює цифрову інформацію в\n          аналогову форму, і демодулятора ─ зворотного перетворювача.\n        </p>\n        <p>\n          Пошук інформації в мережі Інтернет ─ це не тільки пошук у web –\n          просторі, але й у інших типах ресурсів мережі. Основними об’єктами,\n          які можна використовувати при виконанні пошуку, є гіпертекстова\n          система WWW, система телеконференцій, електронна пошта, бази даних,\n          списки розсилки, пошукові системи тощо. Але й після проведення пошуку\n          та отримання результатів потрібен контроль за достовірністю отриманої\n          інформації.\n        </p>\n        <p>\n          В Internet вже досить давно використовують так звані метапошукові\n          служби. Таки служби не мають власної бази даних, а просто передають\n          запит декільком звичайним пошуковим службам і, після цього,\n          систематизують всі знайдені посилання.\n        </p>\n        <p>\n          Крім метапошукових систем можна використовувати спеціальні програми\n          пошуковіагенти, які шукають інформацію одночасно по кількох пошукових\n          службах, як і мета пошукові служби. Тобто подають запит одночасно\n          кільком пошуковим машинам, а результати збираються в одне ціле і\n          сортують. Пошукові агенти мають ряд переваг над мета пошуковими\n          службами, серед них : · опитування одночасно великої кількості\n          пошукових служб, інколи до кількох сотень; · гнучке керування\n          передаванням запитом з вказанням максимального часу очікування\n          відповіді, кількості одночасно встановлених з’єднань і т.д.; ·\n          можливість збереження результатів пошуку з можливістю обновлення; ·\n          перевірка доступності знайдених посилань і завантаження сторінок для\n          автономного вивчення; · можливість додаткової перевірки знайдених\n          документів.\n        </p>\n        <p>\n          Основна перевага пошукових агентів полягає в тому, що всі вище\n          перераховані дій виконуються автоматично, а також в тому, що для\n          обробки посилань та документів завантажуються відразу декілька\n          процесів. За рахунок цього оптимально використовується Internet –\n          канал і затрати часу різко зменшуються.\n        </p>\n        <p>\n          Інформація на Web- сервері зберігається у вигляді так званих Web-\n          сторінок або Web-документів. Web-документ ─ це файл у форматі HTML.\n          Цей формат визначає зовнішній вигляд документа, взаємне розташування\n          текстової, графічної і мультимедійної інформації.\n        </p>\n        <p>\n          Більшість користувачів Інтернету використовують для зв’язку зі\n          Всесвітньою мережею з’єднання комутованими телефонними каналами за\n          допомогою модему. Оскільки це повільний спосіб зв’язку, то час\n          завантаження графічного зображення в клієнтський браузер має бути\n          якомога меншим. Саме тому два найбільш популярних графічних стандарти\n          ─ це .GIF і .JPEG.\n        </p>\n        <p>\n          Стандарт GIFвикористовується в документах HTML для відображення так\n          званої бізнес-графіки : діаграм, логотипів, кнопок, розподільних\n          ліній, інших елементів оформлення сторінки. Для розміщення на\n          web-сайті фотографій, репродукцій картин та зображень із великою\n          кількістю кольорів і колірних переходів використовується стандарт\n          JPEG.\n        </p>\n        <p>\n          Аудіофайли (звукові файли) в Інтернеті, як і графічні, зберігаються з\n          втратою інформації, як правило, у форматі .WAV (.WAV ─ один з типів\n          файлів сімейства RIFF ─ системи зберігання будь-яких структурованих\n          даних.\n        </p>\n        <p>\n          Як правило, розробники сайтів вказують розмір аудіофайлів, щоб\n          користувач міг оцінити свої можливості по завантаженню даного\n          звукового файлу. Сучасні браузери також підтримують роботу з\n          відеокліпами популярних форматів .AVI, .VIVO, .QT, .MPEG.\n        </p>\n      </div>\n      <div id=\"76\">\n        <h3>\n          Клієнт-серверна система. Призначення. Поняття клієнту та серверу.\n        </h3>\n        <p>\n          Архітектура клієнт-сервер є одним із архітектурних шаблонів\n          програмного забезпечення та є домінуючою концепцією у створенні\n          розподілених мережних застосунків і передбачає взаємодію та обмін\n          даними між ними. Вона передбачає такі основні компоненти: набір\n          серверів, які надають інформацію або інші послуги програмам, які\n          звертаються до них; набір клієнтів, які використовують сервіси, що\n          надаються серверами; мережа, яка забезпечує взаємодію між клієнтами та\n          серверами.\n        </p>\n        <p>\n          Сервери є незалежними один від одного. Клієнти також функціонують\n          паралельно і незалежно один від одного. Немає жорсткої прив'язки\n          клієнтів до серверів. Більш ніж типовою є ситуація, коли один сервер\n          одночасно обробляє запити від різних клієнтів; з іншого боку, клієнт\n          може звертатися то до одного сервера, то до іншого. Клієнти мають\n          знати про доступні сервери, але можуть не мати жодного уявлення про\n          існування інших клієнтів.\n        </p>\n        <p>\n          уже важливо ясно уявляти, хто або що розглядається як «клієнт». Можна\n          говорити про клієнтський комп'ютер, з якого відбувається звернення до\n          інших комп'ютерів. Можна говорити про клієнтське та серверне програмне\n          забезпечення. Нарешті, можна говорити про людей, які бажають за\n          допомогою відповідного програмного та апаратного забезпечення отримати\n          доступ до тієї чи іншої інформації. Загальноприйнятим є положення, що\n          клієнти та сервери — це перш за все програмні модулі. Найчастіше вони\n          знаходяться на різних комп'ютерах, але бувають ситуації, коли обидві\n          програми — і клієнтська, і серверна, фізично розміщуються на одній\n          машині; в такій ситуації сервер часто називається локальним.\n        </p>\n      </div>\n      <div id=\"77\">\n        <h3>\n          Поняття алгоритму. Властивості алгоритмів. Базові структури алгоритмів\n          та їх основні властивості.\n        </h3>\n        <p>\n          Термін алгорипім виник задовго до появи комп'ютерів, і похо­дить від\n          імені давнього філософа й математика з Хорезму, шо жив у IX ст. —\n          Аль-Хорезмі. Алгоритм — це точний і зрозумілий опис послідовності дій\n          над заданими об'єктами, що дає змогу одержати кінцевий ре­зультат.\n          Синонімом алгоритму можуть бути слова: спосіб, ре­цепт.\n        </p>\n        <p>\n          Алгоритм дає змогу формалізувати виконання інформаційно­го процесу,\n          тобто виконавець алгоритму може виконувати алго­ритм формально, не\n          вникаючи в зміст поставленої задачі. Кожен алгоритм має задовольняти\n          певні властивості.\n        </p>\n        <p>\n          Дискретність. Будь-який алгоритм може бути розбитий на окремі кроки —\n          закінчені дії. Перехід до наступного кроку мож­ливий лише після\n          завершення попереднього.\n        </p>\n        <p>\n          Визначеність (чи детермінованість). Кожна команда алгорит­му повинна\n          однозначно визначати певну дію і не допускати двоякого тлумачення.\n          Строго визначеним повинен бути і поря­док виконання операцій.\n        </p>\n        <p>\n          Результативність. Виконання алгоритму має приводити до конкретного\n          результату — розв'язку задачі, якщо навіть він дає і результати, які\n          можуть виявитися і неправильними. Розв'язком задачі може бути також\n          повідомлення про те, що задача розв'яз­ку не має.\n        </p>\n        <p>\n          Масовість. За допомогою алгоритму можна розв'язувати не одну конкретну\n          задачу, а безліч однотипних задач. Властивість масовості збільшує\n          практичну цінність алгоритму.\n        </p>\n        <p>\n          Скінченність. Виконання алгоритму повинно завершитися за скінченну\n          кількість кроків. Виконання алгоритму не може закін­чуватися\n          невизначеною ситуацією або ж зовсім не закінчуватися.\n        </p>\n        <p>\n          Правильність. Алгоритм правильний, якщо його виконання забезпечує\n          досягнення мети.\n        </p>\n        <p>\n          Формальність. Будь-який виконавець, здатний сприймати і виконувати\n          вказівки алгоритму (навіть не розуміючи їх змісту), діючи за\n          алгоритмом, зможе виконати поставлене завдання.\n        </p>\n        <p>\n          Під час складання алгоритмів треба пам'ятати, що одна й та сама задача\n          може бути успішно розв'язана за допомогою алго­ритмів, що\n          відрізняються один від одного. При виборі алгоритму треба насамперед\n          зважати на вимоги компактності алгоритму і легкості його розуміння. Ці\n          вимоги можна задовольнити, якщо дотримуватися структурного підходу, в\n          основі якого лежить твер­дження, що алгоритм будь-якого ступеня\n          складності можна ви­разити за допомогою трьох базових структур:\n          слідування, розга­луження і циклу.\n        </p>\n        <p>\n          Слідування. Операція S подається у вигляді послідовності двох (або\n          більше) виконуваних одна за одною простіших операцій S1, S2,...., SN.\n          Розгалуження (вибір). Для виконання операції S треба спочат­ку\n          визначити, хибне чи істинне деяке твердження Р. Якщо твер­дження Р\n          істинне, то виконується вказівка S1 і на цьому опера­ція S\n          закінчується. Якщо твердження Р хибне, то виконується вказівка S2 і на\n          цьому виконання вказівки S закінчується.\n        </p>\n        <p>\n          Повторення (цикли). Розрізняють два види циклів — цикл-ПОКИ і цикл-ДО\n          а) У структурі цикл-ПОКИ для виконання вказівки S спочатку треба\n          визначити, істинне чи хибне твердження Р. Якщо Р істин­не, то\n          виконується вказівка S1 і знову повертаються до визначен­ня істинності\n          твердження Р. Якщо ж твердження Р хибне, то ви­конання вказівки S\n          вважається закінченим. б) У структурі цикл-ДО спочатку виконується\n          вказівка S1, а потім визначається істинність твердження Р. Якщо\n          твердження Р хибне, то знову виконується вказівка S1 і визначається\n          істин­ність твердження Р. Якщо ж твердження Р істинне, то виконан­ня\n          вказівки 51 вважається закінченим.\n        </p>\n        <p>\n          Основною властивістю базових алгоритмічних структур є те, що кожна з\n          них має єдиний вхід та єдиний вихід. Для побудови алгоритмів з\n          використанням цих структур дозволяється тільки заміняти будь-яку\n          окрему вказівку алгоритму сукупністю більш простих вказівок, яка являє\n          собою одну із базових структур алго­ритмів. Будь-який алгоритм може\n          бути побудованим з викори­станням тільки вказаних базових структур.\n        </p>\n      </div>\n      <div id=\"78\">\n        <h3>\n          Розподілені системи обробки інформації. Визначення. Призначення.\n        </h3>\n        <p>\n          Распределенная система обработки данных (РСОД) - любая система,\n          позволяющая организовать взаимодействие независимых, но связанных\n          между собой ЭВМ. Эти системы предназначены для автоматизации таких\n          объектов, которые характеризуются территориальной распределенностью\n          пунктов возникновения и потребления информации. Концептуально\n          распределенная обработка подразумевает тот или иной вид организации\n          сети связи и децентрализацию трех категорий ресурсов:\n        </p>\n        <p>\n          · аппаратных вычислительных средств и собственно вычислительной\n          мощности; · баз данных; · управление системой.\n        </p>\n        <p>\n          В распределенных системах обработки данных в той или иной степени\n          осуществляется реализация следующих основных функций: · доступ к\n          ресурсам (вычислительным мощностям, программам, данным и т. п.) с\n          терминалов и из пользовательских программ в режиме «файл-сервер»; ·\n          выполнение заданий и интерактивное общение пользователей с запущенными\n          по их требованию программами в режиме «клиент-сервер»; · сбор\n          статистики о функционировании системы; · обеспечение надежности и\n          живучести системы в целом.\n        </p>\n        <p>\n          Системы, имеющие программы распределенной среды, включают компьютеры,\n          называемые серверами и клиентами. Каждый сервер имеет свою группу\n          клиентов. Программное обеспечение сетевой среды обслуживается и\n          поддерживается сетевыми операционными системами. В роли сервера\n          выступает главный, более мощный компьютер. Распределенная среда\n          требует организации распределенной базы данных и такого\n          инструментария, как распределенная система управления базой данных\n          (РСУБД). Распределенная обработка данных позволила повысить\n          эффективность удовлетворения изменяющейся информационной потребности\n          информационного работника и тем самым обеспечить гибкость принимаемых\n          им решений.\n        </p>\n        <p>\n          Преимущества распределенной обработки данных: • большое число\n          взаимодействующих между собой пользователей, выполняющих функции\n          сбора, регистрации, хранения, передачи и выдачи информации; • снятие\n          пиковых нагрузок с централизованной базы путем распределения обработки\n          и хранения локальных баз данных на разных ЭВМ; • обеспечение доступа\n          информационного работника к вычислительным ресурсам сети ЭВМ; •\n          обеспечение симметричного обмена данными между удаленными\n          пользователями. Введение классификации моделей представления данных на\n          иерархические, сетевые и реляционные отразилось на архитектуре систем\n          управления базами данных и технологии их обработки. Архитектура СУБД\n          описывает ее функционирование как взаимодействие процессов двух типов:\n          клиента и сервера. Распределенная обработка и распределенная база\n          данных не синонимы. Если при распределенной обработке производится\n          работа с базой, то подразумевается, что представление данных, их\n          содержательная обработка, работа с базой на логическом уровне\n          выполняются на персональном компьютере клиента, а поддержание базы в\n          актуальном состоянии — на сервере.\n        </p>\n      </div>\n      <div id=\"79\">\n        <h3>\n          Основні команди для роботи з таблицями в реляційних базах даних:\n          створення структури записів, заповнення даними, редагування даних.\n          Приклади.\n        </h3>\n        <p>\n          Основні категорії команд мови SQL : • DDL - мова визначення даних; •\n          DML - мова маніпулювання даними; • DQL - мова запитів ; • DCL - мова\n          управління даними; • команди адміністрування даних; • команди\n          управління транзакціями\n        </p>\n        <p>\n          Визначення структур бази даних (DDL) Мова визначення даних (Data\n          Definition Language, DDL) дозволяє створювати і змінювати структуру\n          об'єктів бази даних, наприклад, створювати і видаляти таблиці.\n          Основними командами мови DDL є наступні: CREATE TABLE, ALTER TABLE,\n          DROP TABLE, CREATE INDEX, ALTER INDEX, DROP INDEX.\n        </p>\n        <p>\n          Маніпулювання даними (DML) Мова маніпулювання даними (Data\n          Manipulation Language, DML) використовується для маніпулювання\n          інформацією усередині об'єктів реляційної бази даних за допомогою\n          трьох основних команд: INSERT, UPDATE, DELETE.\n        </p>\n        <p>\n          Вибірка даних (DQL) Мова запитів DQL найбільш відома користувачам\n          реляційної бази даних, не дивлячись на те, що він включає всього одну\n          команду SELECT. Ця команда разом зі своїми численними опціями і\n          пропозиціями використовується для формування запитів до реляційної\n          бази даних.\n        </p>\n        <p>\n          Мова управління даними (DCL - Data Control Language) Команди\n          управління даними дозволяють управляти доступом до інформації, що\n          знаходиться усередині бази даних. Як правило, вони використовуються\n          для створення об'єктів, пов'язаних з доступом до даних, а також\n          служать для контролю над розподілом привілеїв між користувачами.\n          Команди управління даними наступні: GRANT, REVOKE.\n        </p>\n        <p>\n          Команди адміністрування даних За допомогою команд адміністрування\n          даних користувач здійснює контроль за виконуваними діями і аналізує\n          операції бази даних ; вони також можуть виявитися корисними при\n          аналізі продуктивності системи. Не слід плутати адміністрування даних\n          з адмініструванням бази даних, яке є загальним управлінням базою даних\n          і має на увазі використання команд усіх рівнів.\n        </p>\n        <p>\n          Команди управління транзакціями Існують наступні команди, що\n          дозволяють управляти транзакціями бази даних : COMMIT, ROLLBACK,\n          SAVEPOINT, SET TRANSACTION.\n        </p>\n        <p>Просмотр доступных баз данных SHOW DATABASES;</p>\n        <p>Создание новой базы данных CREATE DATABASE;</p>\n        <p>Выбор базы данных для использования USE database_name>;</p>\n        <p>Импорт SQL-команд из файла .sql SOURCE path_of_.sql_file></p>\n        <p>DROP DATABASE database_name>;</p>\n        <p>Просмотр таблиц, доступных в базе данных SHOW TABLES;</p>\n        <p>\n          Создание новой таблицы CREATE TABLE table_name1> ( col_name1>\n          col_type1>, col_name2> col_type2>, col_name3> col_type3> PRIMARY KEY\n          (col_name1>), FOREIGN KEY (col_name2>) REFERENCES\n          table_name2>(col_name2>) );\n        </p>\n        <p>\n          Создайте таблицу «instructor»: CREATE TABLE instructor ( ID CHAR(5),\n          name VARCHAR(20) NOT NULL, dept_name VARCHAR(20), salary NUMERIC(8,2),\n          PRIMARY KEY (ID), FOREIGN KEY (dept_name) REFERENCES\n          department(dept_name) );\n        </p>\n      </div>\n      <div id=\"80\">\n        <h3>Мета обчислення (Суперобчислення)</h3>\n        <p>\n          Метаобчислення обумовлені бажанням користувачів мати доступ до\n          ресурсів, недоступних в середовищі одномашинних обчислень. Турчин\n          Валентин Федорович заклав основи метаобчислень, запропонувавши якісно\n          новий метод перетворення і оптимізації програм. Метакомп’ютер (або\n          обчислювальна мережа) утворюється деяким рівнем програмного\n          забезпечення, яке об'єднує комп'ютери і комунікаційні мережі,\n          створюючи ілюзію одного віртуального комп'ютера. Ще один рівень\n          програмного забезпечення на вершині цієї інфраструктури забезпечує\n          метаобчислювальне середовище, що дозволяє програмам використовувати\n          можливості метакомп’ютера. Суть і ролі цих рівнів програмного\n          забезпечення подібні операційним системам, які реалізують віртуальну\n          машину на вершині апаратних ресурсів і підтримують набір інструментів,\n          використовуваних прикладними програмістами.Метатеорія — теорія, що\n          аналізує методи й властивості іншої теорії, так званої предметної або\n          об'єктної теорії. Завдання метатеорії - встановити межі області\n          застосування досліджуваної в ній теорії, відповісти на запитання про\n          її несуперечності та повноті, вивчити або встановити способи введення\n          її нових понять і докази її тверджень тощо. Необхідність створення\n          метатеорії виникла насамперед у застосуванні до математики. Вона була\n          зумовлена потребою з'ясування сенсу понять доказ, аксіома, теорема,\n          дослідження структури математичних теорій і питання про їхню\n          істинність в категорійно-логічних інтерпретаціях\n        </p>\n        <p>\n          Грід-обчислення — це сукупність комп'ютерних ресурсів з декількох\n          місць для досягнення спільної мети. Сітка може розглядатися як\n          розподілена система з неінтерактивних робочих навантажень, які\n          включають в себе велику кількість файлів. Сітка обчислень\n          відрізняється від звичайних високопродуктивних обчислювальних систем,\n          таких як кластерних обчислень тим, що сітки комп'ютерів мають кожен\n          вузол налаштований на виконання іншої задачі / програми. Комп'ютерні\n          сітки також мають тенденцію бути більш різнорідними і географічно\n          розосереджені (таким чином, не фізичні в поєднанні), ніж кластерних\n          комп'ютерів. Незважаючи на те, одна сітка може бути присвячена певній\n          програмі, зазвичай сітка використовується для різних цілей. Сітки\n          часто будуються з загального призначення бібліотеки сітки проміжного\n          програмного забезпечення. Розміри сітки може бути досить великим.\n        </p>\n        <p>\n          рід є формою розподілених обчислень, в якому багато комп'ютерів\n          об'єднані в один потужний віртуальний комп'ютер, і які працюють разом\n          для виконання трудомістких завдань. Для деяких застосувань, «ґрід»\n          обчислення можна розлядати як спеціальний тип паралельних обчислень\n          які покладаються на цілі комп'ютери(обладнані процесорами, пам'ятю,\n          живленням, мережевим інтерфейсом і тд.), під'єднані до комп'ютерної\n          мережі(приватної або публічної) звичайним мережевим інтерфейсом, таким\n          як Ethernet. Це все відрізняє від традиційного поняття\n          суперкомп'ютера, який має багато процесорів, з'єднаних локальною\n          високошвидкісною комп'ютерною шиною.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Answers_40_80;\n","import React from 'react';\nimport Questions from './Questions';\nimport Answers_1_39 from './Answers-1-39';\nimport Answers_40_80 from './Answers-40-80';\n\nimport { AppWrapper, AnswersWrappe, UpButton } from './app.styles';\n\nconst App: React.FC = (): JSX.Element => {\n  return (\n    <AppWrapper>\n      <Questions />\n      <AnswersWrappe>\n        <Answers_1_39 />\n        <Answers_40_80 />\n      </AnswersWrappe>\n      <UpButton href=\"#\">⬆</UpButton>\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}